{
  "Docs": [
    {
      "label": "Shared Services - SHM REST API",
      "value": "Shared-EBP",
      "Specs": {
        "openapi": "3.0.0",
        "info": {
          "version": "1.0.0",
          "title": "Shared Services",
          "description": "Source document is available on Confluence (https://connect.afiniti.com/display/AV6/SHM+Rest+API)"
        },
        "servers": [
          {
            "url": "http://10.32.22.54:9080/",
            "description": "SHM Sandbox"
          }
        ],
        "tags": [
          {
            "name": "General"
          },
          {
            "name": "Shared Memory"
          },
          {
            "name": "Bolt"
          },
          {
            "name": "Stations"
          },
          {
            "name": "Interactions"
          },
          {
            "name": "Telemetry"
          },
          {
            "name": "Admin Interface"
          },
          {
            "name": "Aesilib"
          },
          {
            "name": "Mega Licensing"
          },
          {
            "name": "High Availability"
          },
          {
            "name": "Watch Dog"
          },
          {
            "name": "Agent"
          },
          {
            "name": "Libstat"
          },
          {
            "name": "Dal"
          },
          {
            "name": "Afiniti Config"
          },
          {
            "name": "Agent Group"
          },
          {
            "name": "Call Queue"
          },
          {
            "name": "Call Type"
          },
          {
            "name": "VDN"
          },
          {
            "name": "Map"
          },
          {
            "name": "SMQ"
          },
          {
            "name": "OS"
          },
          {
            "name": "Amazon Connect"
          },
          {
            "name": "Deprecated Endpoints"
          }
        ],
        "paths": {
          "/about": {
            "get": {
              "tags": [
                "General"
              ],
              "description": "This endpoint returns a webpage with all functioning endpoints using the GET method.",
              "responses": {
                "200": {
                  "description": "success"
                }
              }
            }
          },
          "/license-info": {
            "get": {
              "tags": [
                "General"
              ],
              "description": "This endpoint returns shared memory license information using the GET method. Shared memory licensing is a feature designed to protect Afiniti shared memory initialization.",
              "responses": {
                "200": {
                  "description": "success"
                }
              }
            }
          },
          "/versions": {
            "get": {
              "tags": [
                "General"
              ],
              "description": "This endpoint returns version information using the GET method.",
              "responses": {
                "200": {
                  "description": "success"
                }
              }
            }
          },
          "/v1/lock_info": {
            "get": {
              "tags": [
                "General"
              ],
              "description": "This endpoint returns the data on acquired locks using the GET method. If query parameter force_unlock=1 passes, all acquired locks will unlock (Use with Caution).",
              "responses": {
                "200": {
                  "description": "success"
                }
              }
            }
          },
          "/shm/list/all": {
            "get": {
              "tags": [
                "Shared Memory"
              ],
              "description": "This endpoint copies the contents of all lists in shared memory using the GET method.",
              "responses": {
                "200": {
                  "description": "success"
                }
              }
            }
          },
          "/shm/map/all": {
            "get": {
              "tags": [
                "Shared Memory"
              ],
              "description": "This endpoint copies the contents of all map data to shared memory (in hex format), using the GET method (All IP's used are dummy and it does not imply that the service is hosted there.)",
              "parameters": [
                {
                  "name": "type",
                  "in": "query",
                  "required": false,
                  "description": "GET 172.29.148.101:9080/shm/map/all?type=1. This endpoint supports an optional query parameter \"type\"enum Type{all=0,telemetry=1} which defaults to all=0 Sample Response when type is telemetry, it shows the values with the correct data type instead of dumping in hex",
                  "schema": {
                    "type": "integer",
                    "example": 0
                  }
                },
                {
                  "name": "max_entries",
                  "in": "query",
                  "required": true,
                  "description": "This parameter is supported to limit the data returned both have a default value of 100.",
                  "schema": {
                    "type": "integer",
                    "example": 200
                  }
                },
                {
                  "name": "max_maps",
                  "in": "query",
                  "required": true,
                  "description": "This parameter is supported to limit the data returned both have a default value of 100.",
                  "schema": {
                    "type": "integer",
                    "example": 20
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "Sample Response when type is telemetry, it shows the values with the correct data type instead of dumping in hex.",
                  "content": {
                    "application/json": {
                      "examples": {
                        "Sample response when type is telemtry": {
                          "value": {
                            "maps": [
                              {
                                "GroupIntKey": 2,
                                "GroupStringKey": "UpdatedValue",
                                "entries": 2,
                                "name": "tlm_map_group2_gtester"
                              }
                            ],
                            "time_info": {
                              "processing_time_ms": 0,
                              "start_timestamp": "Thu Dec 31 17:45:16 2020"
                            }
                          }
                        },
                        "Sample response when dumps all map data in hex format": {
                          "value": {
                            "maps": [
                              {
                                "HAH-name-104142": "4841482d76616c75652d31323437",
                                "HAH-name-110259": "4841482d76616c75652d32303837",
                                "HAH-name-110531": "4841482d76616c75652d3131363939",
                                "HAH-name-9903": "4841482d76616c75652d3131313234",
                                "entries": 99413,
                                "name": "smap-3"
                              }
                            ],
                            "time_info": null,
                            "processing_time_ms": 0,
                            "start_timestamp": "Thu Dec 31 17:45:16 2020"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "/shm/mq/all": {
            "get": {
              "tags": [
                "Shared Memory"
              ],
              "description": "This endpoint copies all the SMQ (Shared Memory Queue) Names and pending Message Counts to the Shared Memory.",
              "responses": {
                "200": {
                  "description": "success"
                }
              }
            }
          },
          "/dev/shm/invoke-buffers": {
            "get": {
              "tags": [
                "Shared Memory"
              ],
              "description": "This endpoint returns the output of the \"Invoke Buffers\" command from \"ss_tester\" in JSON format.",
              "responses": {
                "200": {
                  "description": "success"
                }
              }
            }
          },
          "/v1/shared_memory_stats": {
            "get": {
              "tags": [
                "Shared Memory"
              ],
              "description": "This endpoint fetches Shared Memory Statistics. These are - Memory Block Count, - Memory Block Size (e.g. 512 MBs), - Memory Block Type (main/aux), - Percentage Allocation for each Memory Block, and - Percetage of utilized memory in each Memory Block.",
              "responses": {
                "200": {
                  "description": "success",
                  "content": {
                    "application/json": {
                      "examples": {
                        "Sample Response": {
                          "value": "{\n    \"block_count\": 3,\n    \"block_size_in_mb\": 512,\n    \"blocks\": [\n        {\n            \"%_allocated\": \"6.44\",\n            \"%_used_out_of_allocated\": \"100.00\",\n            \"type\": \"main\"\n        },\n        {\n            \"%_allocated\": \"0.00\",\n            \"%_used_out_of_allocated\": \"-1.00\",\n            \"type\": \"aux\"\n        },\n        {\n            \"%_allocated\": \"0.00\",\n            \"%_used_out_of_allocated\": \"-1.00\",\n            \"type\": \"aux\"\n        }\n    ],\n    \"total_size_in_mb\": 1536\n}\n"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "/v1/stations": {
            "get": {
              "tags": [
                "Stations"
              ],
              "description": "This endpoint helps fetch a list of all Agent Station IDs using the GET method. Agent Station refers to the machine or device where the Agent receives the Call/ Interaction.",
              "responses": {
                "200": {
                  "description": "success",
                  "content": {
                    "application/json": {
                      "examples": {
                        "Response": {
                          "value": "{\n    \"stations\": [\n        {\n            \"button_config\": \"\",\n            \"call_forward_destination\": \"\",\n            \"domain\": \"\",\n            \"feature_set_id\": -1,\n            \"id\": 2,\n            \"in_use\": false,\n            \"line_count\": 0,\n            \"occupying_agent\": -1,\n            \"password\": \"\",\n            \"permission_set_id\": \"\",\n            \"soft_phone_flag\": false,\n            \"state\": 0,\n            \"type\": -1,\n            \"uuid_office_location\": \"\",\n            \"video_enabled_flag\": false,\n            \"vm_coverage_points\": [\n                0\n            ],\n            \"vm_number\": 0\n        },\n        {\n            \"button_config\": \"\",\n            \"call_forward_destination\": \"\",\n            \"domain\": \"\",\n            \"feature_set_id\": -1,\n            \"id\": 4,\n            \"in_use\": false,\n            \"line_count\": 0,\n            \"occupying_agent\": -1,\n            \"password\": \"\",\n            \"permission_set_id\": \"\",\n            \"soft_phone_flag\": false,\n            \"state\": -1,\n            \"type\": -1,\n            \"uuid_office_location\": \"\",\n            \"video_enabled_flag\": false,\n            \"vm_coverage_points\": [\n                0\n            ],\n            \"vm_number\": 0\n        }\n    ]\n}"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "/v1/stations_from_ids": {
            "post": {
              "tags": [
                "Stations"
              ],
              "description": "This endpoint fetches station objects against a list of station IDs using POST method. Example of returning only required fields 172.29.147.235:9080/v1/stations_from_ids?select=id,state.  <p>Note: Following are the possible values (enums) of the 'State' within a Station Object:\n  enum enStationState {\n  STS_UNKNOWN = -1,\n  STS_OFF_LINE = 0,\n   STS_REGISTERED = 1,\n   STS_ON_LINE = 2,\n  };</P>",
              "requestBody": {
                "required": true,
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "ids": {
                          "type": "string",
                          "example": [
                            1,
                            2,
                            3,
                            4,
                            5
                          ]
                        }
                      }
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "success",
                  "content": {
                    "application/json": {
                      "examples": {
                        "Response": {
                          "value": "{\n    \"stations\": [\n        {\n            \"button_config\": \"\",\n            \"call_forward_destination\": \"\",\n            \"domain\": \"\",\n            \"feature_set_id\": -1,\n            \"id\": 2,\n            \"in_use\": false,\n            \"line_count\": 0,\n            \"occupying_agent\": -1,\n            \"password\": \"\",\n            \"permission_set_id\": \"\",\n            \"soft_phone_flag\": false,\n            \"state\": 0,\n            \"type\": -1,\n            \"uuid_office_location\": \"\",\n            \"video_enabled_flag\": false,\n            \"vm_coverage_points\": [\n                0\n            ],\n            \"vm_number\": 0\n        },\n        {\n            \"button_config\": \"\",\n            \"call_forward_destination\": \"\",\n            \"domain\": \"\",\n            \"feature_set_id\": -1,\n            \"id\": 4,\n            \"in_use\": false,\n            \"line_count\": 0,\n            \"occupying_agent\": -1,\n            \"password\": \"\",\n            \"permission_set_id\": \"\",\n            \"soft_phone_flag\": false,\n            \"state\": -1,\n            \"type\": -1,\n            \"uuid_office_location\": \"\",\n            \"video_enabled_flag\": false,\n            \"vm_coverage_points\": [\n                0\n            ],\n            \"vm_number\": 0\n        }\n    ]\n}\n"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "/v1/stations/[id]": {
            "get": {
              "tags": [
                "Stations"
              ],
              "description": "This endpoint fetches information related to an Agent Station (from the station's object) against the specified Station Id.",
              "parameters": [
                {
                  "name": "ID",
                  "in": "query",
                  "required": true,
                  "description": "This parameter requires a Station ID as a parameter so it can fetch information for that specific station.",
                  "schema": {
                    "type": "integer",
                    "example": 1
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "success",
                  "content": {
                    "application/json": {
                      "examples": {
                        "Response": {
                          "value": "{\n    \"button_config\": \"\",\n    \"call_forward_destination\": \"\",\n    \"domain\": \"\",\n    \"feature_set_id\": -1,\n    \"id\": 1,\n    \"in_use\": false,\n    \"line_count\": 0,\n    \"occupying_agent\": -1,\n    \"password\": \"\",\n    \"permission_set_id\": \"\",\n    \"soft_phone_flag\": false,\n    \"state\": -1,\n    \"type\": -1,\n    \"uuid_office_location\": \"\",\n    \"video_enabled_flag\": false,\n    \"vm_coverage_points\": [\n        0\n    ],\n    \"vm_number\": 0\n}"
                        }
                      }
                    }
                  }
                }
              }
            },
            "put": {
              "tags": [
                "Stations"
              ],
              "description": "This endpoint helps create or update a Station's object against the specified Station Id.",
              "parameters": [
                {
                  "name": "ID",
                  "in": "query",
                  "required": true,
                  "description": "This parameter requires a Station ID as a parameter so it can create or update that specific station.",
                  "schema": {
                    "type": "integer",
                    "example": 1
                  }
                }
              ],
              "requestBody": {
                "required": true,
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "state": {
                          "type": "integer",
                          "example": 0
                        },
                        "tenant": {
                          "type": "integer",
                          "example": 0
                        },
                        "call_forward_destination": {
                          "example": ""
                        },
                        "domain": {
                          "example": " "
                        },
                        "feature_set_id": {
                          "type": "integer"
                        },
                        "occupying_agent": {
                          "type": "integer"
                        },
                        "password": {
                          "example": ""
                        },
                        "permission_set_id": {
                          "example": ""
                        },
                        "soft_phone_flag": {
                          "type": "boolean",
                          "example": "false"
                        },
                        "type": {
                          "type": "boolean",
                          "example": "0"
                        },
                        "uuid_office_location": {
                          "example": ""
                        },
                        "video_enabled_flag": {
                          "type": "boolean",
                          "example": "false"
                        },
                        "vm_number": {
                          "example": 0
                        }
                      }
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "success",
                  "content": {
                    "application/json": {
                      "examples": {
                        "Response": {
                          "value": "{\n    \"button_config\": \"\",\n    \"call_forward_destination\": \"\",\n    \"domain\": \"\",\n    \"feature_set_id\": 0,\n    \"id\": 1,\n    \"in_use\": true,\n    \"line_count\": 0,\n    \"occupying_agent\": 0,\n    \"password\": \"\",\n    \"permission_set_id\": \"\",\n    \"soft_phone_flag\": false,\n    \"state\": 0,\n    \"type\": 0,\n    \"uuid_office_location\": \"\",\n    \"video_enabled_flag\": false,\n    \"vm_coverage_points\": [\n        0\n    ],\n    \"vm_number\": 0\n}"
                        }
                      }
                    }
                  }
                }
              }
            },
            "delete": {
              "tags": [
                "Stations"
              ],
              "description": "This endpoint removes a station using DELETE method.",
              "parameters": [
                {
                  "name": "ID",
                  "in": "query",
                  "required": true,
                  "description": "This parameter requires a Station ID as a parameter so it can delete that specific station.",
                  "schema": {
                    "type": "integer",
                    "example": 1
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "success"
                }
              }
            }
          },
          "/v1/stations_info": {
            "get": {
              "tags": [
                "Stations"
              ],
              "description": "This endpoint helps fetch the number of Station that are currently in a specified State. An enumerator for the desired state is passed in the path as a parameter. Following are the possible enums for 'State' <pre>enum enStationState { STS_UNKNOWN = -1, STS_OFF_LINE = 0, STS_REGISTERED = 1, STS_BUSY_OUT = 2, STS_ON_LINE = 3, };</pre>",
              "responses": {
                "500": {
                  "description": "Response in case of error",
                  "content": {
                    "application/json": {
                      "examples": {
                        "Response": {
                          "value": {
                            "error": {
                              "code": 500,
                              "message": {
                                "SHM err code": -7,
                                "SHM err msg": "SS_ERR_BAD_VALUE"
                              }
                            }
                          }
                        },
                        "Non-error Response": {
                          "value": {
                            "station_count": 0
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "/v1/error_calls": {
            "get": {
              "tags": [
                "Interactions"
              ],
              "description": "This endpoint helps fetch Ixn Objects that have the specified Switch Error Code.",
              "parameters": [
                {
                  "name": "switch_error_code",
                  "in": "query",
                  "required": true,
                  "description": "This parameter helps fetch information against a specific Switch Error Code",
                  "schema": {
                    "type": "integer",
                    "example": 3
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "success",
                  "content": {
                    "application/json": {
                      "examples": {
                        "Response": {
                          "value": "[\n    {\n        \"abandon_flag\": -1,\n        \"acd_attached_datan        \"ani\": \"ani\",\n        \"answer_agent_auto_answer\": -1,\n        \"answer_agent_aux_work_reason_code\": -1,\n        \"answer_agent_created_time\": 1606502078,\n        \"answer_agent_found\": true,\n        \"answer_agent_group_id\": -1,\n        \"answer_agent_group_name\": \"\",\n        \"answer_agent_id\": \"\",\n        \"answer_agent_idle_since\": 1606502078060,\n        \"answer_agent_last_state_time\": 1606502078,\n        \"answer_agent_name\": \"\",\n        \"answer_agent_skill\": -1,\n        \"answer_agent_state\": 2,\n        \"answer_agent_station\": \"\",\n        \"answer_agent_wait_time\": -1,\n        \"arrival_time\": 1606499864767,\n        \"assigned_agent_auto_answer\": -1,\n        \"assigned_agent_aux_work_reason_code\": -1,\n        \"assigned_agent_created_time\": 1606502078,\n        \"assigned_agent_found\": true,\n        \"assigned_agent_id\": \"\",\n        \"assigned_agent_idle_since\": 1606502078060,\n        \"assigned_agent_last_state_time\": 1606502078,\n        \"assigned_agent_name\": \"\",\n        \"assigned_agent_state\": 2,\n        \"call_type_id\": -4,\n\t\"call_type_name\":\"\",\n        \"called_number\": \"\",\n        \"channel_type\": 0,\n        \"connection_time\": -1001,\n        \"end_time\": -1001,\n        \"event_timestamp\": -1,\n        \"ixn_guid\": 2155214589132802,\n        \"ixn_id\": 3,\n        \"lob_id\": -1,\n        \"ringing_time\": -1001,\n        \"routing_status\": -1,\n        \"shm_answer_agent_id\": -1,\n        \"shm_assigned_agent_id\": -1,\n        \"switch_error_code\": 3,\n        \"tenant_name\": \"default_tenant\",\n        \"wrap_end\": -1001,\n        \"wrap_start\": -1001\n    }\n]"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "/ixn/all-active": {
            "get": {
              "tags": [
                "Interactions"
              ],
              "description": "This endpoint fetches all active IXN objects using the GET method.",
              "responses": {
                "200": {
                  "description": "success"
                }
              }
            }
          },
          "/v1/interactions_from_ids": {
            "get": {
              "tags": [
                "Interactions"
              ],
              "description": "This endpoint fetches IXN objects against a list of IXN ids using the GET method.",
              "responses": {
                "200": {
                  "description": "success",
                  "content": {
                    "application/json": {
                      "examples": {
                        "Reponse": {
                          "value": "{\n    \"interactions\": [\n        {\n            \"abandon_flag\": -1,\n            \"acd_controlled_flag\": false,\n            \"acd_id\": 0,\n            \"acd_interaction_id\": \"\",\n            \"acd_routing_status\": \"RS_REASON_NONE\",\n            \"acd_segment_id\": \"\",\n            \"acd_uid\": \"\",\n            \"agent_groups\": null,\n            \"agent_groups_count\": 0,\n            \"aicore_routed_flag\": false,\n            \"ani\": \"ani\",\n            \"answer_agent\": {\n                \"agent_group_id\": -1,\n                \"agent_id\": -1,\n                \"skill\": -1,\n                \"station\": \"\",\n                \"wait_time\": -1\n            },\n            \"arrival_time\": 1633348498738,\n            \"assigned_agent_id\": -1,\n            \"batched_flag\": 0,\n            \"benchmark_flag\": -1,\n            \"bm_algorithm\": -1,\n            \"bm_token_pop_flag\": true,\n            \"cached_ani\": \"\",\n            \"cached_ani_state\": -1,\n            \"call_direction\": 2,\n            \"call_type_active_calls_position\": -1,\n            \"call_type_ciq_position\": -1,\n            \"call_type_id\": -4,\n            \"called_number\": \"\",\n            \"channel_type\": 0,\n            \"collected_digits\": \"\",\n            \"collected_digits_status\": 0,\n            \"connection_time\": -1001,\n            \"created_time\": 1633348498,\n            \"ctqt_ewt\": {\n                \"ewt\": -1,\n                \"priority\": -1\n            },\n            \"customer_name\": \"\",\n            \"def_route_reason\": -1,\n            \"default_ag\": -1,\n            \"dnso_ratio\": -1.0,\n            \"dont_pair_flag\": false,\n            \"end_time\": -1001,\n            \"esg\": -1,\n            \"extended_benchmark\": -1,\n            \"first_queuing_dn\": -1,\n            \"hold_release_history\": null,\n            \"is_post_reserved\": false,\n            \"is_re_top_priority\": false,\n            \"is_recovered\": false,\n            \"is_vht_call\": false,\n            \"is_vht_callback_call\": false,\n            \"is_vht_out_range_call\": false,\n            \"ixn_acd_attribute_set\": null,\n            \"ixn_guid\": 7015178274506539008,\n            \"ixn_guid_string\": \"7015178274506539008\",\n            \"ixn_id\": 1,\n            \"ixn_id_long\": 1,\n            \"ixn_priority\": 31,\n            \"ixn_state\": 1,\n            \"ixn_state_text\": \"CS_WAITING\",\n            \"l1_failure_flag\": false,\n            \"l1_failure_msg_eligible\": true,\n            \"last_state_time\": 1633348498,\n            \"load_balance_flag\": false,\n            \"lob_id\": -1,\n            \"lookup_data\": {\n                \"init_time\": -1,\n                \"state\": 0\n            },\n            \"mega_ucid\": 0,\n            \"mega_ucid_components\": {\n                \"node_id\": 0,\n                \"seq_num\": 0,\n                \"timestamp\": 0\n            },\n            \"mm_flag\": false,\n            \"native_skill_data\": null,\n            \"off_percentage\": -1,\n            \"parent_guid\": -1,\n            \"parent_id\": -1,\n            \"parties\": null,\n            \"party_count\": 0,\n            \"post_reservable_time\": 2147483647,\n            \"pre_routed_agent\": -1,\n            \"pre_routed_aggp\": -1,\n            \"previous_queuing_dn\": -1,\n            \"re_exec_vec_flag\": true,\n            \"ringing_time\": -1001,\n            \"root_ixn_id\": {\n                \"acd\": 0,\n                \"tenant\": 0\n            },\n            \"route_select_history\": null,\n            \"routed_agent_group_id\": -1,\n            \"routing_status\": -1,\n            \"rw_time\": -1001,\n            \"session_node_index\": -1,\n            \"session_thread_index\": -1,\n            \"sim_arri_tm\": -1001,\n            \"so_value\": -1,\n            \"sub_channel_type\": -1,\n            \"sub_channel_type_text\": \"SUB_CHANNEL_UNKNOWN\",\n            \"switch_error_code\": -1,\n            \"target_expression\": \"\",\n            \"tenant_id\": 0,\n            \"tenant_name\": \"default_tenant\",\n            \"terminated_reason\": -1,\n            \"terminated_tm\": -1001,\n            \"tx_conf_type\": 0,\n            \"vdn\": 1,\n            \"vdn_history\": null,\n            \"vector_id\": -1,\n            \"vector_step\": -1,\n            \"vht_dequeued_status\": -1,\n            \"vht_dequeued_time\": -1,\n            \"vht_queued_status\": -1,\n            \"vht_queued_time\": -1,\n            \"wrap_end\": -1001,\n            \"wrap_start\": -1001\n        },\n        {\n            \"abandon_flag\": -1,\n            \"acd_controlled_flag\": false,\n            \"acd_id\": 0,\n            \"acd_interaction_id\": \"\",\n            \"acd_routing_status\": \"RS_REASON_NONE\",\n            \"acd_segment_id\": \"\",\n            \"acd_uid\": \"\",\n            \"agent_groups\": null,\n            \"agent_groups_count\": 0,\n            \"aicore_routed_flag\": false,\n            \"ani\": \"ani\",\n            \"answer_agent\": {\n                \"agent_group_id\": -1,\n                \"agent_id\": -1,\n                \"skill\": -1,\n                \"station\": \"\",\n                \"wait_time\": -1\n            },\n            \"arrival_time\": 1633348498738,\n            \"assigned_agent_id\": -1,\n            \"batched_flag\": 0,\n            \"benchmark_flag\": -1,\n            \"bm_algorithm\": -1,\n            \"bm_token_pop_flag\": true,\n            \"cached_ani\": \"\",\n            \"cached_ani_state\": -1,\n            \"call_direction\": 2,\n            \"call_type_active_calls_position\": -1,\n            \"call_type_ciq_position\": -1,\n            \"call_type_id\": -4,\n            \"called_number\": \"\",\n            \"channel_type\": 0,\n            \"collected_digits\": \"\",\n            \"collected_digits_status\": 0,\n            \"connection_time\": -1001,\n            \"created_time\": 1633348498,\n            \"ctqt_ewt\": {\n                \"ewt\": -1,\n                \"priority\": -1\n            },\n            \"customer_name\": \"\",\n            \"def_route_reason\": -1,\n            \"default_ag\": -1,\n            \"dnso_ratio\": -1.0,\n            \"dont_pair_flag\": false,\n            \"end_time\": -1001,\n            \"esg\": -1,\n            \"extended_benchmark\": -1,\n            \"first_queuing_dn\": -1,\n            \"hold_release_history\": null,\n            \"is_post_reserved\": false,\n            \"is_re_top_priority\": false,\n            \"is_recovered\": false,\n            \"is_vht_call\": false,\n            \"is_vht_callback_call\": false,\n            \"is_vht_out_range_call\": false,\n            \"ixn_acd_attribute_set\": null,\n            \"ixn_guid\": 7015178274506539010,\n            \"ixn_guid_string\": \"7015178274506539010\",\n            \"ixn_id\": 3,\n            \"ixn_id_long\": 3,\n            \"ixn_priority\": 31,\n            \"ixn_state\": 1,\n            \"ixn_state_text\": \"CS_WAITING\",\n            \"l1_failure_flag\": false,\n            \"l1_failure_msg_eligible\": true,\n            \"last_state_time\": 1633348498,\n            \"load_balance_flag\": false,\n            \"lob_id\": -1,\n            \"lookup_data\": {\n                \"init_time\": -1,\n                \"state\": 0\n            },\n            \"mega_ucid\": 0,\n            \"mega_ucid_components\": {\n                \"node_id\": 0,\n                \"seq_num\": 0,\n                \"timestamp\": 0\n            },\n            \"mm_flag\": false,\n            \"native_skill_data\": null,\n            \"off_percentage\": -1,\n            \"parent_guid\": -1,\n            \"parent_id\": -1,\n            \"parties\": null,\n            \"party_count\": 0,\n            \"post_reservable_time\": 2147483647,\n            \"pre_routed_agent\": -1,\n            \"pre_routed_aggp\": -1,\n            \"previous_queuing_dn\": -1,\n            \"re_exec_vec_flag\": true,\n            \"ringing_time\": -1001,\n            \"root_ixn_id\": {\n                \"acd\": 0,\n                \"tenant\": 0\n            },\n            \"route_select_history\": null,\n            \"routed_agent_group_id\": -1,\n            \"routing_status\": -1,\n            \"rw_time\": -1001,\n            \"session_node_index\": -1,\n            \"session_thread_index\": -1,\n            \"sim_arri_tm\": -1001,\n            \"so_value\": -1,\n            \"sub_channel_type\": -1,\n            \"sub_channel_type_text\": \"SUB_CHANNEL_UNKNOWN\",\n            \"switch_error_code\": -1,\n            \"target_expression\": \"\",\n            \"tenant_id\": 0,\n            \"tenant_name\": \"default_tenant\",\n            \"terminated_reason\": -1,\n            \"terminated_tm\": -1001,\n            \"tx_conf_type\": 0,\n            \"vdn\": 1,\n            \"vdn_history\": null,\n            \"vector_id\": -1,\n            \"vector_step\": -1,\n            \"vht_dequeued_status\": -1,\n            \"vht_dequeued_time\": -1,\n            \"vht_queued_status\": -1,\n            \"vht_queued_time\": -1,\n            \"wrap_end\": -1001,\n            \"wrap_start\": -1001\n        }\n]\n}"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "/v1/interactions{id}": {
            "get": {
              "tags": [
                "Interactions"
              ],
              "description": "This endpoint fetches an IXN object against the specified Ixn ID.",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "This parameter is used to specify the Interaction Id of the Interaction to be fetched",
                  "schema": {
                    "type": "integer",
                    "example": 1
                  }
                },
                {
                  "name": "tenant",
                  "in": "query",
                  "required": false,
                  "description": "Optional Query Parameter",
                  "schema": {
                    "type": "integer",
                    "example": 0
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "success",
                  "content": {
                    "application/json": {
                      "examples": {
                        "Response": {
                          "value": "{\n    \"abandon_flag\": -1,\n    \"acd_controlled_flag\": false,\n    \"acd_id\": 0,\n    \"acd_interaction_id\": \"\",\n    \"acd_routing_status\": \"RS_REASON_NONE\",\n    \"acd_segment_id\": \"\",\n    \"acd_uid\": \"\",\n    \"agent_groups\": null,\n    \"agent_groups_count\": 0,\n    \"aicore_routed_flag\": false,\n    \"ani\": \"ani\",\n    \"answer_agent\": {\n        \"agent_group_id\": -1,\n        \"agent_id\": -1,\n        \"skill\": -1,\n        \"station\": \"\",\n        \"wait_time\": -1\n    },\n    \"arrival_time\": 1633077544604,\n    \"assigned_agent_id\": -1,\n    \"batched_flag\": 0,\n    \"benchmark_flag\": -1,\n    \"bm_algorithm\": -1,\n    \"bm_token_pop_flag\": true,\n    \"cached_ani\": \"\",\n    \"cached_ani_state\": -1,\n    \"call_direction\": 2,\n    \"call_type_active_calls_position\": -1,\n    \"call_type_ciq_position\": -1,\n    \"call_type_id\": -4,\n    \"called_number\": \"\",\n    \"channel_type\": 0,\n    \"collected_digits\": \"\",\n    \"collected_digits_status\": 0,\n    \"connection_time\": -1001,\n    \"created_time\": 1633077544,\n    \"ctqt_ewt\": {\n        \"ewt\": -1,\n        \"priority\": -1\n    },\n    \"customer_name\": \"\",\n    \"def_route_reason\": -1,\n    \"default_ag\": -1,\n    \"dnso_ratio\": -1.0,\n    \"dont_pair_flag\": false,\n    \"end_time\": -1001,\n    \"esg\": -1,\n    \"extended_benchmark\": -1,\n    \"first_queuing_dn\": -1,\n    \"hold_release_history\": null,\n    \"is_post_reserved\": false,\n    \"is_re_top_priority\": false,\n    \"is_recovered\": false,\n    \"is_vht_call\": false,\n    \"is_vht_callback_call\": false,\n    \"is_vht_out_range_call\": false,\n    \"ixn_acd_attribute_set\": null,\n    \"ixn_guid\": 7014014308304551936,\n    \"ixn_guid_string\": \"7014014308304551936\",\n    \"ixn_id\": 1,\n    \"ixn_id_long\": 1,\n    \"ixn_priority\": 31,\n    \"ixn_state\": 1,\n    \"ixn_state_text\": \"CS_WAITING\",\n    \"l1_failure_flag\": false,\n    \"l1_failure_msg_eligible\": true,\n    \"last_state_time\": 1633077544,\n    \"load_balance_flag\": false,\n    \"lob_id\": -1,\n    \"lookup_data\": {\n        \"init_time\": -1,\n        \"state\": 0\n    },\n    \"mega_ucid\": 0,\n    \"mega_ucid_components\": {\n        \"node_id\": 0,\n        \"seq_num\": 0,\n        \"timestamp\": 0\n    },\n    \"mm_flag\": false,\n    \"native_skill_data\": null,\n    \"off_percentage\": -1,\n    \"parent_guid\": -1,\n    \"parent_id\": -1,\n    \"parties\": null,\n    \"party_count\": 0,\n    \"post_reservable_time\": 2147483647,\n    \"pre_routed_agent\": -1,\n    \"pre_routed_aggp\": -1,\n    \"previous_queuing_dn\": -1,\n    \"re_exec_vec_flag\": true,\n    \"ringing_time\": -1001,\n    \"root_ixn_id\": {\n        \"acd\": 0,\n        \"tenant\": 0\n    },\n    \"route_select_history\": null,\n    \"routed_agent_group_id\": -1,\n    \"routing_status\": -1,\n    \"rw_time\": -1001,\n    \"session_node_index\": -1,\n    \"session_thread_index\": -1,\n    \"sim_arri_tm\": -1001,\n    \"so_value\": -1,\n    \"sub_channel_type\": -1,\n    \"sub_channel_type_text\": \"SUB_CHANNEL_UNKNOWN\",\n    \"switch_error_code\": -1,\n    \"target_expression\": \"\",\n    \"tenant_id\": 0,\n    \"tenant_name\": \"default_tenant\",\n    \"terminated_reason\": -1,\n    \"terminated_tm\": -1001,\n    \"tx_conf_type\": 0,\n    \"vdn\": 1,\n    \"vdn_history\": null,\n    \"vector_id\": -1,\n    \"vector_step\": -1,\n    \"vht_dequeued_status\": -1,\n    \"vht_dequeued_time\": -1,\n    \"vht_queued_status\": -1,\n    \"vht_queued_time\": -1,\n    \"wrap_end\": -1001,\n    \"wrap_start\": -1001\n}"
                        }
                      }
                    }
                  }
                }
              }
            },
            "put": {
              "tags": [
                "Interactions"
              ],
              "description": "This endpoint helps update Ixn Objects. If the specified Ixn Object does not exist, then a new one will be created. Note that this method supports partial update.  <p>This means that only the fields that are specified in the request will be updated. The rest of the fields in the Ixn object will be ignored (i.e. they will retain the same values as before). </p> <p>Note: for relevant Enum values, please see the text file attached in relevant section on the following Confluence page </i> (https://connect.afiniti.com/display/AV6/SHM+Rest+API#SHMRestAP-Interactions)</p>",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "description": "This parameter is used to specify the Interaction Id of the Interaction to be fetched",
                  "schema": {
                    "type": "integer",
                    "example": null
                  }
                }
              ],
              "requestBody": {
                "required": true,
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "ixn_acd_attributes": {
                          "type": "array",
                          "example": "[{\"key\":\"key1\",\"value\":\"val@!1\"},{\"key\":\"key3\",\"value\":\"val3\"}],"
                        },
                        "tenant": {
                          "type": "integer",
                          "example": 0
                        },
                        "parent_id": {
                          "type": "integer",
                          "example": 0
                        },
                        "conf_tx_flag": {
                          "type": "integer",
                          "example": 0
                        },
                        "state": {
                          "type": "integer",
                          "example": 0
                        },
                        "vdn": {
                          "type": "number",
                          "example": 1
                        },
                        "ani": {
                          "example": ""
                        },
                        "arrival_time": {
                          "type": "integer",
                          "example": 0
                        },
                        "channel_type": {
                          "type": "integer",
                          "example": 1
                        },
                        "sub_channel_type": {
                          "type": "integer",
                          "example": 2
                        },
                        "acd_routing_status": {
                          "type": "integer",
                          "example": 0
                        },
                        "root_ixn_id": {
                          "type": "integer",
                          "example": 0
                        },
                        "acd_uid": {
                          "type": "integer",
                          "example": ""
                        },
                        "acd_segment_id": {
                          "type": "integer",
                          "example": ""
                        },
                        "answer_agent_station": {
                          "type": "integer",
                          "example": ""
                        },
                        "add_party": {
                          "type": "boolean",
                          "example": true
                        },
                        "party_agent_id": {
                          "type": "integer",
                          "example": 0
                        },
                        "party_is_inbound": {
                          "type": "integer",
                          "example": 0
                        },
                        "party_line_number": {
                          "type": "integer",
                          "example": 0
                        },
                        "party_device_id": {
                          "type": "integer",
                          "example": ""
                        },
                        "party_dialogue_key_1": {
                          "type": "integer",
                          "example": ""
                        },
                        "party_dialogue_key_2": {
                          "type": "integer",
                          "example": ""
                        },
                        "party_device_type": {
                          "type": "integer",
                          "example": 0
                        },
                        "party_index": {
                          "type": "integer",
                          "example": 0
                        },
                        "terminated_reason": {
                          "type": "integer",
                          "example": 0
                        },
                        "off_percentage": {
                          "type": "integer",
                          "example": 0
                        },
                        "terminated_tm": {
                          "type": "integer",
                          "example": 0
                        },
                        "abandon_flag": {
                          "type": "integer",
                          "example": 0
                        },
                        "switch_error_code": {
                          "type": "integer",
                          "example": 0
                        },
                        "target_expression": {
                          "type": "integer",
                          "example": ""
                        },
                        "attach_acd_date": {
                          "type": "integer",
                          "example": ""
                        },
                        "unreserve_ixn": {
                          "type": "boolean",
                          "example": false
                        },
                        "remove_ixn_from_all_agent_groups": {
                          "type": "boolean",
                          "example": false
                        }
                      }
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "success",
                  "content": {
                    "application/json": {
                      "examples": {
                        "Response": {
                          "value": "{\n    \"abandon_flag\": -1,\n    \"acd_attached_data\": \"\",\n    \"acd_controlled_flag\": false,\n    \"acd_id\": 0,\n    \"acd_interaction_id\": \"\",\n    \"acd_routing_status\": \"RS_REASON_NONE\",\n    \"acd_segment_id\": \"\",\n    \"acd_uid\": \"\",\n    \"afiniti_routed_flag\": false,\n    \"agent_groups\": null,\n    \"agent_groups_count\": 0,\n    \"ani\": \"\",\n    \"answer_agent\": {\n        \"agent_group_id\": -1,\n        \"agent_id\": -1,\n        \"skill\": -1,\n        \"station\": \"\",\n        \"wait_time\": -1\n    },\n    \"arrival_time\": 1606916871987,\n    \"assigned_agent_id\": -1,\n    \"batched_flag\": 0,\n    \"benchmark_flag\": -1,\n    \"bm_algorithm\": -1,\n    \"bm_token_pop_flag\": true,\n    \"cached_ani\": \"\",\n    \"cached_ani_state\": -1,\n    \"call_direction\": 2,\n    \"call_type_active_calls_position\": -1,\n    \"call_type_ciq_position\": -1,\n    \"call_type_id\": -4,\n    \"called_number\": \"\",\n    \"channel_type\": 1,\n    \"sub_channel_type\": 3,\n    \"sub_channel_type_text\": \"SUB_CHANNEL_APPLE_BUSINESS_CHAT\",\n    \"collected_digits\": \"\",\n    \"collected_digits_status\": 0,\n    \"connection_time\": -1001,\n    \"created_time\": 1606916871,\n    \"ctqt_ewt\": {\n        \"ewt\": -1,\n        \"priority\": -1\n    },\n    \"customer_name\": \"\",\n    \"def_route_reason\": -1,\n    \"default_ag\": -1,\n    \"dnso_ratio\": -1.0,\n    \"dont_pair_flag\": false,\n    \"end_time\": -1001,\n    \"esg\": -1,\n    \"first_queuing_dn\": -1,\n    \"hold_release_history\": null,\n    \"is_post_reserved\": false,\n    \"is_re_top_priority\": false,\n    \"is_recovered\": false,\n    \"is_vht_call\": false,\n    \"is_vht_callback_call\": false,\n    \"is_vht_out_range_call\": false,\n    \"ixn_acd_attribute_set\": {\n        \"key1\": \"val@!1\",\n        \"key3\": \"val3\"\n    },\n    \"ixn_guid\": 957013202829317,\n    \"ixn_id\": 8,\n    \"ixn_id_long\": 8,\n    \"ixn_priority\": 31,\n    \"ixn_state\": 0,\n    \"ixn_state_text\": \"CS_OFFERED\",\n    \"l1_failure_flag\": false,\n    \"l1_failure_msg_eligible\": true,\n    \"last_state_time\": 1606916871,\n    \"load_balance_flag\": false,\n    \"lob_id\": -1,\n    \"lookup_data\": {\n        \"init_time\": -1,\n        \"result\": \"\",\n        \"state\": 0\n    },\n    \"mega_ucid\": 0,\n    \"mega_ucid_components\": {\n        \"node_id\": 0,\n        \"seq_num\": 0,\n        \"timestamp\": 0\n    },\n    \"mm_flag\": false,\n    \"native_skill_data\": null,\n    \"off_percentage\": -1,\n    \"parent_id\": 0,\n    \"parties\": null,\n    \"party_count\": 0,\n    \"post_reservable_time\": 2147483647,\n    \"pre_routed_agent\": -1,\n    \"pre_routed_aggp\": -1,\n    \"previous_queuing_dn\": -1,\n    \"re_exec_vec_flag\": true,\n    \"reporting_benchmark\": -1,\n    \"ringing_time\": -1001,\n    \"root_ixn_id\": {\n        \"acd\": 0,\n        \"tenant\": 0\n    },\n    \"route_select_history\": null,\n    \"routed_agent_group_id\": -1,\n    \"routing_status\": -1,\n    \"rw_time\": -1001,\n    \"session_node_index\": -1,\n    \"session_thread_index\": -1,\n    \"sim_arri_tm\": -1001,\n    \"so_value\": -1,\n    \"switch_error_code\": -1,\n    \"target_expression\": \"\",\n    \"tenant_id\": 0,\n    \"tenant_name\": \"default_tenant\",\n    \"terminated_reason\": -1,\n    \"terminated_tm\": -1001,\n    \"tx_conf_type\": 2,\n    \"vdn\": 1,\n    \"vdn_history\": null,\n    \"vector_id\": -1,\n    \"vector_step\": -1,\n    \"vht_dequeued_status\": -1,\n    \"vht_dequeued_time\": -1,\n    \"vht_queued_status\": -1,\n    \"vht_queued_time\": -1,\n    \"wrap_end\": -1001,\n    \"wrap_start\": -1001\n}\n"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "/lookupInteraction/[ixn_id]": {
            "get": {
              "tags": [
                "Deprecated Endpoints"
              ],
              "description": "This endpoint fetches IXN object with ixn_id using the GET method. The interaction object is identified through the interaction ID. Whenever an interaction object is created by SI, the corresponding interaction ID is communicated to the Lookup service through a shared memory queue named \"smq_to_lookup\". This interaction ID is used by the Lookup service to retrieve the corresponding interaction object from the SHM.",
              "responses": {
                "200": {
                  "description": "success"
                }
              }
            }
          },
          "/v1/interactions/{ixn_id}": {
            "delete": {
              "tags": [
                "Interactions"
              ],
              "description": "This endpoint helps delete an Interaction Object against the specified Ixn_Id.",
              "parameters": [
                {
                  "name": "ixn_id",
                  "in": "path",
                  "required": true,
                  "description": "This parameter is used to specify the Interaction Id of the Interaction to be deleted",
                  "schema": {
                    "type": "integer",
                    "example": 1
                  }
                },
                {
                  "name": "tenant",
                  "in": "query",
                  "required": false,
                  "description": "Optional",
                  "schema": {
                    "type": "integer",
                    "example": null
                  }
                },
                {
                  "name": "keep_object",
                  "in": "query",
                  "required": true,
                  "description": "This parameter has two options. The default option is to delete the entire object (keep_object=0). The other option is to keep the object but delete all its elements (keep_object=1). It is also possible to delete only the specified elements, supported elements are party_index, party_is_mc_child and ixn_acd_attributes. These are shown below.",
                  "schema": {
                    "type": "integer",
                    "example": null
                  }
                },
                {
                  "name": "party_index",
                  "in": "query",
                  "required": true,
                  "description": "This parameter helps delete the value of the 'party_index' parameter within the Interaction Object.",
                  "schema": {
                    "type": "integer",
                    "example": null
                  }
                },
                {
                  "name": "party_is_mc_child",
                  "in": "query",
                  "required": true,
                  "description": "This parameter helps delete the value of the 'party_is_mc_child' parameter within the Interaction Object.",
                  "schema": {
                    "type": "integer",
                    "example": null
                  }
                },
                {
                  "name": "ixn_acd_attributes",
                  "in": "query",
                  "required": true,
                  "description": "This parameter helps delete the the passed attribute names in the 'ixn_acd_attributes' parameter within the Interaction Object.",
                  "schema": {
                    "type": "string",
                    "example": null
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "success"
                }
              }
            }
          },
          "/lookupInteraction/state/{ixn_id}": {
            "get": {
              "tags": [
                "Interactions"
              ],
              "description": "This endpoint fetches lookup state for ixn_id using the GET method.",
              "parameters": [
                {
                  "name": "ixn_id",
                  "in": "path",
                  "required": true,
                  "description": "This parameter is used to specify the Interaction Id of the Interaction, for which lookup information is to be fetched.",
                  "schema": {
                    "type": "integer",
                    "example": 1
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "success"
                }
              }
            },
            "put": {
              "tags": [
                "Interactions"
              ],
              "description": "This endpoint updates Ixn state using the PUT method. The stats can be unknown, offered, waiting, waiting_routable, reserved, requested, routed, ringing, connected, ended, default_routed.",
              "parameters": [
                {
                  "name": "ixn_id",
                  "in": "path",
                  "required": true,
                  "description": "This parameter is used to specify the Interaction Id of the Interaction to be updated.",
                  "schema": {
                    "type": "integer",
                    "example": null
                  }
                },
                {
                  "name": "call_state",
                  "in": "query",
                  "required": true,
                  "description": "Positive values include - unknown, offered, waiting, waiting_routable, reserved, requested, routed, ringing, connected, ended, default_routed",
                  "schema": {
                    "type": "string",
                    "example": null
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "success"
                }
              }
            }
          },
          "/lookupInteraction/wait_threshold_flag/[ixn_id]": {
            "get": {
              "tags": [
                "Interactions"
              ],
              "description": "This endpoint fetches wait threshold flag for ixn_id using the GET method.",
              "responses": {
                "200": {
                  "description": "success"
                }
              }
            }
          },
          "/calls/ended": {
            "get": {
              "tags": [
                "Interactions"
              ],
              "description": "This endpoint gets the number of ended calls using the GET method.",
              "responses": {
                "200": {
                  "description": "success"
                }
              }
            }
          },
          "/v1/interactions_info": {
            "get": {
              "tags": [
                "Interactions"
              ],
              "description": "This endpoint gets the general information on interactions such as total calls. ",
              "responses": {
                "200": {
                  "description": "success"
                }
              }
            }
          },
          "/telemetry/{service_name}": {
            "get": {
              "tags": [
                "Telemetry"
              ],
              "description": "This endpoint fetches telemetry data using the GET method. Telemetry service listens to an event on a shared memory queue and maintains running aggregates & resetting the data on a fixed interval. It stores aggregate stats in shared memory maps.",
              "parameters": [
                {
                  "name": "version",
                  "in": "query",
                  "required": true,
                  "description": "Specifies which telemetry version to use. Default value is 0 ( 0 = Pull data set through upsert, 1 = Pull data set through events service ). See Response Body section to view examples responses against version=0 and version=1.",
                  "schema": {
                    "type": "integer",
                    "example": "default value = 0 or value = 1"
                  }
                },
                {
                  "name": "select",
                  "in": "query",
                  "required": true,
                  "description": "Provide comma seperated keys without space that you would like to pull.",
                  "schema": {
                    "type": "integer",
                    "example": "Default 0"
                  }
                },
                {
                  "name": "tenant",
                  "in": "query",
                  "required": false,
                  "description": "Unique Tenant Id. Default value is zero (0).",
                  "schema": {
                    "type": "integer",
                    "example": 0
                  }
                },
                {
                  "name": "acd",
                  "in": "query",
                  "required": false,
                  "description": "Unique ACD Id. Default value is zero (0).",
                  "schema": {
                    "type": "integer",
                    "example": 0
                  }
                },
                {
                  "name": "instance",
                  "in": "query",
                  "required": false,
                  "description": "Instance Id. Default value is zero (0).",
                  "schema": {
                    "type": "integer",
                    "example": "Default 0"
                  }
                },
                {
                  "name": "service_name",
                  "in": "path",
                  "required": true,
                  "description": "This parameter is used to specify the name of the Service for which telemetry data is to be fetched.",
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "Version 1 example (Get {{IP}}/telemetry/unique_service_name?version=1)",
                  "content": {
                    "application/json": {
                      "examples": {
                        "Response": {
                          "value": "{\n    \"e1\": {\n        \"average\": 0.0,\n        \"count\": 1,\n        \"disable_fixed_reset\": true,\n        \"initial_timestamp\": \"Thu Sep 16 19:24:20 2021\",\n        \"latest_timestamp\": \"Thu Sep 16 19:24:20 2021\",\n        \"max\": 0,\n        \"min\": 0,\n        \"static\": 0,\n        \"sum\": 0.0\n    },\n    \"e2\": {\n        \"count\": 1\n    }\n}"
                        },
                        "Version 0 Example Get {{IP}}/telemetry/unique_service_name": {
                          "value": {
                            "int_key1": 0,
                            "int_key2": 0,
                            "string_key": ""
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "put": {
              "tags": [
                "Telemetry"
              ],
              "description": "This endpoint helps Set or Update telemetry data for the specified service_name using the PUT method.  <p>Note: See confluence page for parameter details (for version=1)</i> https://connect.afiniti.com/display/AV6/Telemetry+Service</p>",
              "parameters": [
                {
                  "name": "version",
                  "in": "query",
                  "required": true,
                  "description": "This parameter specifies which telemetry version to use. Default value is 0 ( 0 = Put data into shared memory maps, 1 = Send events to the telemetry service). See Response Body section to view examples responses against version=0 and version=1.",
                  "schema": {
                    "type": "integer",
                    "example": 0
                  }
                },
                {
                  "name": "service_name",
                  "in": "path",
                  "required": true,
                  "description": "This parameter is used to specify the name of the Service for which telemetry data is to be updated.",
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": {
                "description": "Version '0' Example",
                "required": true,
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "int_key1": {
                          "type": "integer",
                          "example": 0
                        },
                        "int_key2": {
                          "type": "integer",
                          "example": 1
                        },
                        "string_key": {
                          "type": "string",
                          "example": "val"
                        }
                      }
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "success",
                  "content": {
                    "application/json": {
                      "examples": {
                        "Response for Version 0": {
                          "value": "{\n    \"int_key1\": \"success\",\n  \"int_key2\": \"success\",\n    \"string_key\": \"success\"\n}"
                        },
                        "Response for Version 1": {
                          "value": "{\n    \"success\": {\n        \"code\": 200\n    }\n}"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "/telemetry-info": {
            "get": {
              "tags": [
                "Telemetry"
              ],
              "description": "This endpoint fetches a list of active service names and their status using the GET method.",
              "responses": {
                "200": {
                  "description": "success"
                }
              }
            }
          },
          "/aesi/state": {
            "get": {
              "tags": [
                "Aesilib"
              ],
              "description": "This endpoint fetches Aesi_State Entry from SHM Map using the GET method.",
              "responses": {
                "200": {
                  "description": "success"
                }
              }
            }
          },
          "/v1/mega_licensing": {
            "get": {
              "tags": [
                "Mega Licensing"
              ],
              "description": "This endpoint fetches Mega licensing information such as components name, component version name or license name, etc. from the state using the GET method.",
              "parameters": [
                {
                  "name": "tenant",
                  "in": "query",
                  "required": false,
                  "description": "Optional Query Parameter",
                  "schema": {
                    "type": "integer",
                    "example": 2
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "success",
                  "content": {
                    "application/json": {
                      "examples": {
                        "Sample Response": {
                          "value": "{\n    \"max_agents\": -1,\n    \"mode\": 2,\n    \"mode_name\": \"\",\n    \"reason_code\": -1,\n    \"reason_msg\": \"\",\n    \"record_timestamp\": -1,\n    \"timestamp\": -1\n}"
                        }
                      }
                    }
                  }
                }
              }
            },
            "put": {
              "tags": [
                "Mega Licensing"
              ],
              "description": "This endpoint sets Mega licensing information using the PUT method.",
              "parameters": [
                {
                  "name": "tenant",
                  "in": "query",
                  "required": false,
                  "description": "This is an optional query parameter ( Default Value = -1 )",
                  "schema": {
                    "example": -1
                  }
                }
              ],
              "requestBody": {
                "required": true,
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "mode": {
                          "example": 0
                        },
                        "reason_code": {
                          "example": 0
                        },
                        "timestamp": {
                          "example": 0
                        },
                        "record_timestamp": {
                          "example": 0
                        },
                        "max_agents": {
                          "example": 0
                        },
                        "mode_name": {
                          "example": ""
                        },
                        "reason_msg": {
                          "example": ""
                        }
                      }
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "success"
                }
              }
            }
          },
          "/ha/state": {
            "get": {
              "tags": [
                "High Availability"
              ],
              "description": "This endpoint fetches HA State using the GET method. High availability architecture ensures that systems keep running all time, have the resilience to failure, attempt to achieve 100% uptime.",
              "responses": {
                "200": {
                  "description": "success",
                  "content": {
                    "application/json": {
                      "examples": {
                        "Response": {
                          "value": {
                            "active": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "put": {
              "tags": [
                "High Availability"
              ],
              "description": "This endpoint sets HA State to Active (active=true) or Inactive (active=false) using the PUT method.",
              "requestBody": {
                "description": "The Request body must contain the following parameter in JSON format.",
                "required": true,
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "active": {
                          "example": true,
                          "type": "boolean"
                        }
                      }
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "success"
                }
              }
            }
          },
          "/watchdog/hb-dead": {
            "get": {
              "tags": [
                "Watch Dog"
              ],
              "description": "This endpoint fetches data on microservices that were expected to send Heartbeat Messages but failed to do so. For relevant enums, please see the confluence page (https://connect.afiniti.com/display/AV6/SHM+Rest+API)",
              "responses": {
                "200": {
                  "description": "<strong>timeout:</strong> Timeout for the hearbeat service sonfigured in <em>seconds</em>. This timeout is configured in the heartbeat object. In case a heartbeat is not received within this time, an arbitration action is taken.",
                  "content": {
                    "application/json": {
                      "examples": {
                        "Sample Response": {
                          "value": [
                            {
                              "svc_id": 1,
                              "ins_id": 0,
                              "monitor": 1,
                              "state": -1,
                              "state_text": "SVC_STATE_UNKNOWN",
                              "timeout": 5,
                              "last_hb": 1616838005,
                              "thr_id": 1
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "/watchdog/hb-all": {
            "get": {
              "tags": [
                "Watch Dog"
              ],
              "description": "This endpoint fetches data on all heart beaters using the GET method.",
              "responses": {
                "200": {
                  "description": "success",
                  "content": {
                    "application/json": {
                      "examples": {
                        "Sample Response": {
                          "value": [
                            {
                              "svc_id": 1,
                              "ins_id": 0,
                              "monitor": 1,
                              "state": -1,
                              "state_text": "SVC_STATE_UNKNOWN",
                              "timeout": 5,
                              "last_hb": 1616838005,
                              "thr_id": 1
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "/watchdog/hb/[service_id]": {
            "get": {
              "tags": [
                "Watch Dog"
              ],
              "description": "This endpoint fetches data on heart beaters for the given service-id using the GET method.",
              "parameters": [
                {
                  "name": "svc_id",
                  "in": "query",
                  "required": true,
                  "description": "Service Id",
                  "schema": {
                    "type": "integer",
                    "example": null
                  }
                },
                {
                  "name": "ins_id",
                  "in": "query",
                  "required": true,
                  "description": "Instance Id",
                  "schema": {
                    "type": "integer",
                    "example": null
                  }
                },
                {
                  "name": "monitor",
                  "in": "query",
                  "required": true,
                  "description": "Monitor",
                  "schema": {
                    "type": "integer",
                    "example": null
                  }
                },
                {
                  "name": "state",
                  "in": "query",
                  "required": true,
                  "description": "SHM enServiceState",
                  "schema": {
                    "type": "integer",
                    "example": null
                  }
                },
                {
                  "name": "timeout",
                  "in": "query",
                  "required": true,
                  "description": "Service timeout",
                  "schema": {
                    "type": "integer",
                    "example": null
                  }
                },
                {
                  "name": "last_hb",
                  "in": "query",
                  "required": true,
                  "description": "Last heartbeat time",
                  "schema": {
                    "type": "integer",
                    "example": null
                  }
                },
                {
                  "name": "thr_id",
                  "in": "query",
                  "required": true,
                  "description": "Thread Id",
                  "schema": {
                    "type": "integer",
                    "example": null
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "<strong>timeout:</strong> Timeout for the hearbeat service sonfigured in <em>seconds</em>. This timeout is configured in the heartbeat object. In case a heartbeat is not received within this time, an arbitration action is taken.",
                  "content": {
                    "application/json": {
                      "examples": {
                        "Sample Response": {
                          "value": [
                            {
                              "svc_id": 1,
                              "ins_id": 0,
                              "monitor": 1,
                              "state": -1,
                              "timeout": 5,
                              "last_hb": 1616838005,
                              "thr_id": 1
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "/v1/agents": {
            "get": {
              "tags": [
                "Agent"
              ],
              "description": "<p>This endpoint fetches all agent objects using the GET method.</p> <p>Besides the Parameters listed below, it is also possible to use specific values with agent attributes to fetch specific records</p> <p>E.g. To only fetch Agent Objects that have channel_type=0 and agent_state=2, use the relative link <em>/v1/agents?channel_type=0&agent_state=2</em> with the Get method</p>",
              "parameters": [
                {
                  "name": "limit",
                  "in": "query",
                  "required": false,
                  "description": "This parameter is used to specify the number of entries that should be fetched (default=10).",
                  "schema": {
                    "type": "integer",
                    "example": 10
                  }
                },
                {
                  "name": "offset",
                  "in": "query",
                  "required": false,
                  "description": "This parameter is used to specify the number of entries to skip before starting count (default=0).",
                  "schema": {
                    "type": "integer",
                    "example": 0
                  }
                },
                {
                  "name": "tenant",
                  "in": "query",
                  "required": false,
                  "description": "This parameter is used to specify the Tenant ID, if applicable (default=-1).",
                  "schema": {
                    "type": "integer",
                    "example": 1
                  }
                },
                {
                  "name": "select",
                  "in": "query",
                  "required": false,
                  "description": "This parameter is used to specify which fields to return in the response (/v1/agents?select=agent_id,agent_state).",
                  "schema": {
                    "type": "integer",
                    "example": "agent_id,agent_state"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "success",
                  "content": {
                    "application/json": {
                      "examples": {
                        "Response": {
                          "value": "{\n  \"agents\": [\n        {\n            \"acd_agent_id\": \"\",\n            \"acd_attribute_set\": null,\n            \"acd_controlled_flag\": false,\n            \"acd_id\": 0,\n            \"agent_abandon_count\": 0,\n            \"agent_groups\": \n            [\n                {\n                    \"aawt\": -1,\n                    \"awt\": -1,\n                    \"eligibility_flag\": 0,\n                    \"id\": 1,\n                    \"level\": 1\n                }\n            ],\n            \"agent_id\": 1,\n            \"agent_id_long\": 1,\n            \"agent_name\": \"\",\n            \"agent_password\": \"\",\n            \"agent_sip_reg_ip\": \"\",\n            \"agent_state\": 1,\n            \"agent_state_text\": \"\",\n            \"auto_answer\": -1,\n            \"aux_work_reason_code\": -1,\n            \"batched_flag\": 0,\n            \"capacity_profile_id\": \"\",\n            \"channel_type\": 0,\n            \"chat_idleness\": 0,\n         \"consecutive_agent_available_count\": -1,\n            \"created_time\": 1627045300,\n            \"idle_since\": \"Thu Jan  1 04:43:22 1970\",\n            \"is_agent_profile_set\": true,\n            \"is_ani_available\": false,\n            \"is_post_reserved\": false,\n            \"last_state_time\": 1627045300,\n            \"lob_id\": -1,\n            \"logout_reason_code\": -1,\n            \"max_abandon_flag\": false,\n            \"mobile_num\": \"\",\n            \"on_ixn_chan_enabled\": false,\n            \"on_ixn_chan_routable\": true,\n            \"on_ixn_count\": 0,\n            \"on_ixn_id\": -1,\n            \"on_ixn_list\": [],\n            \"out_of_service_reason\": 0,\n            \"pending_state\": -1,\n            \"post_reservable_time\": 2147483647,\n            \"skills\": null,\n            \"station_id\": -1,\n            \"telephony_mode\": 0,\n            \"tenant\": \"default_tenant\",\n            \"tenant_id\": 0,\n            \"wait_threshold\": -1,\n            \"wait_threshold_tm\": -1000,\n            \"work_mode_on_login\": -1\n        }\n        ]\n        }"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "/api/agent/addressbook": {
            "get": {
              "tags": [
                "Agent"
              ],
              "description": "This endpoint fetches agent stats against an agent id list using the GET method.",
              "parameters": [
                {
                  "name": "tenant_id",
                  "in": "query",
                  "required": true,
                  "description": "Only the agents that have this tenant id will be returned. This field supports both string (tenant name) and int (numerical tenant id) type.",
                  "schema": {
                    "type": "string",
                    "example": null
                  }
                },
                {
                  "name": "acd_id",
                  "in": "query",
                  "required": true,
                  "description": "Only the agents that have this acd_id will be returned.",
                  "schema": {
                    "type": "integer",
                    "example": null
                  }
                },
                {
                  "name": "agent_ids",
                  "in": "query",
                  "required": true,
                  "description": "his field accepts an array of integer Agents Ids to lookup",
                  "schema": {
                    "type": "integer",
                    "example": null
                  }
                },
                {
                  "name": "offset",
                  "in": "query",
                  "required": true,
                  "description": "Used for API Pagination.",
                  "schema": {
                    "type": "integer",
                    "example": null
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "success",
                  "content": {
                    "application/json": {
                      "examples": {
                        "Response": {
                          "value": {
                            "agent_id": null,
                            "agent_status": null,
                            "agent_station": null
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "/v1/logged_in_agents": {
            "get": {
              "tags": [
                "Agent"
              ],
              "description": "This endpoint fetches Logged In Agents Object list using the GET method.",
              "responses": {
                "200": {
                  "description": "success"
                }
              }
            }
          },
          "/v1/logged_in_agents_from_ids": {
            "post": {
              "tags": [
                "Agent"
              ],
              "description": "<p>This endpoint fetches Logged In Agents Object list against the Agent Id List.</p> <p>It is also possible to fetch only the required fields from the reqeusted objects (e.g. /v1/logged_in_agents_from_ids?select=agent_id,agent_state)</p>",
              "requestBody": {
                "required": true,
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "ids": {
                          "example": [
                            1,
                            2,
                            3,
                            4,
                            5
                          ]
                        }
                      }
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "success",
                  "content": {
                    "application/json": {
                      "examples": {
                        "Response": {
                          "value": {
                            "agents": [
                              {
                                "acd_agent_id": "",
                                "acd_controlled_flag": false,
                                "acd_id": 0,
                                "agent_abandon_count": 0,
                                "agent_groups": [
                                  {
                                    "aawt": -1,
                                    "awt": -1,
                                    "eligibility_flag": 0,
                                    "id": 1,
                                    "level": 1
                                  }
                                ],
                                "agent_id": 1,
                                "agent_id_long": 1,
                                "agent_name": "",
                                "agent_password": "",
                                "agent_sip_reg_ip": "",
                                "agent_state": 1,
                                "agent_state_text": "",
                                "auto_answer": -1,
                                "aux_work_reason_code": -1,
                                "batched_flag": 0,
                                "capacity_profile_id": "",
                                "channel_type": 0,
                                "chat_idleness": 0,
                                "consecutive_agent_available_count": -1,
                                "created_time": 1622200323,
                                "idle_since": "Thu Jan  1 04:43:22 1970",
                                "is_agent_profile_set": true,
                                "is_ani_available": false,
                                "is_post_reserved": false,
                                "last_state_time": 1622200323,
                                "lob_id": -1,
                                "logout_reason_code": -1,
                                "max_abandon_flag": false,
                                "mobile_num": "",
                                "on_ixn_chan_enabled": false,
                                "on_ixn_chan_routable": true,
                                "on_ixn_count": 0,
                                "on_ixn_id": -1,
                                "on_ixn_list": [],
                                "out_of_service_reason": 0,
                                "pending_state": -1,
                                "post_reservable_time": 2147483647,
                                "skills": null,
                                "station_id": -1,
                                "telephony_mode": 0,
                                "tenant": "default_tenant",
                                "tenant_id": 0,
                                "wait_threshold": -1,
                                "wait_threshold_tm": -1000,
                                "work_mode_on_login": -1
                              }
                            ]
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "/agents/loggedin/count": {
            "get": {
              "tags": [
                "Agent"
              ],
              "description": "This endpoint fetches the number of logged in agents using the GET method.",
              "responses": {
                "200": {
                  "description": "success"
                }
              }
            }
          },
          "/v1/agents/[id]": {
            "get": {
              "tags": [
                "Agent"
              ],
              "description": "<p>This endpoint fetches an agent's information against the provided Agent Id.</p> <p>Note that is it also possible to fetch specific fields only, as well as request specific records, e.g. for channel_type=0. Following is an example relative patth:</p> <pre>/v1/agents/1?select=station_id,agent_state,pending_state,on_ixn_list&channel_type=0</pre> <p>Note - Please see the Confluence document for possible enum values:https://connect.afiniti.com/display/AV6/SHM+Rest+API</p>",
              "parameters": [
                {
                  "name": "id",
                  "in": "query",
                  "required": true,
                  "description": "Agent's unique Id.",
                  "schema": {
                    "type": "integer",
                    "example": -1
                  }
                },
                {
                  "name": "tenant",
                  "in": "query",
                  "required": false,
                  "description": "Query parameter \"tenant\" is optional. Default -1.",
                  "schema": {
                    "type": "integer",
                    "example": -1
                  }
                },
                {
                  "name": "use_acd_id",
                  "in": "query",
                  "required": true,
                  "description": "Query parameter \"use_acd_id\" is optional. Default value is false. Use it to query agents based their acd_agent_id.",
                  "schema": {
                    "type": "integer",
                    "example": false
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "success",
                  "content": {
                    "application/json": {
                      "examples": {
                        "Response": {
                          "value": "{\n    \"acd_agent_id\": \"\",\n    \"acd_controlled_flag\": false,\n    \"acd_id\": 0,\n    \"agent_abandon_count\": 0,\n    \"agent_groups\": null,\n    \"agent_id\": 1,\n    \"agent_id_long\": 1,\n    \"agent_name\": \"\",\n    \"agent_password\": \"\",\n    \"agent_sip_reg_ip\": \"\",\n    \"agent_state\": 2,\n    \"agent_state_text\": \"\",\n    \"auto_answer\": -1,\n    \"aux_work_reason_code\": -1,\n    \"batched_flag\": 0,\n    \"capacity_profile_id\": \"\",\n    \"channel_type\": -1,\n    \"chat_idleness\": 100,\n    \"consecutive_agent_available_count\": -1,\n    \"created_time\": 1606147391,\n    \"idle_since\": \"Thu Oct 14 02:19:08 52866\",\n    \"is_agent_profile_set\": false,\n    \"is_ani_available\": false,\n    \"is_post_reserved\": false,\n    \"last_state_time\": 1606147391,\n    \"lob_id\": -1,\n    \"logout_reason_code\": -1,\n    \"max_abandon_flag\": false,\n    \"mobile_num\": \"\",\n    \"on_ixn_chan_enabled\": false,\n    \"on_ixn_chan_routable\": false,\n    \"on_ixn_count\": 0,\n    \"on_ixn_id\": -1,\n    \"on_ixn_list\": [],\n    \"out_of_service_reason\": 0,\n    \"pending_state\": -1,\n    \"post_reservable_time\": 2147483647,\n    \"station_id\": -1,\n    \"telephony_mode\": 0,\n    \"tenant\": \"default_tenant\",\n    \"tenant_id\": 0,\n    \"wait_threshold\": -1,\n    \"wait_threshold_tm\": -1000,\n    \"work_mode_on_login\": -1\n}"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "/agents/wait_threshold_flag/{agent_id}": {
            "get": {
              "tags": [
                "Agent"
              ],
              "description": "This endpoint gets the wait threshold flag for agent_id using the GET method.",
              "parameters": [
                {
                  "name": "agent_id",
                  "in": "path",
                  "required": true,
                  "description": "Agent's unique Id.",
                  "schema": {
                    "type": "integer",
                    "example": ""
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "success"
                }
              }
            }
          },
          "/numerical_call_id/{ixn_id}": {
            "get": {
              "tags": [
                "Interactions"
              ],
              "description": "This endpoint gets numerical ixn id against string using the GET method. <p>Note: Use the query create=1 to reserve the id beforehand. </p>",
              "parameters": [
                {
                  "name": "ixn_id",
                  "in": "path",
                  "required": true,
                  "description": "This parameter is used to specify the Interaction Id of the relevant Interaction.",
                  "schema": {
                    "type": "integer",
                    "example": 1
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "success"
                }
              }
            }
          },
          "/numerical_agent_id/[agent_id]": {
            "get": {
              "tags": [
                "Agent"
              ],
              "description": "This endpoint gets the numerical Agent Id against the Agent Id in String format.",
              "responses": {
                "200": {
                  "description": "success"
                }
              }
            }
          },
          "/afiniti/ct/ewt/{call_type_name}/{acd_call_id}": {
            "get": {
              "tags": [
                "Libstat"
              ],
              "description": "<p>This endpoint fetches EWT(estimated wait time) data from libstat against acd_call_id and call_type_name.</p> <p>Note:EWT is the estimated length of time an interaction may have to wait in the queue until it is accepted by an agent.</p>",
              "parameters": [
                {
                  "name": "call_type_name",
                  "in": "path",
                  "required": true,
                  "description": "Name of the VQ against which EWT is required.",
                  "schema": {
                    "type": "string",
                    "example": null
                  }
                },
                {
                  "name": "acd_call_id",
                  "in": "path",
                  "required": true,
                  "description": "This will be ACD connection id of a call",
                  "schema": {
                    "type": "string",
                    "example": null
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "success <p> <strong> \"time\" </strong> UTF time stamp when request was made. </P> <p> <strong> \"wt\" </strong> 0 in case of queue EWT. </P> <p> <strong> \"calls\" </strong> current number of in progress + waiting calls in this Virtual queue. </P> <p> <strong> \"wcalls\" </strong> current number of waiting calls in this virtual queue </P> <p> <strong> \"pos\" </strong> same as calls </P> <p> <strong> \"wpos\" </strong> same as wcalls </P> <p> <strong> \"aqt\" </strong> average quitting rate of calls from this Virtual Queue. If unknown this value will be 0 </P> <p> <strong> \"ewt\" </strong> expected waiting time for the call. If unknown this value will be 0</P> <p> <strong> \"hit\" </strong> percentage of call really distributed into this Virtual queue </P>"
                }
              }
            }
          },
          "/afiniti/ct/ewt/[call_type_name]": {
            "get": {
              "tags": [
                "Libstat"
              ],
              "description": "This endpoint fetches EWT data from libstat against call_type_name using the GET method.",
              "parameters": [
                {
                  "name": "call_type_name",
                  "in": "query",
                  "required": true,
                  "description": "Name of the VQ against which EWT is required.",
                  "schema": {
                    "type": "string",
                    "example": null
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "success <p> <strong> \"time\" </strong> UTF time stamp when request was made. </P> <p> <strong> \"wt\" </strong> 0 in case of queue EWT. </P> <p> <strong> \"calls\" </strong> current number of in progress + waiting calls in this Virtual queue. </P> <p> <strong> \"wcalls\" </strong> current number of waiting calls in this virtual queue </P> <p> <strong> \"pos\" </strong> same as calls </P> <p> <strong> \"wpos\" </strong> same as wcalls </P> <p> <strong> \"aqt\" </strong> average quitting rate of calls from this Virtual Queue. If unknown this value will be 0 </P> <p> <strong> \"ewt\" </strong> expected waiting time for the call. If unknown this value will be 0</P> <p> <strong> \"hit\" </strong> percentage of call really distributed into this Virtual queue </P>"
                }
              }
            }
          },
          "/libstat/collective": {
            "get": {
              "tags": [
                "Libstat"
              ],
              "description": "This endpoint fetches collective stats from libstat using the GET method.",
              "parameters": [
                {
                  "name": "ids",
                  "in": "query",
                  "required": true,
                  "description": "List of ids that will be queried",
                  "schema": {
                    "type": "integer",
                    "format": "array",
                    "example": null
                  }
                },
                {
                  "name": "stat_type",
                  "in": "query",
                  "required": true,
                  "description": "AGENT_GROUP = 0, AGENT = 1, CALL_TYPE = 2, CUSTOM_1 = 3, CUSTOM_2 = 4, CUSTOM_3 = 5",
                  "schema": {
                    "type": "integer",
                    "example": null
                  }
                },
                {
                  "name": "aggregate_type",
                  "in": "query",
                  "required": true,
                  "description": "SUM = 0, NONE = 1, CUSTOM = 2",
                  "schema": {
                    "type": "integer",
                    "example": null
                  }
                },
                {
                  "name": "tenant_id",
                  "in": "query",
                  "required": true,
                  "description": "Tenant Id",
                  "schema": {
                    "type": "integer",
                    "example": null
                  }
                },
                {
                  "name": "acd_id",
                  "in": "query",
                  "required": true,
                  "description": "ACD Id",
                  "schema": {
                    "type": "integer",
                    "example": null
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "success"
                }
              }
            }
          },
          "/libstat/dashboard": {
            "get": {
              "tags": [
                "Libstat"
              ],
              "description": "This endpoint exposes afStats::get_dashboard_stats using the GET method.",
              "responses": {
                "200": {
                  "description": "success"
                }
              }
            }
          },
          "/dal/send_user_msg": {
            "get": {
              "tags": [
                "Dal"
              ],
              "description": "This endpoint invokes dal_shm::insert_shm method using the GET method.",
              "responses": {
                "200": {
                  "description": "success"
                }
              }
            }
          },
          "/v1/afiniti_config/component": {
            "get": {
              "tags": [
                "Afiniti Config"
              ],
              "description": "This endpoint returns the component's active configuration using the GET method.",
              "parameters": [
                {
                  "name": "tenant_id",
                  "in": "query",
                  "required": true,
                  "schema": {
                    "type": "integer",
                    "example": null
                  }
                },
                {
                  "name": "component_name",
                  "in": "query",
                  "required": true,
                  "schema": {
                    "type": "integer",
                    "example": null
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "success"
                }
              }
            },
            "put": {
              "tags": [
                "Afiniti Config"
              ],
              "description": "<p>This endpoint updates any single configuration of a component. It operates on the active configuration and schema. This internally uses the config server API.</p> <p>Tip:To get the correct key/value name/datatype/schema use the endpoint (Get /v1/afiniti_config/component) to first fetch the current configuration.</p> <p>E.g. /v1/afiniti_config/component?tenant_id=cisco&component_name=Engine Common</p>",
              "requestBody": {
                "required": true,
                "description": "<p><strong>\"tenant_id\"</strong> each configuration belongs to a tenant</p> <p><strong>\"component_name\" </strong> complete list is available on the config UI under the component section.</p> <p> <strong> \" key\" </strong> The field name you wish to update or the complete path to the field incase of nested fields.</p> <p> <strong> \" value\" </strong> The updated value, the data type is differenet for each key.</p>",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "tenant_id": {
                          "example": "cisco"
                        },
                        "component_name": {
                          "example": "Engine Common"
                        },
                        "key": {
                          "example": "General/enable_l1_only_mode"
                        },
                        "value": {
                          "example": false
                        }
                      }
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "success",
                  "content": {
                    "application/json": {
                      "examples": {
                        "Response": {
                          "value": "{\n    \"createDate\": \"2021-05-26T13:41:02.697Z\",\n    \"data\": {\n        \"Avaya Native\": {\n            \"avaya_native_control_mode\": \"Full Control\",\n            \"enable_avaya_native_integration\": false\n        },\n        \"CWT\": {\n            \"use_switch_provided_ewt\": false\n        },\n        \"General\": {\n            \"call_queue_id\": 1,\n            \"check_l1_failure_eligibility\": false,\n            \"default_route_dnp_call\": false,\n            \"enable_l1_only_mode\": false\n        },\n        \"Mega ACD\": {\n            \"enable_mega_acd_integration\": false\n        },\n        \"Oversight\": {\n            \"oversight_host_ip\": \"127.0.0.1\",\n            \"oversight_host_port\": 4322\n        },\n        \"SHM\": {\n            \"smq_si_route_control\": \"SMQ_ENG_SI_ROUTE_CTRL\",\n            \"smq_si_route_response\": \"SMQ_ENG_SI_ROUTE_CTRL\",\n            \"smq_to_acdss_for_agents\": \"smq_to_cdr_agents\"\n        },\n        \"Service Objective\": {\n            \"AG Level Service Objective\": {\n                \"enable_ag_level_so_for_off\": false\n            },\n            \"DN Level Service Objective\": {\n                \"Attached Data\": {\n                    \"attached_data_key\": \"sample_key\",\n                    \"use_value_from_attached_data\": false,\n                    \"value_type\": \"SO Ratio\"\n                },\n                \"enable_dn_level_so_for_off\": false\n            },\n            \"so_ratio_algorithm\": \"Call Arrival Time Based SO Ratio\"\n        },\n        \"Simulation\": {\n            \"enable_simulation\": false,\n            \"simulation_mode\": \"Signal Based\",\n            \"time_interval_multiplier\": 1\n        },\n        \"Sprint aPBR Integration\": {\n            \"enable_sprint_apbr_integration\": false\n        },\n        \"VHT\": {\n            \"Callback Call\": {\n                \"callback_ewt_type\": \"VHT\"\n            },\n            \"enable_vht\": false\n        }\n    },\n    \"draft\": false,\n    \"id\": \"b9ac694c-424d-4a8f-acd7-9bc444136444\",\n    \"messages\": \"Published by aicore_script_e via config-library on 21-Apr-2021 at 07:29:29 AM EDT. Values sourced from last active configuration 'Default' in schema 'Auto [2021-02-05]'\",\n    \"name\": \"Imported Default 3096\",\n    \"schemaId\": \"eeff0093-3e99-4b38-9828-288efed986bc\",\n    \"updateDate\": \"2021-06-23T11:00:22.402Z\"\n}"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "/v1/afiniti_config/routing_entity": {
            "get": {
              "tags": [
                "Afiniti Config"
              ],
              "description": "This endpoint returns the routing entity configuration using the GET method.",
              "parameters": [
                {
                  "name": "tenant_id",
                  "in": "query",
                  "required": true,
                  "schema": {
                    "type": "integer",
                    "example": null
                  }
                },
                {
                  "name": "type",
                  "in": "query",
                  "required": true,
                  "schema": {
                    "type": "integer",
                    "example": null
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "success"
                }
              }
            },
            "put": {
              "tags": [
                "Afiniti Config"
              ],
              "description": "This endpoint updates any single configuration of a routing entity using the PUT method. <p>Updates any single configuration of a routing entity. This internally uses the config server API.</p>\n  <p>Tip: To get the correct key/value name/datatype/schema use the endpiont (Get /v1/afiniti_config/routing_entity) to first fetch the current configuration</p>\n<p>Example: Get /v1/afiniti_config/routing_entity?tenant_id=cisco&type=lineOfBusiness</p>",
              "requestBody": {
                "required": true,
                "description": "<p><strong>\"tenant_id\" </strong> each configuration belongs to a tenant. </p> <p> <strong> \"type\" </strong> routing entity type to modify available types such as:agent, agentGroup, callType, station, vector, dn, benchmark etc. </p> <p> <strong> \"record_key\" </strong> each routing entity can have multiple records, specify record to update.</p> <p> <strong> \"key\" </strong> the field name you wish to update or the complete path to the field incase of nested fields.</p> <p> <strong> \"value\" </strong> it represents the updated value. Each data type is differenet for each key. </p>",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "tenant_id": {
                          "example": "cisco"
                        },
                        "type": {
                          "example": "lineOfBusiness"
                        },
                        "record_key": {
                          "example": 10
                        },
                        "key": {
                          "example": "monitor_mode"
                        },
                        "value": {
                          "example": false
                        }
                      }
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "succes",
                  "content": {
                    "application/json": {
                      "examples": {
                        "Response": {
                          "value": "{\n        \"createdAt\": \"2021-06-21T15:19:36.923Z\",\n        \"data\": {\n            \"alphaId\": \"20\",\n            \"full-Off\": false,\n            \"id\": 20,\n            \"monitor_mode\": true,\n            \"name\": \"lob20\",\n            \"tenantId\": \"cisco\"\n        },\n        \"id\": \"3ee6f65f-da62-4390-be3f-f6be286b240b\",\n        \"key\": \"10\",\n        \"tenantId\": \"cisco\",\n        \"type\": \"lineOfBusiness\",\n        \"updatedAt\": \"2021-06-23T11:52:48.850Z\"\n    }"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "/agent-groups/list": {
            "get": {
              "tags": [
                "Agent Group"
              ],
              "description": "This endpoint fetches a list of all agent group IDs using the GET method.",
              "responses": {
                "200": {
                  "description": "success",
                  "content": {
                    "application/json": {
                      "examples": {
                        "Response": {
                          "value": "{\n    \"agent_group_list\": [\n        3,\n        2,\n        1\n    ]\n}"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "/v1/agent_groups": {
            "get": {
              "tags": [
                "Agent Group"
              ],
              "description": "<p>This endpoint fetches all agent groups       from the shared memory.</p> <p>E.g.1:/v1/agent_groups?limit=20&offset=10</p> <p>Explanation:Skip the first 10 entries. Only return a maximum of 20 entries.</p> <p>E.g.2:/v1/agent_groups?select=id,name&limit=20&creation_status=1&channel_type=2 <p>Explanation:The response will only have the fields id & name ( select=id,name ). It will return a maximum of 20 entries ( limit=20 ). Also, it will only return agent groups where creation_status is 1 & channel type is 2 (creation_status=1&channel_type=2). This is an example of *(Wildcard) filtering.</p> <p>Note:Wildcard Filtering means to apply filtering & only return agent groups that match the condition. It also supports '&' conditions incase multiple wildcard conditions are provided.</p> <p>Note:Please see the Confluence document for possible enum values:https://connect.afiniti.com/display/AV6/SHM+Rest+API</p>",
              "parameters": [
                {
                  "name": "select",
                  "in": "query",
                  "required": true,
                  "description": "Comma seperated field names to return. Only selecting fields that are required will save resources & result in a faster response time.",
                  "schema": {
                    "type": "string",
                    "example": null
                  }
                },
                {
                  "name": "limit",
                  "in": "query",
                  "required": true,
                  "schema": {
                    "type": "integer",
                    "example": 10
                  }
                },
                {
                  "name": "offset",
                  "in": "query",
                  "required": true,
                  "schema": {
                    "type": "integer",
                    "example": 0
                  }
                },
                {
                  "name": "tenant",
                  "in": "query",
                  "required": true,
                  "schema": {
                    "type": "integer",
                    "example": -1
                  }
                },
                {
                  "name": "ixn_priority",
                  "in": "query",
                  "required": true,
                  "schema": {
                    "type": "integer",
                    "example": 0
                  }
                },
                {
                  "name": "agent_state",
                  "in": "query",
                  "required": true,
                  "schema": {
                    "type": "integer",
                    "example": 1
                  }
                },
                {
                  "name": "ixn_state",
                  "in": "query",
                  "required": true,
                  "schema": {
                    "type": "integer",
                    "example": 7
                  }
                },
                {
                  "name": "reserve_skill",
                  "in": "query",
                  "required": true,
                  "schema": {
                    "type": "integer",
                    "example": 0
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "success",
                  "content": {
                    "application/json": {
                      "examples": {
                        "Response": {
                          "value": {
                            "agent_groups": [
                              {
                                "creation_status": 0,
                                "aawt": 10000,
                                "acd_ciq": 0,
                                "acd_ewt": 0,
                                "af_calls_in_ring": 0,
                                "agent_selection_algorithm": -1,
                                "agent_state_count": 0,
                                "agents_on_acw_count": 0,
                                "agents_on_call": 0,
                                "asso_super_ag": -1,
                                "async_capacity": -1,
                                "available_agents": 0,
                                "benchmark_id": 0,
                                "calls_abandoned": 0,
                                "calls_answered": 0,
                                "calls_in_progress": 0,
                                "calls_in_queue": 0,
                                "calls_offered_count": 0,
                                "channel_type": 0,
                                "cwt": 0,
                                "ewt": 0,
                                "expression": "",
                                "forced_entry_sc_cwc_flag": false,
                                "id": 3,
                                "idle_agents_count": 0,
                                "interim_calls_answered_count": 0,
                                "is_ideal_agent_allowed": false,
                                "is_two_step_skill_enabled": false,
                                "ixn_state_count": 0,
                                "lob_id": -1,
                                "longest_waiting_call": 0,
                                "longest_waiting_call_id": -1,
                                "mm_flag": false,
                                "monitoring_type": 1,
                                "most_idle_agent": -1,
                                "music_on_hold": "",
                                "name": "care1",
                                "num_of_calls_in_queue": 0,
                                "occupancy_thr": null,
                                "off_pairing_algo": -1,
                                "reserve_skill_agents_count": 0,
                                "reserve_skill_state": 0,
                                "rona_ip_failure_to_vdn": "",
                                "rona_ip_failure_to_vdn_context_flag": false,
                                "rona_rings": -1,
                                "rona_to_vdn": "",
                                "rona_to_vdn_active_context_flag": false,
                                "routed_calls_count": 0,
                                "staffed_agents_count": 0,
                                "tenant": "default_tenant",
                                "timed_acw_interval": -1,
                                "unnormalized_express": "",
                                "usable_agents_count": 0,
                                "vht_callback_count": -1,
                                "vht_ewt": -1,
                                "vht_sys_callback_count": 0
                              }
                            ]
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "/v1/agent_groups/[agent_group_id]": {
            "get": {
              "tags": [
                "Agent Group"
              ],
              "description": "This endpoint fetches agent group stats for an agent_group_id using the GET method. <p>Note:Please see the Confluence document for possible enum values:https://connect.afiniti.com/display/AV6/SHM+Rest+API</p>",
              "parameters": [
                {
                  "name": "tenant",
                  "in": "query",
                  "required": true,
                  "schema": {
                    "type": "string",
                    "example": -1
                  }
                },
                {
                  "name": "ixn_priority",
                  "in": "query",
                  "required": true,
                  "schema": {
                    "type": "integer",
                    "example": 0
                  }
                },
                {
                  "name": "agent_state",
                  "in": "query",
                  "required": true,
                  "schema": {
                    "type": "integer",
                    "example": 1
                  }
                },
                {
                  "name": "ixn_state",
                  "in": "query",
                  "required": true,
                  "schema": {
                    "type": "integer",
                    "example": 7
                  }
                },
                {
                  "name": "reserve_skill",
                  "in": "query",
                  "required": true,
                  "schema": {
                    "type": "integer",
                    "example": 0
                  }
                },
                {
                  "name": "agent_group_id",
                  "in": "query",
                  "required": true,
                  "schema": {
                    "type": "integer",
                    "example": 1
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "success",
                  "content": {
                    "application/json": {
                      "examples": {
                        "Response": {
                          "value": "{\n    \"id\": 1,\n    \"aawt\": 10000,\n    \"acd_ciq\": 0,\n    \"acd_ewt\": 0,\n    \"af_calls_in_ring\": 0,\n    \"agent_selection_algorithm\": -1,\n    \"agent_state_count\": 4,\n    \"agents_on_acw_count\": 0,\n    \"agents_on_call\": 0,\n    \"asso_super_ag\": -1,\n    \"async_capacity\": -1,\n    \"available_agents\": 0,\n    \"benchmark_id\": 0,\n    \"calls_abandoned\": 0,\n    \"calls_answered\": 0,\n    \"calls_in_progress\": 0,\n    \"calls_in_queue\": 0,\n    \"calls_offered_count\": 0,\n    \"channel_type\": 0,\n    \"cwt\": 0,\n    \"ewt\": 0,\n    \"expression\": \"\",\n    \"forced_entry_sc_cwc_flag\": false,\n    \"idle_agents_count\": 0,\n    \"interim_calls_answered_count\": 0,\n    \"is_ideal_agent_allowed\": false,\n    \"is_two_step_skill_enabled\": false,\n    \"ixn_state_count\": 0,\n    \"lob_id\": -1,\n    \"longest_waiting_call\": 0,\n    \"longest_waiting_call_id\": -1,\n    \"mm_flag\": false,\n    \"monitoring_type\": 1,\n    \"most_idle_agent\": -1,\n    \"music_on_hold\": \"\",\n    \"name\": \"promo1\",\n    \"num_of_calls_in_queue\": 0,\n    \"occupancy_thr\": null,\n    \"off_pairing_algo\": -1,\n    \"reserve_skill_agents_count\": 4,\n    \"reserve_skill_state\": 0,\n    \"rona_ip_failure_to_vdn\": \"\",\n    \"rona_ip_failure_to_vdn_context_flag\": false,\n    \"rona_rings\": -1,\n    \"rona_to_vdn\": \"\",\n    \"rona_to_vdn_active_context_flag\": false,\n    \"routed_calls_count\": 0,\n    \"staffed_agents_count\": 4,\n    \"tenant\": \"default_tenant\",\n    \"timed_acw_interval\": -1,\n    \"unnormalized_express\": \"\",\n    \"usable_agents_count\": 0,\n    \"vht_callback_count\": -1,\n    \"vht_ewt\": -1,\n    \"vht_sys_callback_count\": 0\n}"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "/v1/agent_groups_from_ids": {
            "post": {
              "tags": [
                "Agent Group"
              ],
              "description": "This endpoint fetches agent group stats for a list of agent group IDs using the POST method.",
              "parameters": [
                {
                  "name": "select",
                  "in": "query",
                  "required": true,
                  "description": "Comma seperated field names ( strings ) to return",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "tenant",
                  "in": "query",
                  "required": true,
                  "schema": {
                    "type": "integer",
                    "example": -1
                  }
                }
              ],
              "requestBody": {
                "required": true,
                "description": "<p><strong> \"ids\" </strong> an array of agent group ids(integers) to lookup </p>",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "ids": {
                          "example": [
                            1,
                            2,
                            3
                          ]
                        }
                      }
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "success",
                  "content": {
                    "application/json": {
                      "examples": {
                        "Response": {
                          "value": {
                            "agent_groups": [
                              {
                                "aawt": 10000,
                                "acd_ciq": 0,
                                "acd_ewt": 0,
                                "af_calls_in_ring": 0,
                                "agent_selection_algorithm": -1,
                                "agent_state_count": 0,
                                "agents_on_acw_count": 0,
                                "agents_on_call": 0,
                                "asso_super_ag": -1,
                                "async_capacity": -1,
                                "available_agents": 0,
                                "benchmark_id": 0,
                                "calls_abandoned": 0,
                                "calls_answered": 0,
                                "calls_in_progress": 0,
                                "calls_in_queue": 0,
                                "calls_offered_count": 0,
                                "channel_type": 0,
                                "cwt": 0,
                                "ewt": 0,
                                "expression": "",
                                "forced_entry_sc_cwc_flag": false,
                                "id": 3,
                                "idle_agents_count": 0,
                                "interim_calls_answered_count": 0,
                                "is_ideal_agent_allowed": false,
                                "is_two_step_skill_enabled": false,
                                "ixn_state_count": 0,
                                "lob_id": -1,
                                "longest_waiting_call": 0,
                                "longest_waiting_call_id": -1,
                                "mm_flag": false,
                                "monitoring_type": 1,
                                "most_idle_agent": -1,
                                "music_on_hold": "",
                                "name": "care1",
                                "num_of_calls_in_queue": 0,
                                "occupancy_thr": null,
                                "off_pairing_algo": -1,
                                "reserve_skill_agents_count": 0,
                                "reserve_skill_state": 0,
                                "rona_ip_failure_to_vdn": "",
                                "rona_ip_failure_to_vdn_context_flag": false,
                                "rona_rings": -1,
                                "rona_to_vdn": "",
                                "rona_to_vdn_active_context_flag": false,
                                "routed_calls_count": 0,
                                "staffed_agents_count": 0,
                                "tenant": "default_tenant",
                                "timed_acw_interval": -1,
                                "unnormalized_express": "",
                                "usable_agents_count": 0,
                                "vht_callback_count": -1,
                                "vht_ewt": -1,
                                "vht_sys_callback_count": 0
                              }
                            ]
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "/v2/agent_groups/[agent_group_id]/logged_in_agents": {
            "get": {
              "tags": [
                "Agent Group"
              ],
              "description": "This endpoint fetches Logged in agent IDs for an agent_group_id using the GET method.",
              "parameters": [
                {
                  "name": "select",
                  "in": "query",
                  "required": true,
                  "description": "Comma seperated field names ( strings ) to return",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "limit",
                  "in": "query",
                  "required": true,
                  "schema": {
                    "type": "integer",
                    "example": 100
                  }
                },
                {
                  "name": "offset",
                  "in": "query",
                  "required": true,
                  "schema": {
                    "type": "string",
                    "example": 0
                  }
                },
                {
                  "name": "tenant",
                  "in": "query",
                  "required": true,
                  "schema": {
                    "type": "integer",
                    "example": -1
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "success",
                  "content": {
                    "application/json": {
                      "examples": {
                        "Sample Response 1": {
                          "value": {
                            "agents": [
                              {
                                "acd_id": 0,
                                "agent_id": 1,
                                "agent_name": "",
                                "agent_state": 1,
                                "last_state_time": 1618234088,
                                "on_ixn_id": -1
                              }
                            ]
                          }
                        },
                        "Sample Response 2": {
                          "value": {
                            "agents": [
                              {
                                "acd_agent_id": "",
                                "acd_controlled_flag": false,
                                "acd_id": 0,
                                "agent_abandon_count": 0,
                                "agent_groups": [
                                  {
                                    "aawt": -1,
                                    "awt": -1,
                                    "eligibility_flag": 0,
                                    "id": 1,
                                    "level": 1
                                  }
                                ],
                                "agent_id": 1,
                                "agent_id_long": 1,
                                "agent_name": "",
                                "agent_password": "",
                                "agent_sip_reg_ip": "",
                                "agent_state": 1,
                                "agent_state_text": "",
                                "auto_answer": -1,
                                "aux_work_reason_code": -1,
                                "batched_flag": 0,
                                "capacity_profile_id": "",
                                "channel_type": 0,
                                "chat_idleness": 0,
                                "consecutive_agent_available_count": -1,
                                "created_time": 1618234088,
                                "idle_since": "Thu Jan  1 04:43:22 1970",
                                "is_agent_profile_set": true,
                                "is_ani_available": false,
                                "is_post_reserved": false,
                                "last_state_time": 1618234088,
                                "lob_id": -1,
                                "logout_reason_code": -1,
                                "max_abandon_flag": false,
                                "mobile_num": "",
                                "on_ixn_chan_enabled": false,
                                "on_ixn_chan_routable": true,
                                "on_ixn_count": 0,
                                "on_ixn_id": -1,
                                "on_ixn_list": [],
                                "out_of_service_reason": 0,
                                "pending_state": -1,
                                "post_reservable_time": 2147483647,
                                "skills": null,
                                "station_id": -1,
                                "telephony_mode": 0,
                                "tenant": "default_tenant",
                                "tenant_id": 0,
                                "wait_threshold": -1,
                                "wait_threshold_tm": -1000,
                                "work_mode_on_login": -1
                              },
                              "..."
                            ]
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "/agents/ag/[agent_group_id]": {
            "get": {
              "tags": [
                "Agent Group"
              ],
              "description": "This endpoint fetches the number of free agents belonging to agent_group_id using the GET method.",
              "parameters": [
                {
                  "name": "agent_group_id",
                  "in": "query",
                  "required": true,
                  "schema": {
                    "type": "integer"
                  }
                },
                {
                  "name": "free_agents_count",
                  "in": "query",
                  "required": true,
                  "schema": {
                    "type": "integer"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "success"
                }
              }
            }
          },
          "/agents/free/ag/[agent_group_id]": {
            "get": {
              "tags": [
                "Agent Group"
              ],
              "description": "This endpoint fetches free agent object list belonging to agent_group_id using the GET method.",
              "responses": {
                "200": {
                  "description": "success"
                }
              }
            }
          },
          "/agent-groups/list/agent/{agent_id}": {
            "get": {
              "tags": [
                "Agent Group"
              ],
              "description": "This endpoint fetches a list of agent group IDs for the given agent_id using the GET method.",
              "parameters": [
                {
                  "name": "agent_id",
                  "in": "path",
                  "required": true,
                  "schema": {
                    "type": "integer"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "success"
                }
              }
            }
          },
          "/agent-groups/list/ixn/{ixn_id}": {
            "get": {
              "tags": [
                "Agent Group"
              ],
              "description": "This endpoint fetches a list of agent group IDs for the given ixn_id using the GET method.",
              "parameters": [
                {
                  "name": "ixn_id",
                  "in": "path",
                  "required": true,
                  "schema": {
                    "type": "integer"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "success"
                }
              }
            }
          },
          "/v1/agent_groups/id_from_expression/{expression}": {
            "get": {
              "tags": [
                "Agent Group"
              ],
              "description": "This endpoint returns numerical ID against the given expression using the GET method.",
              "parameters": [
                {
                  "name": "expression",
                  "in": "path",
                  "required": true,
                  "schema": {
                    "type": "integer",
                    "example": null
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "success"
                }
              }
            }
          },
          "/calls/routable/{callQ_id}": {
            "get": {
              "tags": [
                "Call Queue"
              ],
              "description": "This endpoint gets a the number of routable calls on callQ_id using the GET method.",
              "parameters": [
                {
                  "name": "callQ_id",
                  "in": "path",
                  "required": true,
                  "schema": {
                    "type": "integer",
                    "example": null
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "success"
                }
              }
            }
          },
          "/calls/routable/cq/{cal_que_id}": {
            "get": {
              "tags": [
                "Call Queue"
              ],
              "description": "This endpoint gets routable ixn objects on call_que_id using the GET method.",
              "parameters": [
                {
                  "name": "cal_que_id",
                  "in": "path",
                  "required": true,
                  "schema": {
                    "type": "integer",
                    "example": null
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "success"
                }
              }
            }
          },
          "/calls/cq/{cal_que_id}": {
            "get": {
              "tags": [
                "Call Queue"
              ],
              "description": "This endpoint gets ixn objects on call_que_id using the GET method.",
              "parameters": [
                {
                  "name": "cal_que_id",
                  "in": "path",
                  "required": true,
                  "schema": {
                    "type": "integer",
                    "example": null
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "success"
                }
              }
            }
          },
          "/calls/lookup/ct/{ct_id}": {
            "get": {
              "tags": [
                "Call Type"
              ],
              "description": "This endpoint fetches call type details using the GET method.",
              "parameters": [
                {
                  "name": "ct_id",
                  "in": "path",
                  "required": true,
                  "schema": {
                    "type": "integer",
                    "example": null
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "success"
                }
              }
            }
          },
          "/calls/routable/ct/{call_type_id}": {
            "get": {
              "tags": [
                "Call Type"
              ],
              "description": "This endpoint gets routable ixn objects on call_type_id using the GET method.",
              "parameters": [
                {
                  "name": "call_type_id",
                  "in": "path",
                  "required": true,
                  "schema": {
                    "type": "integer",
                    "example": null
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "success"
                }
              }
            }
          },
          "/v1/vdn/{id}": {
            "get": {
              "tags": [
                "VDN"
              ],
              "description": "This endpoint fetches the Lookup VDN/DN stats using the GET method.",
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "required": true,
                  "schema": {
                    "type": "integer",
                    "example": null
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "success"
                }
              }
            }
          },
          "/v1/vdns": {
            "get": {
              "tags": [
                "VDN"
              ],
              "description": "This endpoint fetches a list of VDNs and DNs stats using the GET method.",
              "parameters": [
                {
                  "name": "select",
                  "in": "query",
                  "description": "<b>select</b> a query parameter and \"display_name\",\"channel_type\",\"tenant\" and \"value\" are the values to this query parameter.",
                  "required": true,
                  "schema": {
                    "type": "integer",
                    "example": null
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "success",
                  "content": {
                    "application/json": {
                      "examples": {
                        "Sample Response for http://172.27.208.100:9080/v1/dns": {
                          "value": "{\n   \"vdns\": [\n            {\n                \"bm_cycle\": -1,\n                \"display_name\": \"\",\n                \"iln\": -1,\n                \"is_override_allowed\": false,\n                \"lob_id\": -1,\n                \"music_extension\": \"\",\n                \"name\": \"\",\n                \"next_bm_cycle_tm\": -1,\n                \"observe_on_agent_answer_flag\": false,\n                \"permission_set_id\": \"\",\n                \"routable_call_count\": 0,\n                \"tenant\": 0,\n                \"value\": 3,\n                \"vector_id\": -1,\n                \"voa_extension\": \"\"\n              },\n              {\n                  \"bm_cycle\": -1,\n                  \"channel_type\": 0,\n                  \"display_name\": \"\",\n                  \"iln\": -1,\n                  \"is_override_allowed\": false,\n                  \"lob_id\": -1,\n                  \"music_extension\": \"\",\n                  \"name\": \"\",\n                  \"next_bm_cycle_tm\": -1,\n                  \"observe_on_agent_answer_flag\": false,\n                  \"permission_set_id\": \"\",\n                  \"routable_call_count\": 0,\n                  \"tenant\": 0,\n                  \"value\": 1,\n                  \"vector_id\": -1,\n                  \"voa_extension\": \"\"\n              }\n              ]\n              }\n              \n              \n  "
                        },
                        "Sample Response for http://172.27.208.100:9080/v1/dns?select=name,display_name,channel_type,tenant,value": {
                          "value": "{\n    \"vdns\": [\n        {\n            \"channel_type\": 0,\n            \"display_name\": \"\",\n            \"name\": \"\",\n            \"tenant\": 0,\n            \"value\": 1\n        },\n        {\n            \"channel_type\": 0,\n            \"display_name\": \"\",\n            \"name\": \"\",\n            \"tenant\": 0,\n            \"value\": 2\n        }\n    ]\n}"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "/vdn_history/{ixn_id}": {
            "put": {
              "tags": [
                "VDN"
              ],
              "description": "This endpoint adds vdn history. Takes vdn(int) , timestamp(int) & vdn_history_type(int) as json body parameters.",
              "parameters": [
                {
                  "name": "ixn_id",
                  "in": "path",
                  "required": true,
                  "schema": {
                    "type": "integer",
                    "example": null
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "success"
                }
              }
            }
          },
          "/messageQueue/{queue_name}/receiveMessage": {
            "get": {
              "tags": [
                "SMQ"
              ],
              "description": "This endpoint receives a message from queue_name, where messageType and data count are query parameters using the GET method.",
              "parameters": [
                {
                  "name": "queue_name",
                  "in": "path",
                  "required": true,
                  "schema": {
                    "type": "integer",
                    "example": null
                  }
                },
                {
                  "name": "messageType",
                  "in": "query",
                  "required": true,
                  "schema": {
                    "type": "integer",
                    "example": null
                  }
                },
                {
                  "name": "dataCount",
                  "in": "query",
                  "required": true,
                  "schema": {
                    "type": "integer",
                    "example": null
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "success"
                }
              }
            }
          },
          "/messageQueue/{queue_name}/receiveAgent": {
            "get": {
              "tags": [
                "SMQ"
              ],
              "description": "This endpoint receives a message from queue_name with msgtype agent using the GET method.",
              "parameters": [
                {
                  "name": "queue_name",
                  "in": "path",
                  "required": true,
                  "schema": {
                    "type": "integer",
                    "example": null
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "success"
                }
              }
            }
          },
          "/messageQueue/{queue_name}/receivePair": {
            "get": {
              "tags": [
                "SMQ"
              ],
              "description": "This endpoint receives a message from queue_name with msgtype pair using the GET method.",
              "parameters": [
                {
                  "name": "queue_name",
                  "in": "path",
                  "required": true,
                  "schema": {
                    "type": "integer",
                    "example": null
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "success"
                }
              }
            }
          },
          "/getProcessID/{process_name}": {
            "get": {
              "tags": [
                "OS"
              ],
              "description": "This endpoint returns the PID of process_name using the GET method.",
              "parameters": [
                {
                  "name": "process_name",
                  "in": "path",
                  "required": true,
                  "schema": {
                    "type": "integer",
                    "example": null
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "success"
                }
              }
            }
          },
          "/getProcessCPU/{process_id}": {
            "get": {
              "tags": [
                "OS"
              ],
              "description": "This endpoint returns CPU utilization of process_id using the GET method.",
              "parameters": [
                {
                  "name": "process_id",
                  "in": "path",
                  "required": true,
                  "schema": {
                    "type": "integer",
                    "example": null
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "success"
                }
              }
            }
          },
          "/getProcessRAM/{process_id}": {
            "get": {
              "tags": [
                "OS"
              ],
              "description": "This endpoint returns RAM utilization of process_id using the GET method.",
              "parameters": [
                {
                  "name": "process_id",
                  "in": "path",
                  "required": true,
                  "schema": {
                    "type": "integer",
                    "example": null
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "success"
                }
              }
            }
          },
          "/getRAMbyProcessName/{process_name}": {
            "get": {
              "tags": [
                "OS"
              ],
              "description": "This endpoint returns RAM utilization of process_name using the GET method.",
              "parameters": [
                {
                  "name": "process_name",
                  "in": "path",
                  "required": true,
                  "schema": {
                    "type": "integer",
                    "example": null
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "success"
                }
              }
            }
          },
          "/getProcessCPU/{process_name}": {
            "get": {
              "tags": [
                "OS"
              ],
              "description": "This endpoint returns CPU utilization of process_name using the GET method.",
              "parameters": [
                {
                  "name": "process_name",
                  "in": "path",
                  "required": true,
                  "schema": {
                    "type": "integer",
                    "example": null
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "success"
                }
              }
            }
          },
          "/v1/amazon_reporting/queues": {
            "get": {
              "tags": [
                "Amazon Connect"
              ],
              "description": "This endpoint fetches real-time queue stats from the amazon connect library using the GET method. ",
              "parameters": [
                {
                  "name": "time_window",
                  "in": "query",
                  "required": false,
                  "description": "This paramter represents the time duration enum. enum class AwsTimeWindow { HALF_HOUR = 0, ONE_HOUR = 1, TWO_HOUR = 2, FOUR_HOUR = 4, EIGHT_HOUR = 8, TWELVE_HOUR = 12, TWENTYFOUR_HOUR = 24 }",
                  "schema": {
                    "type": "integer",
                    "example": 1
                  }
                },
                {
                  "name": "queues",
                  "in": "query",
                  "required": false,
                  "description": "This parameter represents comma seperated queue names.",
                  "schema": {
                    "type": "integer",
                    "example": null
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "success",
                  "content": {
                    "application/json": {
                      "examples": {
                        "Response": {
                          "value": "[\n    {\n        \"Channels\": {\n            \"Chat\": {\n                \"ACW\": 0.0,\n                \"AHT\": 0.0,\n                \"API contacts handled\": 0.0,\n                \"Abandoned\": 0.0,\n                \"Active\": 0.0,\n                \"After contact work time\": 0.0,\n                \"Agent hung up\": 0.0,\n                \"Agents non-response\": 0.0,\n                \"Availability\": 0.0,\n                \"Available\": 2.0,\n                \"Avg API connecting time\": 0.0,\n                \"Avg abandon time\": 0.0,\n                \"Avg callback connecting time\": 0.0,\n                \"Avg hold time\": 0.0,\n                \"Avg incoming connecting time\": 0.0,\n                \"Avg interaction and hold time\": 0.0,\n                \"Avg interaction time\": 0.0,\n                \"Avg outbound connecting time\": 0.0,\n                \"Avg queue answer time\": 0.0,\n                \"Callback contacts handled\": 0.0,\n                \"Contacts consulted\": 0.0,\n                \"Error\": 0.0,\n                \"Handled\": 0.0,\n                \"Handled in\": 0.0,\n                \"Handled out\": 0.0,\n                \"Hold abandons\": 0.0,\n                \"In queue\": 0.0,\n                \"Max Queued\": 0.0,\n                \"NPT\": 0.0,\n                \"Occupancy\": 0.0,\n                \"Oldest\": 0.0,\n                \"On contact\": 0.0,\n                \"Online\": 2.0,\n                \"Queued\": 0.0,\n                \"SL 120 secs\": 0.0,\n                \"SL 15 secs\": 0.0,\n                \"SL 180 secs\": 0.0,\n                \"SL 20 secs\": 0.0,\n                \"SL 240 secs\": 0.0,\n                \"SL 25 secs\": 0.0,\n                \"SL 30 secs\": 0.0,\n                \"SL 300 secs\": 0.0,\n                \"SL 45 secs\": 0.0,\n                \"SL 60 secs\": 0.0,\n                \"SL 600 secs\": 0.0,\n                \"SL 90 secs\": 0.0,\n                \"Scheduled\": 0.0,\n                \"Staffed\": 2.0,\n                \"Tranfered in\": 0.0,\n                \"Tranfered in from Queue\": 0.0,\n                \"Tranfered out\": 0.0,\n                \"Tranfered out from Queue\": 0.0\n            },\n            \"Task\": {\n                \"ACW\": 0.0,\n                \"AHT\": 0.0,\n                \"API contacts handled\": 0.0,\n                \"Abandoned\": 0.0,\n                \"Active\": 0.0,\n                \"After contact work time\": 0.0,\n                \"Agent hung up\": 0.0,\n                \"Agents non-response\": 0.0,\n                \"Availability\": 0.0,\n                \"Available\": 0.0,\n                \"Avg API connecting time\": 0.0,\n                \"Avg abandon time\": 0.0,\n                \"Avg callback connecting time\": 0.0,\n                \"Avg hold time\": 0.0,\n                \"Avg incoming connecting time\": 0.0,\n                \"Avg interaction and hold time\": 0.0,\n                \"Avg interaction time\": 0.0,\n                \"Avg outbound connecting time\": 0.0,\n                \"Avg queue answer time\": 0.0,\n                \"Callback contacts handled\": 0.0,\n                \"Contacts consulted\": 0.0,\n                \"Error\": 0.0,\n                \"Handled\": 0.0,\n                \"Handled in\": 0.0,\n                \"Handled out\": 0.0,\n                \"Hold abandons\": 0.0,\n                \"In queue\": 0.0,\n                \"Max Queued\": 0.0,\n                \"NPT\": 0.0,\n                \"Occupancy\": 0.0,\n                \"Oldest\": 0.0,\n                \"On contact\": 0.0,\n                \"Online\": 0.0,\n                \"Queued\": 0.0,\n                \"SL 120 secs\": 0.0,\n                \"SL 15 secs\": 0.0,\n                \"SL 180 secs\": 0.0,\n                \"SL 20 secs\": 0.0,\n                \"SL 240 secs\": 0.0,\n                \"SL 25 secs\": 0.0,\n                \"SL 30 secs\": 0.0,\n                \"SL 300 secs\": 0.0,\n                \"SL 45 secs\": 0.0,\n                \"SL 60 secs\": 0.0,\n                \"SL 600 secs\": 0.0,\n                \"SL 90 secs\": 0.0,\n                \"Scheduled\": 0.0,\n                \"Staffed\": 0.0,\n                \"Tranfered in\": 0.0,\n                \"Tranfered in from Queue\": 0.0,\n                \"Tranfered out\": 0.0,\n                \"Tranfered out from Queue\": 0.0\n            },\n            \"Voice\": {\n                \"ACW\": 0.0,\n                \"AHT\": 0.0,\n                \"API contacts handled\": 0.0,\n                \"Abandoned\": 0.0,\n                \"Active\": 0.0,\n                \"After contact work time\": 0.0,\n                \"Agent hung up\": 0.0,\n                \"Agents non-response\": 0.0,\n                \"Availability\": 2.0,\n                \"Available\": 2.0,\n                \"Avg API connecting time\": 0.0,\n                \"Avg abandon time\": 0.0,\n                \"Avg callback connecting time\": 0.0,\n                \"Avg hold time\": 0.0,\n                \"Avg incoming connecting time\": 0.0,\n                \"Avg interaction and hold time\": 0.0,\n                \"Avg interaction time\": 0.0,\n                \"Avg outbound connecting time\": 0.0,\n                \"Avg queue answer time\": 0.0,\n                \"Callback contacts handled\": 0.0,\n                \"Contacts consulted\": 0.0,\n                \"Error\": 0.0,\n                \"Handled\": 0.0,\n                \"Handled in\": 0.0,\n                \"Handled out\": 0.0,\n                \"Hold abandons\": 0.0,\n                \"In queue\": 0.0,\n                \"Max Queued\": 0.0,\n                \"NPT\": 0.0,\n                \"Occupancy\": 0.0,\n                \"Oldest\": 0.0,\n                \"On contact\": 0.0,\n                \"Online\": 2.0,\n                \"Queued\": 0.0,\n                \"SL 120 secs\": 0.0,\n                \"SL 15 secs\": 0.0,\n                \"SL 180 secs\": 0.0,\n                \"SL 20 secs\": 0.0,\n                \"SL 240 secs\": 0.0,\n                \"SL 25 secs\": 0.0,\n                \"SL 30 secs\": 0.0,\n                \"SL 300 secs\": 0.0,\n                \"SL 45 secs\": 0.0,\n                \"SL 60 secs\": 0.0,\n                \"SL 600 secs\": 0.0,\n                \"SL 90 secs\": 0.0,\n                \"Scheduled\": 0.0,\n                \"Staffed\": 2.0,\n                \"Tranfered in\": 0.0,\n                \"Tranfered in from Queue\": 0.0,\n                \"Tranfered out\": 0.0,\n                \"Tranfered out from Queue\": 0.0\n            }\n        },\n        \"Queue Name\": \"test queue 2\"\n    },\n    {\n        \"Channels\": {\n            \"Chat\": {\n                \"ACW\": 0.0,\n                \"AHT\": 0.0,\n                \"API contacts handled\": 0.0,\n                \"Abandoned\": 0.0,\n                \"Active\": 0.0,\n                \"After contact work time\": 0.0,\n                \"Agent hung up\": 0.0,\n                \"Agents non-response\": 0.0,\n                \"Availability\": 2.0,\n                \"Available\": 2.0,\n                \"Avg API connecting time\": 0.0,\n                \"Avg abandon time\": 0.0,\n                \"Avg callback connecting time\": 0.0,\n                \"Avg hold time\": 0.0,\n                \"Avg incoming connecting time\": 0.0,\n                \"Avg interaction and hold time\": 0.0,\n                \"Avg interaction time\": 0.0,\n                \"Avg outbound connecting time\": 0.0,\n                \"Avg queue answer time\": 0.0,\n                \"Callback contacts handled\": 0.0,\n                \"Contacts consulted\": 0.0,\n                \"Error\": 0.0,\n                \"Handled\": 0.0,\n                \"Handled in\": 0.0,\n                \"Handled out\": 0.0,\n                \"Hold abandons\": 0.0,\n                \"In queue\": 0.0,\n                \"Max Queued\": 0.0,\n                \"NPT\": 0.0,\n                \"Occupancy\": 0.0,\n                \"Oldest\": 0.0,\n                \"On contact\": 0.0,\n                \"Online\": 2.0,\n                \"Queued\": 0.0,\n                \"SL 120 secs\": 0.0,\n                \"SL 15 secs\": 0.0,\n                \"SL 180 secs\": 0.0,\n                \"SL 20 secs\": 0.0,\n                \"SL 240 secs\": 0.0,\n                \"SL 25 secs\": 0.0,\n                \"SL 30 secs\": 0.0,\n                \"SL 300 secs\": 0.0,\n                \"SL 45 secs\": 0.0,\n                \"SL 60 secs\": 0.0,\n                \"SL 600 secs\": 0.0,\n                \"SL 90 secs\": 0.0,\n                \"Scheduled\": 0.0,\n                \"Staffed\": 2.0,\n                \"Tranfered in\": 0.0,\n                \"Tranfered in from Queue\": 0.0,\n                \"Tranfered out\": 0.0,\n                \"Tranfered out from Queue\": 0.0\n            },\n            \"Task\": {\n                \"ACW\": 0.0,\n                \"AHT\": 0.0,\n                \"API contacts handled\": 0.0,\n                \"Abandoned\": 0.0,\n                \"Active\": 0.0,\n                \"After contact work time\": 0.0,\n                \"Agent hung up\": 0.0,\n                \"Agents non-response\": 0.0,\n                \"Availability\": 0.0,\n                \"Available\": 0.0,\n                \"Avg API connecting time\": 0.0,\n                \"Avg abandon time\": 0.0,\n                \"Avg callback connecting time\": 0.0,\n                \"Avg hold time\": 0.0,\n                \"Avg incoming connecting time\": 0.0,\n                \"Avg interaction and hold time\": 0.0,\n                \"Avg interaction time\": 0.0,\n                \"Avg outbound connecting time\": 0.0,\n                \"Avg queue answer time\": 0.0,\n                \"Callback contacts handled\": 0.0,\n                \"Contacts consulted\": 0.0,\n                \"Error\": 0.0,\n                \"Handled\": 0.0,\n                \"Handled in\": 0.0,\n                \"Handled out\": 0.0,\n                \"Hold abandons\": 0.0,\n                \"In queue\": 0.0,\n                \"Max Queued\": 0.0,\n                \"NPT\": 0.0,\n                \"Occupancy\": 0.0,\n                \"Oldest\": 0.0,\n                \"On contact\": 0.0,\n                \"Online\": 0.0,\n                \"Queued\": 0.0,\n                \"SL 120 secs\": 0.0,\n                \"SL 15 secs\": 0.0,\n                \"SL 180 secs\": 0.0,\n                \"SL 20 secs\": 0.0,\n                \"SL 240 secs\": 0.0,\n                \"SL 25 secs\": 0.0,\n                \"SL 30 secs\": 0.0,\n                \"SL 300 secs\": 0.0,\n                \"SL 45 secs\": 0.0,\n                \"SL 60 secs\": 0.0,\n                \"SL 600 secs\": 0.0,\n                \"SL 90 secs\": 0.0,\n                \"Scheduled\": 0.0,\n                \"Staffed\": 0.0,\n                \"Tranfered in\": 0.0,\n                \"Tranfered in from Queue\": 0.0,\n                \"Tranfered out\": 0.0,\n                \"Tranfered out from Queue\": 0.0\n            },\n            \"Voice\": {\n                \"ACW\": 0.0,\n                \"AHT\": 0.0,\n                \"API contacts handled\": 0.0,\n                \"Abandoned\": 0.0,\n                \"Active\": 0.0,\n                \"After contact work time\": 0.0,\n                \"Agent hung up\": 0.0,\n                \"Agents non-response\": 0.0,\n                \"Availability\": 2.0,\n                \"Available\": 2.0,\n                \"Avg API connecting time\": 0.0,\n                \"Avg abandon time\": 0.0,\n                \"Avg callback connecting time\": 0.0,\n                \"Avg hold time\": 0.0,\n                \"Avg incoming connecting time\": 0.0,\n                \"Avg interaction and hold time\": 0.0,\n                \"Avg interaction time\": 0.0,\n                \"Avg outbound connecting time\": 0.0,\n                \"Avg queue answer time\": 0.0,\n                \"Callback contacts handled\": 0.0,\n                \"Contacts consulted\": 0.0,\n                \"Error\": 0.0,\n                \"Handled\": 0.0,\n                \"Handled in\": 0.0,\n                \"Handled out\": 0.0,\n                \"Hold abandons\": 0.0,\n                \"In queue\": 0.0,\n                \"Max Queued\": 0.0,\n                \"NPT\": 0.0,\n                \"Occupancy\": 0.0,\n                \"Oldest\": 0.0,\n                \"On contact\": 0.0,\n                \"Online\": 2.0,\n                \"Queued\": 0.0,\n                \"SL 120 secs\": 0.0,\n                \"SL 15 secs\": 0.0,\n                \"SL 180 secs\": 0.0,\n                \"SL 20 secs\": 0.0,\n                \"SL 240 secs\": 0.0,\n                \"SL 25 secs\": 0.0,\n                \"SL 30 secs\": 0.0,\n                \"SL 300 secs\": 0.0,\n                \"SL 45 secs\": 0.0,\n                \"SL 60 secs\": 0.0,\n                \"SL 600 secs\": 0.0,\n                \"SL 90 secs\": 0.0,\n                \"Scheduled\": 0.0,\n                \"Staffed\": 2.0,\n                \"Tranfered in\": 0.0,\n                \"Tranfered in from Queue\": 0.0,\n                \"Tranfered out\": 0.0,\n                \"Tranfered out from Queue\": 0.0\n            }\n        },\n        \"Queue Name\": \"test queue 1\"\n    }\n]\n"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "/v1/amazon_reporting/routing_profiles": {
            "get": {
              "tags": [
                "Amazon Connect"
              ],
              "description": "This endpoint fetches real time routing profile stats from amazon connect library using the GET method.",
              "parameters": [
                {
                  "name": "time_window",
                  "in": "query",
                  "required": false,
                  "description": "This paramter represents the time duration enum. enum class AwsTimeWindow { HALF_HOUR = 0, ONE_HOUR = 1, TWO_HOUR = 2, FOUR_HOUR = 4, EIGHT_HOUR = 8, TWELVE_HOUR = 12, TWENTYFOUR_HOUR = 24 }",
                  "schema": {
                    "type": "integer",
                    "example": 1
                  }
                },
                {
                  "name": "queues",
                  "in": "query",
                  "required": false,
                  "description": "This parameter represents comma seperated queue names.",
                  "schema": {
                    "type": "integer",
                    "example": null
                  }
                },
                {
                  "name": "routing_profiles",
                  "in": "query",
                  "required": true,
                  "description": "This parameter represents comma seperated routing profiles.",
                  "schema": {
                    "type": "integer",
                    "example": null
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "success",
                  "content": {
                    "application/json": {
                      "examples": {
                        "Response": {
                          "value": "[\n    {\n        \"Channels\": {\n            \"Chat\": {\n                \"ACW\": 0.0,\n                \"AHT\": 0.0,\n                \"API contacts handled\": 0.0,\n                \"Abandoned\": 0.0,\n                \"Active\": 0.0,\n                \"After contact work time\": 0.0,\n                \"Agent hung up\": 0.0,\n                \"Agents non-response\": 0.0,\n                \"Availability\": 3.0,\n                \"Available\": 3.0,\n                \"Avg API connecting time\": 0.0,\n                \"Avg abandon time\": 0.0,\n                \"Avg callback connecting time\": 0.0,\n                \"Avg hold time\": 0.0,\n                \"Avg incoming connecting time\": 0.0,\n                \"Avg interaction and hold time\": 0.0,\n                \"Avg interaction time\": 0.0,\n                \"Avg outbound connecting time\": 0.0,\n                \"Avg queue answer time\": 0.0,\n                \"Callback contacts handled\": 0.0,\n                \"Contacts consulted\": 0.0,\n                \"Error\": 0.0,\n                \"Handled\": 0.0,\n                \"Handled in\": 0.0,\n                \"Handled out\": 0.0,\n                \"Hold abandons\": 0.0,\n                \"In queue\": 0.0,\n                \"Max Queued\": 0.0,\n                \"NPT\": 0.0,\n                \"Occupancy\": 0.0,\n                \"Oldest\": 0.0,\n                \"On contact\": 0.0,\n                \"Online\": 3.0,\n                \"Queued\": 0.0,\n                \"SL 120 secs\": 0.0,\n                \"SL 15 secs\": 0.0,\n                \"SL 180 secs\": 0.0,\n                \"SL 20 secs\": 0.0,\n                \"SL 240 secs\": 0.0,\n                \"SL 25 secs\": 0.0,\n                \"SL 30 secs\": 0.0,\n                \"SL 300 secs\": 0.0,\n                \"SL 45 secs\": 0.0,\n                \"SL 60 secs\": 0.0,\n                \"SL 600 secs\": 0.0,\n                \"SL 90 secs\": 0.0,\n                \"Scheduled\": 0.0,\n                \"Staffed\": 3.0,\n                \"Tranfered in\": 0.0,\n                \"Tranfered in from Queue\": 0.0,\n                \"Tranfered out\": 0.0,\n                \"Tranfered out from Queue\": 0.0\n            },\n            \"Task\": {\n                \"ACW\": 0.0,\n                \"AHT\": 0.0,\n                \"API contacts handled\": 0.0,\n                \"Abandoned\": 0.0,\n                \"Active\": 0.0,\n                \"After contact work time\": 0.0,\n                \"Agent hung up\": 0.0,\n                \"Agents non-response\": 0.0,\n                \"Availability\": 0.0,\n                \"Available\": 0.0,\n                \"Avg API connecting time\": 0.0,\n                \"Avg abandon time\": 0.0,\n                \"Avg callback connecting time\": 0.0,\n                \"Avg hold time\": 0.0,\n                \"Avg incoming connecting time\": 0.0,\n                \"Avg interaction and hold time\": 0.0,\n                \"Avg interaction time\": 0.0,\n                \"Avg outbound connecting time\": 0.0,\n                \"Avg queue answer time\": 0.0,\n                \"Callback contacts handled\": 0.0,\n                \"Contacts consulted\": 0.0,\n                \"Error\": 0.0,\n                \"Handled\": 0.0,\n                \"Handled in\": 0.0,\n                \"Handled out\": 0.0,\n                \"Hold abandons\": 0.0,\n                \"In queue\": 0.0,\n                \"Max Queued\": 0.0,\n                \"NPT\": 0.0,\n                \"Occupancy\": 0.0,\n                \"Oldest\": 0.0,\n                \"On contact\": 0.0,\n                \"Online\": 0.0,\n                \"Queued\": 0.0,\n                \"SL 120 secs\": 0.0,\n                \"SL 15 secs\": 0.0,\n                \"SL 180 secs\": 0.0,\n                \"SL 20 secs\": 0.0,\n                \"SL 240 secs\": 0.0,\n                \"SL 25 secs\": 0.0,\n                \"SL 30 secs\": 0.0,\n                \"SL 300 secs\": 0.0,\n                \"SL 45 secs\": 0.0,\n                \"SL 60 secs\": 0.0,\n                \"SL 600 secs\": 0.0,\n                \"SL 90 secs\": 0.0,\n                \"Scheduled\": 0.0,\n                \"Staffed\": 0.0,\n                \"Tranfered in\": 0.0,\n                \"Tranfered in from Queue\": 0.0,\n                \"Tranfered out\": 0.0,\n                \"Tranfered out from Queue\": 0.0\n            },\n            \"Voice\": {\n                \"ACW\": 0.0,\n                \"AHT\": 0.0,\n                \"API contacts handled\": 0.0,\n                \"Abandoned\": 0.0,\n                \"Active\": 0.0,\n                \"After contact work time\": 0.0,\n                \"Agent hung up\": 0.0,\n                \"Agents non-response\": 0.0,\n                \"Availability\": 3.0,\n                \"Available\": 3.0,\n                \"Avg API connecting time\": 0.0,\n                \"Avg abandon time\": 0.0,\n                \"Avg callback connecting time\": 0.0,\n                \"Avg hold time\": 0.0,\n                \"Avg incoming connecting time\": 0.0,\n                \"Avg interaction and hold time\": 0.0,\n                \"Avg interaction time\": 0.0,\n                \"Avg outbound connecting time\": 0.0,\n                \"Avg queue answer time\": 0.0,\n                \"Callback contacts handled\": 0.0,\n                \"Contacts consulted\": 0.0,\n                \"Error\": 0.0,\n                \"Handled\": 0.0,\n                \"Handled in\": 0.0,\n                \"Handled out\": 0.0,\n                \"Hold abandons\": 0.0,\n                \"In queue\": 0.0,\n                \"Max Queued\": 0.0,\n                \"NPT\": 0.0,\n                \"Occupancy\": 0.0,\n                \"Oldest\": 0.0,\n                \"On contact\": 0.0,\n                \"Online\": 3.0,\n                \"Queued\": 0.0,\n                \"SL 120 secs\": 0.0,\n                \"SL 15 secs\": 0.0,\n                \"SL 180 secs\": 0.0,\n                \"SL 20 secs\": 0.0,\n                \"SL 240 secs\": 0.0,\n                \"SL 25 secs\": 0.0,\n                \"SL 30 secs\": 0.0,\n                \"SL 300 secs\": 0.0,\n                \"SL 45 secs\": 0.0,\n                \"SL 60 secs\": 0.0,\n                \"SL 600 secs\": 0.0,\n                \"SL 90 secs\": 0.0,\n                \"Scheduled\": 0.0,\n                \"Staffed\": 3.0,\n                \"Tranfered in\": 0.0,\n                \"Tranfered in from Queue\": 0.0,\n                \"Tranfered out\": 0.0,\n                \"Tranfered out from Queue\": 0.0\n            }\n        },\n        \"ROUTING PROFILE\": \"RP1\"\n    }\n]"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "/v1/agent_groups/{agent_group_id}/num_of_logged_in_agents": {
            "get": {
              "tags": [
                "Agent Group"
              ],
              "description": "This endpoint fetches Logged in agent ids for an agent_group_id using the GET method.",
              "parameters": [
                {
                  "name": "tenant",
                  "in": "query",
                  "required": true,
                  "schema": {
                    "type": "integer",
                    "example": -1
                  }
                },
                {
                  "name": "agent_group_id",
                  "in": "path",
                  "required": true,
                  "schema": {
                    "type": "integer",
                    "example": null
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "success",
                  "content": {
                    "application/json": {
                      "examples": {
                        "Sample Response": {
                          "value": "{\n    \"num_loggedin_agents\": 1\n}"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "/v1/agent_groups/[agent_group_id]/logged_in_agents": {
            "get": {
              "tags": [
                "Deprecated Endpoints"
              ],
              "description": "This endpoint fetches Logged in agent IDs for an agent_group_id using GET method.",
              "responses": {
                "200": {
                  "description": "success"
                }
              }
            }
          },
          "/stations": {
            "get": {
              "tags": [
                "Deprecated Endpoints"
              ],
              "description": "This endpoint fetches all stations for the given station ID using the GET method.",
              "responses": {
                "200": {
                  "description": "success"
                }
              }
            },
            "put": {
              "tags": [
                "Deprecated Endpoints"
              ],
              "description": "This endpoint updates staion state using the PUT method.",
              "responses": {
                "200": {
                  "description": "success"
                }
              }
            }
          },
          "/agents/lookup/[agent_id]": {
            "get": {
              "tags": [
                "Deprecated Endpoints"
              ],
              "description": "This endpoint fetches agent object for the given agent_id using GET method.",
              "responses": {
                "200": {
                  "description": "success"
                }
              }
            }
          },
          "/ixn/error-calls": {
            "get": {
              "tags": [
                "Deprecated Endpoints"
              ],
              "description": "This endpoint fetches IXN objects from SMQ using the GET method.",
              "responses": {
                "200": {
                  "description": "success"
                }
              }
            }
          },
          "/ixn/error-calls/[error-code]": {
            "get": {
              "tags": [
                "Deprecated Endpoints"
              ],
              "description": "This endpoint fetches IXN objects from SMQ tagged with :error-code using the GET method.",
              "responses": {
                "200": {
                  "description": "success"
                }
              }
            }
          },
          "/agents/loggedin": {
            "get": {
              "tags": [
                "Deprecated Endpoints"
              ],
              "description": "This endpoint fetches Logged In Agents Object list using the GET method.",
              "responses": {
                "200": {
                  "description": "success"
                }
              }
            }
          },
          "/messageQueue/[queue_name]/receiveCall": {
            "get": {
              "tags": [
                "Deprecated Endpoints"
              ],
              "description": "This endpoint rceives messages from :queue_name with msgtype call using the GET method.",
              "responses": {
                "200": {
                  "description": "success",
                  "content": {
                    "application/json": {
                      "examples": {
                        "Response": {
                          "value": "{\n    \"call_ids\": [\n        1,\n        2,\n        3,\n        4\n    ]\n}"
                        },
                        " When call exists in the queue": {
                          "value": "{\n    \"call_ids\": [\n        1,\n        2,\n        3,\n        4\n    ]\n}\n"
                        },
                        "When call exists in the queue": {
                          "value": "{\n    \"call_ids\": [\n        1,\n        2,\n        3,\n        4\n    ]\n}\n"
                        },
                        "Queue is empty": {
                          "value": "{\n    \"error\": {\n        \"code\": 404,\n        \"message\": \"Message queue empty\"\n    }\n}"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "/snapshot/generate": {
            "get": {
              "tags": [
                "Deprecated Endpoints"
              ],
              "description": "Generates a snapshot of logs and returns a url of the resource file. To invoke this endpoint, the following Query Parameters are required, - label - start_time - end_time Optional Parameters (for DevOps) - file_server ( IP Address passed to the Bolt Script) - bolt_path (Absolute Path to Bolt Script)",
              "parameters": [
                {
                  "name": "I",
                  "in": "query",
                  "required": true,
                  "description": "Label",
                  "schema": {
                    "type": "string",
                    "example": "TestLabel"
                  }
                },
                {
                  "name": "st",
                  "in": "query",
                  "required": true,
                  "description": "Start Time",
                  "schema": {
                    "type": "string",
                    "example": "2020-08-06 11:22:00"
                  }
                },
                {
                  "name": "et",
                  "in": "query",
                  "required": true,
                  "description": "End Time",
                  "schema": {
                    "type": "string",
                    "example": "2020-08-06 11:53:00"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "success"
                }
              }
            }
          },
          "/shm/mem-stats": {
            "get": {
              "tags": [
                "Deprecated Endpoints"
              ],
              "description": "This endpoint returns shared memory stats using the GET method.",
              "responses": {
                "200": {
                  "description": "success"
                }
              }
            }
          },
          "/v1/bolt/parameters": {
            "put": {
              "tags": [
                "Bolt"
              ],
              "description": "This endpoint sets 'Bolt' Script Parameters. Bolt parameters can be - 'bolt_path' (path for the bolt script), - 'rtp' (enable/disable RTP logging), or - 'sip' enable/disable SIP logging.",
              "requestBody": {
                "required": true,
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "bolt_path": {
                          "type": "string"
                        },
                        "rtp": {
                          "type": "boolean",
                          "example": ":bool"
                        },
                        "sip": {
                          "type": "boolean",
                          "example": ":bool"
                        }
                      }
                    }
                  }
                }
              },
              "parameters": [
                {
                  "in": "query",
                  "name": "bolt_path",
                  "required": false,
                  "description": "This is an optional parameter that refers to the bolt script path. Default value is \"/data/bolt_src/\"",
                  "schema": {
                    "type": "string",
                    "example": null
                  }
                },
                {
                  "in": "query",
                  "name": "rtp",
                  "required": false,
                  "description": "This parameter enables/disables rtp logging.  Default value is false(disabled).",
                  "schema": {
                    "type": "string",
                    "example": null
                  }
                },
                {
                  "name": "sip",
                  "in": "query",
                  "required": false,
                  "description": "This parameter enables/disables sip logging.Default value is false(disabled).",
                  "schema": {
                    "type": "string",
                    "example": null
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "success",
                  "content": {
                    "application/json": {
                      "examples": {
                        "Response": {
                          "value": {
                            "status": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "/answer-skills/{ixn_id}": {
            "put": {
              "tags": [
                "Interactions"
              ],
              "description": "This endpoint sets ixn_id answer skill to answer_skill (int), sent as JSON in the request body using the PUT method.",
              "parameters": [
                {
                  "name": "ixn_id",
                  "in": "path",
                  "required": true,
                  "description": "This parameter is used to specify the Interaction Id of the relevant Interaction.",
                  "schema": {
                    "type": "integer",
                    "example": 1
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "success"
                }
              }
            }
          },
          "/RouteSelectHistoryEntry/{ixn_id}": {
            "put": {
              "tags": [
                "Interactions"
              ],
              "description": "This endpoint adds Route Select History entry for ixn_id with aid (int) and timestamp (int), both values sent as JSON in the request body using the PUT method.",
              "parameters": [
                {
                  "name": "ixn_id",
                  "in": "path",
                  "required": true,
                  "description": "This parameter is used to specify the Interaction Id of the relevant Interaction.",
                  "schema": {
                    "type": "integer",
                    "example": 1
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "success"
                }
              }
            }
          },
          "/v1/admin_interface": {
            "put": {
              "tags": [
                "Admin Interface"
              ],
              "description": "This endpoint sends/receives commands/responses through the admin library using the PUT method. This endpoint can use all types of administrative commands (as listed in cms_type enum), except 'Trace' related commands. <i>Please see the Confluence page for 'cmd_type' enumerations - https://connect.afiniti.com/display/AV6/SHM+Rest+API </i>",
              "parameters": [
                {
                  "name": "timeout_ms",
                  "in": "query",
                  "required": false,
                  "description": "This is an optional parameter which determines how long the api will wait for a response from admin lib. Default Value 100. Please use it with caution and don't provide very large values as this can choke this endpoint for other requests",
                  "schema": {
                    "type": "integer",
                    "example": null
                  }
                },
                {
                  "name": "id",
                  "in": "query",
                  "required": true,
                  "description": "It has been deprecated but is kept for backward compatiblity, use body instead.",
                  "schema": {
                    "type": "integer",
                    "example": null
                  }
                },
                {
                  "name": "body",
                  "in": "query",
                  "required": true,
                  "description": "It is to be used for any arguments required for the request.",
                  "schema": {
                    "type": "integer",
                    "example": null
                  }
                },
                {
                  "name": "cmd_type",
                  "in": "query",
                  "required": true,
                  "description": "See enum cmd_type. All command names except ones that include _TRACE_ can be used here",
                  "schema": {
                    "type": "integer",
                    "example": null
                  }
                }
              ],
              "requestBody": {
                "required": true,
                "description": "<p><strong>\"cmd_type\"</strong> See enum values for 'cmd_type' to use a suitable value. All command names <em>except the ones that include</em>    \"_TRACE_\" can be used with this endpoint. </p> <p><strong>\"body\"</strong> is used for any arguments required for the request.</p> <p><strong>\"timeout_ms\"</strong> is an optional field   which determines how long the api will wait for a response from admin lib. Default Value is 100 milliseconds. Note - Please use it with caution and don't provide very large values as this can choke this endpoint for other requests</p> <p><strong>\"id\"</strong> has been deprecated but is kept for backward compatiblity. Please use 'body' instead.</p>",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "cmd_type": {
                          "example": 11
                        },
                        "body": {
                          "example": "string"
                        }
                      }
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "success",
                  "content": {
                    "application/json": {
                      "examples": {
                        "Response": {
                          "value": "{\n    \"body\": \"SIP Messages\",\n    \"success\": true\n}\n"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "/v1/admin_interface/start_trace": {
            "put": {
              "tags": [
                "Admin Interface"
              ],
              "description": "This endpoint starts trace commands through the admin library using the PUT method. The response will return a uid that should be saved. This uid will be used to request partial responses and stop traces.  <p>Note: Please make sure to stop the traces that are not completed (in order to free up memory).</p>",
              "parameters": [
                {
                  "name": "id",
                  "in": "query",
                  "required": true,
                  "description": "It has been deprecated but is kept for backward compatiblity, use body instead.",
                  "schema": {
                    "type": "integer",
                    "example": null
                  }
                },
                {
                  "name": "body",
                  "in": "query",
                  "required": true,
                  "description": "It is to be used for any arguments required for the request.",
                  "schema": {
                    "type": "integer",
                    "example": null
                  }
                },
                {
                  "name": "cmd_type",
                  "in": "query",
                  "required": true,
                  "description": "See enum cmd_type. All command names except ones that include _TRACE_ can be used here.",
                  "schema": {
                    "type": "integer",
                    "example": null
                  }
                }
              ],
              "requestBody": {
                "required": true,
                "description": "<p><strong>\"cmd_type\"</strong> See enum values for 'cmd_type' to use a suitable value. All command names that <em>do include</em> \"_TRACE_\" can be used with this endpoint. </p> <p><strong>\"body\"</strong> is used for any arguments required for the request.</p> <p><strong>\"id\"</strong> has been deprecated but is kept for backward compatiblity. Please use 'body' instead.</p>",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "cmd_type": {
                          "type": "integer",
                          "example": "int"
                        },
                        "id": {
                          "type": "integer",
                          "example": "int"
                        },
                        "body": {
                          "type": "string",
                          "example": "string"
                        }
                      }
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "success",
                  "content": {
                    "application/json": {
                      "examples": {
                        "Response": {
                          "value": "{\n    \"message\": \"Trace Started\",\n    \"uid\": 12\n}\n"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "/v1/admin_interface/trace": {
            "put": {
              "tags": [
                "Admin Interface"
              ],
              "description": "This endpoint gets a partial response for an active trace through the admin library using the PUT method.",
              "requestBody": {
                "required": true,
                "description": "<p><strong>\"uid\"</strong> The uid returned from the Start Trace endpoint will be passed here.</p>",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "uid": {
                          "type": "integer",
                          "example": 12
                        }
                      }
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "success",
                  "content": {
                    "application/json": {
                      "examples": {
                        "Response": {
                          "value": "{\n    \"trace\": \"SIP Messages\"\n}"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "/v1/admin_interface/stop_trace": {
            "put": {
              "tags": [
                "Admin Interface"
              ],
              "description": "This endpoint helps stop an active trace using the admin library. This is important in cases where there is a need to free up memory and other resources.",
              "requestBody": {
                "required": true,
                "description": "<p><strong>\"uid\"</strong> The uid returned from the Start Trace endpoint will be passed here.</p>",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "uid": {
                          "type": "integer",
                          "example": 12
                        }
                      }
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "success",
                  "content": {
                    "application/json": {
                      "examples": {
                        "Response": {
                          "value": "{\n    \"message\": \"Trace Stopped\"\n}\n"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "/agents/state/[agent_id]": {
            "put": {
              "tags": [
                "Agent"
              ],
              "description": "This endpoint updates the agent state against the agent_id using the PUT method. Agent states can be 'AS_UNKNOWN', 'AS_LOGGEDOUT', 'AS_LOGGEDIN', 'AS_ONBREAK', etc.",
              "parameters": [
                {
                  "name": "agent_id",
                  "in": "query",
                  "required": true,
                  "description": "Agent Id",
                  "schema": {
                    "type": "integer",
                    "example": null
                  }
                }
              ],
              "requestBody": {
                "required": true,
                "description": "The following values are supported - unknown , loggedOut , loggedIn , idle , onBreak , assigned , talking , warp , reserved. Note- All are case sensitive.",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "agent_state": {
                          "example": "loggedIn"
                        }
                      }
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "success"
                }
              }
            }
          },
          "/agents/[agent_id]": {
            "put": {
              "tags": [
                "Agent"
              ],
              "description": "This endpoint adds a new agent object for the provided agent_id using the PUT method.",
              "parameters": [
                {
                  "name": "agent_id",
                  "in": "query",
                  "required": true,
                  "description": "Agent Id",
                  "schema": {
                    "type": "integer",
                    "example": null
                  }
                }
              ],
              "requestBody": {
                "required": true,
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "agent_group_id": {
                          "type": "integer",
                          "example": 1
                        },
                        "agent_state": {
                          "type": "string",
                          "example": "idle"
                        },
                        "agent_group_level": {
                          "type": "integer",
                          "example": 2
                        }
                      }
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "success"
                }
              }
            },
            "delete": {
              "tags": [
                "Agent"
              ],
              "description": "This endpoint deletes an existing agent object using the DELETE method.",
              "parameters": [
                {
                  "name": "tenant",
                  "in": "query",
                  "required": false,
                  "description": "optional",
                  "schema": {
                    "type": "integer",
                    "example": null
                  }
                },
                {
                  "name": "keep_object",
                  "in": "query",
                  "required": true,
                  "description": "Set the query parameter keep_object=1 if you would like to keep the object but delete elements. For a complete list of supported elements see below parameters default value  keep_object=0 which deletes entire object.",
                  "schema": {
                    "type": "integer",
                    "example": null
                  }
                },
                {
                  "name": "remove_all_on_ixn_ids",
                  "in": "query",
                  "required": true,
                  "description": "(bool) if set to true removes all ixn ids from the agent",
                  "schema": {
                    "type": "boolean",
                    "example": null
                  }
                },
                {
                  "name": "agent_group_level",
                  "in": "query",
                  "required": true,
                  "description": "Agent Group Level",
                  "schema": {
                    "type": "integer",
                    "example": null
                  }
                },
                {
                  "name": "agent_acd_attributes",
                  "in": "query",
                  "required": true,
                  "description": "Removes the passed attribute names",
                  "schema": {
                    "type": "string",
                    "example": null
                  }
                },
                {
                  "name": "skills",
                  "in": "query",
                  "required": true,
                  "description": "Removes the passed skillss",
                  "schema": {
                    "type": "string",
                    "example": null
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "sucess"
                }
              }
            }
          },
          "/v1/agents/[agent_id]": {
            "put": {
              "tags": [
                "Agent"
              ],
              "description": "This endpoint adds a new agent object for the given agent_id using the PUT method. This method supports Partial Update. Fields are optional and only fields that are provided will be updated, while the rest of the fields will be ignored.",
              "parameters": [
                {
                  "name": "use_acd_id",
                  "in": "query",
                  "required": true,
                  "description": "(true)treat the [id] provided in the url as a string. (false)treat the [id] provide in the url as an int default false.",
                  "schema": {
                    "type": "integer",
                    "example": null
                  }
                },
                {
                  "name": "clear_abandon_count",
                  "in": "query",
                  "required": true,
                  "description": "(true) invokes method StateSvcSharedMemCtl::clearAgentAbandonCount",
                  "schema": {
                    "type": "integer",
                    "example": null
                  }
                },
                {
                  "name": "channel_type",
                  "in": "query",
                  "required": true,
                  "description": "can be used to specify the channel type for StateSvcSharedMemCtl::updateAgentState",
                  "schema": {
                    "type": "integer",
                    "example": null
                  }
                }
              ],
              "requestBody": {
                "required": true,
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "use_acd_id": {
                          "type": "boolean",
                          "example": false
                        },
                        "agent_acd_attributes": {
                          "example": [
                            {
                              "key": "",
                              "value": ""
                            }
                          ]
                        },
                        "tenant": {
                          "example": -1
                        },
                        "agent_group_id": {
                          "example": 1
                        },
                        "agent_group_level": {
                          "example": 1
                        },
                        "station_string": {
                          "example": ""
                        },
                        "max_abandon_flag": {
                          "example": false
                        },
                        "station_id": {
                          "example": 1
                        },
                        "clear_abandon_count": {
                          "example": true
                        },
                        "agent_state": {
                          "example": 0
                        },
                        "channel_type": {
                          "example": "-1"
                        },
                        "add_on_ixn_id": {
                          "example": 0
                        },
                        "on_ixn_id": {
                          "example": 0
                        },
                        "on_ixn_chan_routable": {
                          "example": false
                        },
                        "on_ixn_chan_enabled": {
                          "example": false
                        },
                        "cleasr_abandon_count": {
                          "example": false
                        },
                        "unreserve_agent": {
                          "example": false
                        },
                        "free_assigned_agent": {
                          "example": false
                        },
                        "enable_agent_channel": {
                          "example": false
                        },
                        "skills": {
                          "example": [
                            {
                              "acd_skill": 0,
                              "level": 0
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "success"
                }
              }
            }
          },
          "/agents/answer/[call_id]": {
            "put": {
              "tags": [
                "Agent"
              ],
              "description": "This endpoint helps set the Answering Agent ID field for an Interaction Object (against the specified Call Id).",
              "parameters": [
                {
                  "name": "call_id",
                  "in": "query",
                  "required": true,
                  "description": "Call ID",
                  "schema": {
                    "type": "integer",
                    "example": null
                  }
                }
              ],
              "requestBody": {
                "required": true,
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "answer_agent_id": {
                          "type": "integer",
                          "example": 12
                        }
                      }
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "success"
                }
              }
            }
          },
          "/agent-groups/[agent_group_id]": {
            "put": {
              "tags": [
                "Agent Group"
              ],
              "description": "This endpoint adds a new Agent Group for the given agent_group_id using the PUT method.",
              "parameters": [
                {
                  "name": "agent_group_id",
                  "in": "query",
                  "required": true,
                  "description": "Agent Group ID",
                  "schema": {
                    "type": "integer",
                    "example": null
                  }
                }
              ],
              "requestBody": {
                "required": true,
                "description": "Adds a new agent group.",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "agent_group_name": {
                          "type": "string",
                          "example": null
                        }
                      }
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "success"
                }
              }
            }
          },
          "/agent-groups/deassign/[agent_id]": {
            "put": {
              "tags": [
                "Agent Group"
              ],
              "description": "This endpoint removes agent_id from the agent group for the given agent_id using the PUT method.",
              "parameters": [
                {
                  "name": "agent_id",
                  "in": "query",
                  "required": true,
                  "description": "Agent ID",
                  "schema": {
                    "type": "integer",
                    "example": null
                  }
                }
              ],
              "requestBody": {
                "required": true,
                "description": "Removes agent_id from agent group",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "agent_group_id": {
                          "type": "integer",
                          "example": null
                        }
                      }
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "success"
                }
              }
            }
          },
          "/agent-groups/assign/[agent_id]": {
            "put": {
              "tags": [
                "Agent Group"
              ],
              "description": "This endpoint adds agent_id to the agent group using the PUT method.",
              "parameters": [
                {
                  "name": "agent_id",
                  "in": "query",
                  "required": true,
                  "description": "Agent ID",
                  "schema": {
                    "type": "integer",
                    "example": null
                  }
                }
              ],
              "requestBody": {
                "required": true,
                "description": "Add agent_id to agent group",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "agent_group_id": {
                          "type": "integer",
                          "example": "A1"
                        },
                        "agent_group_level": {
                          "type": "integer",
                          "example": null
                        }
                      }
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "success"
                }
              }
            }
          },
          "/agent-groups/answer/[call_id]": {
            "put": {
              "tags": [
                "Agent Group"
              ],
              "description": "This endpoint associates the Answering AG to the respective Call Id.",
              "parameters": [
                {
                  "name": "call_id",
                  "in": "query",
                  "required": true,
                  "description": "Call Id",
                  "schema": {
                    "type": "integer",
                    "example": null
                  }
                }
              ],
              "requestBody": {
                "required": true,
                "description": "Sets call_id to answer agent group",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "answer_agent_group_id": {
                          "type": "integer",
                          "example": null
                        }
                      }
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "success"
                }
              }
            }
          },
          "/calls/add/queue/{call_queue_id}": {
            "put": {
              "tags": [
                "Call Queue"
              ],
              "description": "This endpoint adds a new call queue with id call_queue_id and name call_queue_table_name, a string sent as json in request body.",
              "parameters": [
                {
                  "name": "call_queue_id",
                  "in": "path",
                  "required": true,
                  "schema": {
                    "type": "integer",
                    "example": null
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "success"
                }
              }
            }
          },
          "/calls/add/type/{call_type_id}": {
            "put": {
              "tags": [
                "Call Type"
              ],
              "description": "This endpoint adds a new call type with id call_type_id and name call_type_name, a string sent as json in request body.",
              "parameters": [
                {
                  "name": "call_type_id",
                  "in": "path",
                  "required": true,
                  "schema": {
                    "type": "integer",
                    "example": null
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "success"
                }
              }
            }
          },
          "/calls/type/{ixn_id}": {
            "put": {
              "tags": [
                "Call Type"
              ],
              "description": "This endpoint sets ixn_id call type to call_type_id, an int sent as json in request body.",
              "parameters": [
                {
                  "name": "ixn_id",
                  "in": "path",
                  "required": true,
                  "schema": {
                    "type": "integer",
                    "example": null
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "success"
                }
              }
            }
          },
          "/calls/add/DN/{call_type_id}": {
            "put": {
              "tags": [
                "Call Type"
              ],
              "description": "This endpoint adds a DN on call_type_id using the PUT method. DN is an int sent as json in request body.",
              "parameters": [
                {
                  "name": "call_type_id",
                  "in": "path",
                  "required": true,
                  "schema": {
                    "type": "integer",
                    "example": null
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "success"
                }
              }
            }
          },
          "/map/{map_name}": {
            "put": {
              "tags": [
                "Map"
              ],
              "description": "<p>This endpoint initializes the shared memory map using the PUT method.</p> <p>Note:Possible values for query parameters are:</p> <pre>create:0/1 (default 1) size_hint:int (default 0) need_sync:0/1 (default 0); bd_sync:0/1 (default 0);</pre>",
              "parameters": [
                {
                  "name": "map_name",
                  "in": "path",
                  "required": true,
                  "schema": {
                    "type": "integer",
                    "example": null
                  }
                },
                {
                  "name": "create",
                  "in": "query",
                  "required": true,
                  "schema": {
                    "type": "integer",
                    "example": "(default 1)"
                  }
                },
                {
                  "name": "size_hint",
                  "in": "query",
                  "required": true,
                  "schema": {
                    "type": "integer",
                    "example": "(default 0)"
                  }
                },
                {
                  "name": "need_sync",
                  "in": "query",
                  "required": true,
                  "schema": {
                    "type": "integer",
                    "example": "(default 0)"
                  }
                },
                {
                  "name": "bd_sync",
                  "in": "query",
                  "required": true,
                  "schema": {
                    "type": "integer",
                    "example": "(default 0)"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "success",
                  "content": {
                    "application/json": {
                      "examples": {
                        "Response": {
                          "value": "{\n    \"success\": {\n    }\n}"
                        }
                      }
                    }
                  }
                }
              }
            },
            "delete": {
              "tags": [
                "Map"
              ],
              "description": "This endpoint removes shared memory map using the DELETE method.",
              "parameters": [
                {
                  "name": "map_name",
                  "in": "path",
                  "required": true,
                  "schema": {
                    "type": "integer",
                    "example": null
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "success"
                }
              }
            }
          },
          "/map/{map_name}/entry": {
            "put": {
              "tags": [
                "Map"
              ],
              "description": "<p>This endpoint adds map entry using the PUT method.</p> <p>Note:Possible values for query parameters are:</p> <pre>create:0/1 (default 1) size_hint:int (default 0) need_sync:0/1 (default 0); bd_sync:0/1 (default 0);</pre>",
              "parameters": [
                {
                  "name": "map_name",
                  "in": "path",
                  "required": true,
                  "schema": {
                    "type": "integer",
                    "example": null
                  }
                },
                {
                  "name": "create",
                  "in": "query",
                  "required": false,
                  "schema": {
                    "type": "integer",
                    "example": 1
                  }
                },
                {
                  "name": "size_hint",
                  "in": "query",
                  "required": false,
                  "schema": {
                    "type": "integer",
                    "example": 0
                  }
                },
                {
                  "name": "need_sync",
                  "in": "query",
                  "required": false,
                  "schema": {
                    "type": "integer",
                    "example": 0
                  }
                },
                {
                  "name": "bd_sync",
                  "in": "query",
                  "required": false,
                  "schema": {
                    "type": "integer",
                    "example": 0
                  }
                },
                {
                  "name": "key",
                  "in": "query",
                  "required": true,
                  "schema": {
                    "type": "integer",
                    "example": 0
                  }
                },
                {
                  "name": "value",
                  "in": "query",
                  "required": true,
                  "schema": {
                    "type": "integer",
                    "example": 0
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "success",
                  "content": {
                    "application/json": {
                      "examples": {
                        "Sample Response": {
                          "value": "{\n    \"success\": {\n        \"code\": 200,\n        \"message\": \"Map Add Entry Status :0\"\n    }\n}"
                        }
                      }
                    }
                  }
                }
              }
            },
            "delete": {
              "tags": [
                "Map"
              ],
              "description": "This endpoint removes smap entry using the DELETE method.",
              "parameters": [
                {
                  "name": "map_name",
                  "in": "path",
                  "required": true,
                  "schema": {
                    "type": "integer",
                    "example": null
                  }
                },
                {
                  "name": "key",
                  "in": "query",
                  "required": true,
                  "schema": {
                    "type": "integer",
                    "example": null
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "success"
                }
              }
            }
          },
          "/v1/message_queue/{queue_name}/receive_calls": {
            "get": {
              "tags": [
                "SMQ"
              ],
              "description": "This endpoint receives messages from :queue_name with msgtype call.",
              "parameters": [
                {
                  "name": "queue_name",
                  "in": "path",
                  "required": true,
                  "schema": {
                    "type": "integer"
                  }
                },
                {
                  "name": "count",
                  "in": "query",
                  "required": false,
                  "schema": {
                    "type": "integer"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "success",
                  "content": {
                    "application/json": {
                      "examples": {
                        "When call exists in the queue": {
                          "value": "{\n \"call_ids\": [\n       1,\n      2,\n       3,\n       4\n       ]\n    }"
                        },
                        "Queue is empty": {
                          "value": {
                            "error": {
                              "code": 404,
                              "message": "Message queue empty"
                            }
                          }
                        },
                        "Message Queue does not exist": {
                          "value": {
                            "error": {
                              "code": 400,
                              "message": "Message queue not found"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "/messageQueue/{queue_name}/sendMessage": {
            "put": {
              "tags": [
                "SMQ"
              ],
              "description": "This endpoint sends a message into:queue_name using the PUT method. If it does not already exist, it creates a new queue.",
              "parameters": [
                {
                  "name": "queue_name",
                  "in": "path",
                  "required": true,
                  "description": "Queue Name",
                  "schema": {
                    "type": "integer"
                  }
                }
              ],
              "requestBody": {
                "required": true,
                "description": "<p><strong>\"dataCount\"</strong> SMQ only supports data count of 1,2,4 and 5. If 2 is selected for example only parameters data1 and data2 are required, data 3 to 5 can be omitted.</p> <p><strong>\"messageType\"</strong> Message Type </p> <p><strong>\"data1\"</strong> Data 1 </p> <p><strong>\"data2\"</strong> Data 2 </p> <p><strong>\"data3\"</strong> Data 3 </p> <p><strong>\"data4\"</strong> Data 4 </p> <p><strong>\"data5\"</strong> Data 5 </p>",
                "content": {
                  "application/json": {
                    "schema": {
                      "properties": {
                        "dataCount": {
                          "type": "integer",
                          "example": 1
                        },
                        "messageType": {
                          "type": "integer",
                          "example": null
                        },
                        "data1": {
                          "type": "integer",
                          "example": null
                        },
                        "data2": {
                          "type": "integer",
                          "example": null
                        },
                        "data3": {
                          "type": "integer",
                          "example": null
                        },
                        "data4": {
                          "type": "integer",
                          "example": null
                        },
                        "data5": {
                          "type": "integer",
                          "example": null
                        }
                      }
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "success"
                }
              }
            }
          },
          "/messageQueue/{queue_name}": {
            "delete": {
              "tags": [
                "SMQ"
              ],
              "description": "This endpoint removes all existing messages from queue_name using the DELETE method.",
              "parameters": [
                {
                  "name": "queue_name",
                  "in": "path",
                  "required": true,
                  "description": "Queue Name",
                  "schema": {
                    "type": "integer"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "success"
                }
              }
            }
          },
          "/messageQueue/{queue_name}/sendCall": {
            "put": {
              "tags": [
                "SMQ"
              ],
              "description": "This endpoint sends a message into:queue_name with message type, call, and call_id (int) using the PUT method. The call_id (int) is sent as a JSON parameter in the request body.",
              "parameters": [
                {
                  "name": "queue_name",
                  "in": "path",
                  "required": true,
                  "description": "Queue Name",
                  "schema": {
                    "type": "integer"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "success"
                }
              }
            }
          },
          "/messageQueue/{queue_name}/sendAgent": {
            "put": {
              "tags": [
                "SMQ"
              ],
              "description": "This endpoint sends a message into:queue_name with message type,  agent, and agent_id using the PUT method. The agent_id (int) is sent as a JSON parameter in the request body.",
              "parameters": [
                {
                  "name": "queue_name",
                  "in": "path",
                  "required": true,
                  "description": "Queue Name",
                  "schema": {
                    "type": "integer"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "success"
                }
              }
            }
          },
          "/messageQueue/{queue_name}/sendPair": {
            "put": {
              "tags": [
                "SMQ"
              ],
              "description": "This endpoint sends a message into :queue_name with msgtype pair using the PUT method. Both call_id and agent_id are sent as a JSON parameters in request body.",
              "parameters": [
                {
                  "name": "queue_name",
                  "in": "path",
                  "required": true,
                  "description": "Queue Name",
                  "schema": {
                    "type": "integer"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "success"
                }
              }
            }
          },
          "/messageQueue/{queue_name}/init": {
            "put": {
              "tags": [
                "SMQ"
              ],
              "description": "This endpoint s a message queue for the given queue_name using the PUT method.",
              "parameters": [
                {
                  "name": "sync_type",
                  "in": "query",
                  "required": true,
                  "schema": {
                    "type": "integer"
                  }
                },
                {
                  "name": "depth",
                  "in": "query",
                  "required": true,
                  "schema": {
                    "type": "integer"
                  }
                },
                {
                  "name": "queue_name",
                  "in": "path",
                  "required": true,
                  "description": "Queue Name",
                  "schema": {
                    "type": "integer"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "success"
                }
              }
            }
          },
          "/ixn": {
            "put": {
              "tags": [
                "Deprecated Endpoints"
              ],
              "description": "This endpoint creates/updates the interaction using the PUT method.",
              "responses": {
                "200": {
                  "description": "success"
                }
              }
            }
          },
          "/agent-groups/get-realtime-stats": {
            "get": {
              "tags": [
                "Deprecated Endpoints"
              ],
              "description": "This endpoint fetches the Agent Group stats using the GET method.",
              "responses": {
                "200": {
                  "description": "success"
                }
              }
            }
          }
        }
      }
    },
    {
      "label": "Shared Services - Core Configuration Server",
      "value": "shared-code-config",
      "Specs": {
        "swagger": "2.0",
        "info": {
          "description": "Core Configuration Server REST API \n\n",
          "version": "2.10.3",
          "title": "Core Configuration Server"
        },
        "basePath": "/",
        "tags": [],
        "schemes": [
          "http"
        ],
        "host": "10.32.22.54:4000",
        "paths": {
          "/health": {
            "get": {
              "summary": "Health Check",
              "description": "Config backend's health check endpoint.",
              "responses": {
                "200": {
                  "description": "The Health Check is successful",
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "example": "ok"
                      },
                      "info": {
                        "type": "object",
                        "example": {
                          "database": {
                            "status": "up"
                          }
                        },
                        "additionalProperties": {
                          "type": "object",
                          "properties": {
                            "status": {
                              "type": "string"
                            }
                          },
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "nullable": true
                      },
                      "error": {
                        "type": "object",
                        "example": {},
                        "additionalProperties": {
                          "type": "object",
                          "properties": {
                            "status": {
                              "type": "string"
                            }
                          },
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "nullable": true
                      },
                      "details": {
                        "type": "object",
                        "example": {
                          "database": {
                            "status": "up"
                          }
                        },
                        "additionalProperties": {
                          "type": "object",
                          "properties": {
                            "status": {
                              "type": "string"
                            }
                          },
                          "additionalProperties": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "503": {
                  "description": "The Health Check is not successful",
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "example": "error"
                      },
                      "info": {
                        "type": "object",
                        "example": {
                          "database": {
                            "status": "up"
                          }
                        },
                        "additionalProperties": {
                          "type": "object",
                          "properties": {
                            "status": {
                              "type": "string"
                            }
                          },
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "nullable": true
                      },
                      "error": {
                        "type": "object",
                        "example": {
                          "redis": {
                            "status": "down",
                            "message": "Could not connect"
                          }
                        },
                        "additionalProperties": {
                          "type": "object",
                          "properties": {
                            "status": {
                              "type": "string"
                            }
                          },
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "nullable": true
                      },
                      "details": {
                        "type": "object",
                        "example": {
                          "database": {
                            "status": "up"
                          },
                          "redis": {
                            "status": "down",
                            "message": "Could not connect"
                          }
                        },
                        "additionalProperties": {
                          "type": "object",
                          "properties": {
                            "status": {
                              "type": "string"
                            }
                          },
                          "additionalProperties": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "bearer": []
                }
              ],
              "tags": [
                "Health"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/serverInformation": {
            "get": {
              "summary": "Retrieve server information",
              "description": "Endpoint to retrieve the server information.",
              "operationId": "FindServerInformation",
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/ServerInformation"
                  }
                }
              },
              "tags": [
                "Server Information"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/serverInformation/statistics": {
            "get": {
              "summary": "Retrieve server statistics",
              "description": "Endpoint to retrieve the server statistics.",
              "operationId": "GetServerStatistics",
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/ServerStatistics"
                  }
                }
              },
              "tags": [
                "Server Information"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenant/{tenantId}/component": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Component"
                    }
                  }
                }
              },
              "tags": [
                "Component"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "post": {
              "parameters": [
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                },
                {
                  "name": "CreateComponentDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/CreateComponentDto"
                  }
                }
              ],
              "responses": {
                "201": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Component"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "409": {
                  "description": "Conflict - Component already exists"
                }
              },
              "tags": [
                "Component"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "delete": {
              "summary": "Delete all Components",
              "description": "Endpoint to delete all Components along with their Schemas and Configurations.",
              "operationId": "DeleteAllComponents",
              "parameters": [
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "All components successfully deleted"
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Component"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenant/{tenantId}/component/{componentId}": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "componentId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Component"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Component"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "put": {
              "parameters": [
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                },
                {
                  "name": "UpdateComponentDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/UpdateComponentDto"
                  }
                },
                {
                  "type": "string",
                  "name": "componentId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Component"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Component"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "delete": {
              "parameters": [
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "componentId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Component successfully deleted"
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Component"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenant/{tenantId}/component/{componentId}/schema": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "componentId",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "customType",
                  "required": false,
                  "in": "query",
                  "enum": [
                    "true"
                  ]
                },
                {
                  "type": "string",
                  "name": "schema",
                  "required": false,
                  "in": "query",
                  "enum": [
                    "true"
                  ]
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Schema"
                    }
                  }
                }
              },
              "tags": [
                "Schema"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "post": {
              "parameters": [
                {
                  "type": "string",
                  "name": "componentId",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                },
                {
                  "name": "CreateSchemaDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/CreateSchemaDto"
                  }
                }
              ],
              "responses": {
                "201": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Schema"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                },
                "409": {
                  "description": "Conflict - Schema already exists"
                }
              },
              "tags": [
                "Schema"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenant/{tenantId}/component/{componentId}/schema/{schemaId}": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "componentId",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "schemaId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Schema"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Schema"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "put": {
              "parameters": [
                {
                  "type": "boolean",
                  "name": "replace",
                  "required": true,
                  "in": "query"
                },
                {
                  "name": "UpdateSchemaDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/UpdateSchemaDto"
                  }
                },
                {
                  "type": "string",
                  "name": "componentId",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "schemaId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Schema"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Schema"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "delete": {
              "parameters": [
                {
                  "type": "string",
                  "name": "componentId",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "schemaId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Schema successfully deleted"
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Schema"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenant/{tenantId}/component/{componentId}/schema/{schemaId}/schema": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "componentId",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "schemaId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "object"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Schema"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenant/{tenantId}/component/{componentId}/schema/{schemaId}/configuration": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "schemaId",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "componentId",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Configuration"
                    }
                  }
                }
              },
              "tags": [
                "Configuration"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "post": {
              "parameters": [
                {
                  "type": "string",
                  "name": "schemaId",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "componentId",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "boolean",
                  "name": "draft",
                  "required": true,
                  "in": "query"
                },
                {
                  "name": "CreateConfigurationDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/CreateConfigurationDto"
                  }
                }
              ],
              "responses": {
                "201": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Configuration"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                },
                "409": {
                  "description": "Conflict - Configuration already exists"
                }
              },
              "tags": [
                "Configuration"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenant/{tenantId}/component/{componentId}/schema/{schemaId}/configuration/drafts": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "schemaId",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "componentId",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Configuration"
                    }
                  }
                }
              },
              "tags": [
                "Configuration"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenant/{tenantId}/component/{componentId}/schema/{schemaId}/configuration/{configurationId}/resolve": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "schemaId",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "componentId",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "configurationId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Configuration"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                },
                "422": {
                  "description": "Can not process Configuration"
                }
              },
              "tags": [
                "Configuration"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenant/{tenantId}/component/{componentId}/schema/{schemaId}/configuration/{configurationId}": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "schemaId",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "componentId",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "configurationId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Configuration"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Configuration"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "put": {
              "parameters": [
                {
                  "name": "UpdateConfigurationDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/UpdateConfigurationDto"
                  }
                },
                {
                  "type": "boolean",
                  "name": "draft",
                  "required": true,
                  "in": "query"
                },
                {
                  "type": "string",
                  "name": "schemaId",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "componentId",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "configurationId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Configuration"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Configuration"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "delete": {
              "parameters": [
                {
                  "type": "string",
                  "name": "schemaId",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "componentId",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "configurationId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Configuration successfully deleted"
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Configuration"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenant/{tenantId}/component/{componentId}/schema/{schemaId}/configuration/{configurationId}/data*": {
            "get": {
              "summary": "",
              "description": "Swagger does not support wild-card routes. \nPlease use another tool to test this route",
              "parameters": [
                {
                  "type": "string",
                  "name": "schemaId",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "componentId",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "configurationId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Ok"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Configuration"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "put": {
              "summary": "",
              "description": "Swagger does not support wild-card routes. \nPlease use another tool to test this route",
              "parameters": [
                {
                  "name": "UpdateConfigurationValueDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/UpdateConfigurationValueDto"
                  }
                },
                {
                  "type": "string",
                  "name": "schemaId",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "componentId",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "configurationId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Ok"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Configuration"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenant/{tenantId}/component/{componentId}/configuration/active": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "componentId",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Configuration"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Configuration"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "put": {
              "parameters": [
                {
                  "name": "UpdateActiveConfigurationDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/UpdateActiveConfigurationDto"
                  }
                },
                {
                  "type": "string",
                  "name": "componentId",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Configuration"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Configuration"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenant/{tenantId}/component/{componentId}/configuration/deactivate": {
            "put": {
              "parameters": [
                {
                  "type": "string",
                  "name": "componentId",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Successfully deactivated configuration of the component"
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Configuration"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenant/{tenantId}/withname/component/{componentName}/schema/{schemaName}/configuration": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "schemaName",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "componentName",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Configuration"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Configuration"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenant/{tenantId}/withname/component/{componentName}/schema/{schemaName}/configuration/{configurationName}": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "schemaName",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "componentName",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "configurationName",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Configuration"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Configuration"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "put": {
              "parameters": [
                {
                  "name": "UpdateConfigurationDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/UpdateConfigurationDto"
                  }
                },
                {
                  "type": "boolean",
                  "name": "draft",
                  "required": true,
                  "in": "query"
                },
                {
                  "type": "string",
                  "name": "schemaName",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "componentName",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "configurationName",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Configuration"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Configuration"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenant/{tenantId}/routing-entity/{type}/schema": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "type",
                  "required": true,
                  "in": "path",
                  "enum": [
                    "agent",
                    "agentGroup",
                    "callType",
                    "station",
                    "vector",
                    "dn",
                    "benchmark",
                    "lineOfBusiness",
                    "holiday",
                    "serviceHour",
                    "agentPermissionSet",
                    "switchDialplanScheme",
                    "mediaObjects",
                    "cwt",
                    "awt",
                    "serviceProvider",
                    "acd",
                    "acdConfig",
                    "coveragePathSet",
                    "featureSet",
                    "acdSkill",
                    "afinitiMode",
                    "aicoreMode",
                    "airoDnToAgMapping",
                    "skillGroup",
                    "megaGlobalConfiguration",
                    "megaLocation",
                    "megaReasonCode",
                    "megaAesServer",
                    "customGroup",
                    "vectorVariable",
                    "subTenantMapping",
                    "cor",
                    "dialPlanAnalysis",
                    "fac",
                    "deviceDataTemplate",
                    "megaRoutingRule",
                    "megaSipServer",
                    "megaLogoutReasonCode",
                    "megaTenant",
                    "megaTenantInfo",
                    "megaBox",
                    "megaTfnDid",
                    "megaBpo",
                    "megaDatasources",
                    "megaAttributes",
                    "capacityProfile",
                    "voiceMailServer",
                    "dialPlanCallType",
                    "adaptation",
                    "megaOfficeLocation",
                    "megaTerminalGroup",
                    "vuStats",
                    "vectorRoutingTable",
                    "megaCmsLink",
                    "megaCtiLink",
                    "omniProviders",
                    "trunkGroup",
                    "trunk",
                    "segmentationTable"
                  ]
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/RoutingEntitySchema"
                  }
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Routing Entity Schema"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "post": {
              "parameters": [
                {
                  "name": "RoutingEntitySchemaDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/RoutingEntitySchemaDto"
                  }
                },
                {
                  "type": "string",
                  "name": "type",
                  "required": true,
                  "in": "path",
                  "enum": [
                    "agent",
                    "agentGroup",
                    "callType",
                    "station",
                    "vector",
                    "dn",
                    "benchmark",
                    "lineOfBusiness",
                    "holiday",
                    "serviceHour",
                    "agentPermissionSet",
                    "switchDialplanScheme",
                    "mediaObjects",
                    "cwt",
                    "awt",
                    "serviceProvider",
                    "acd",
                    "acdConfig",
                    "coveragePathSet",
                    "featureSet",
                    "acdSkill",
                    "afinitiMode",
                    "aicoreMode",
                    "airoDnToAgMapping",
                    "skillGroup",
                    "megaGlobalConfiguration",
                    "megaLocation",
                    "megaReasonCode",
                    "megaAesServer",
                    "customGroup",
                    "vectorVariable",
                    "subTenantMapping",
                    "cor",
                    "dialPlanAnalysis",
                    "fac",
                    "deviceDataTemplate",
                    "megaRoutingRule",
                    "megaSipServer",
                    "megaLogoutReasonCode",
                    "megaTenant",
                    "megaTenantInfo",
                    "megaBox",
                    "megaTfnDid",
                    "megaBpo",
                    "megaDatasources",
                    "megaAttributes",
                    "capacityProfile",
                    "voiceMailServer",
                    "dialPlanCallType",
                    "adaptation",
                    "megaOfficeLocation",
                    "megaTerminalGroup",
                    "vuStats",
                    "vectorRoutingTable",
                    "megaCmsLink",
                    "megaCtiLink",
                    "omniProviders",
                    "trunkGroup",
                    "trunk",
                    "segmentationTable"
                  ]
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "201": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/RoutingEntitySchema"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Routing Entity Schema"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenant/{tenantId}/routing-entity/schemas/clone": {
            "post": {
              "summary": "Clone schemas and default records from another tenant",
              "description": "Copies over all the routing entity schemas as well as any default records of all entities except subTenantMapping. This endpoint does not perform upgrades and can only clone schemas if there are no prior schemas present i.e. we are creating a new tenant.",
              "parameters": [
                {
                  "name": "RoutingEntitySchemasCloneDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/RoutingEntitySchemasCloneDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "201": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/RoutingEntitySchemaCloneResponseDto"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Source schemas not found"
                },
                "409": {
                  "description": "Schemas are already present for current tenant"
                }
              },
              "tags": [
                "Routing Entity Schema"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenant/{tenantId}/routing-entity/{type}/authorized": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "type",
                  "required": true,
                  "in": "path",
                  "enum": [
                    "agent",
                    "agentGroup",
                    "callType",
                    "station",
                    "vector",
                    "dn",
                    "benchmark",
                    "lineOfBusiness",
                    "holiday",
                    "serviceHour",
                    "agentPermissionSet",
                    "switchDialplanScheme",
                    "mediaObjects",
                    "cwt",
                    "awt",
                    "serviceProvider",
                    "acd",
                    "acdConfig",
                    "coveragePathSet",
                    "featureSet",
                    "acdSkill",
                    "afinitiMode",
                    "aicoreMode",
                    "airoDnToAgMapping",
                    "skillGroup",
                    "megaGlobalConfiguration",
                    "megaLocation",
                    "megaReasonCode",
                    "megaAesServer",
                    "customGroup",
                    "vectorVariable",
                    "subTenantMapping",
                    "cor",
                    "dialPlanAnalysis",
                    "fac",
                    "deviceDataTemplate",
                    "megaRoutingRule",
                    "megaSipServer",
                    "megaLogoutReasonCode",
                    "megaTenant",
                    "megaTenantInfo",
                    "megaBox",
                    "megaTfnDid",
                    "megaBpo",
                    "megaDatasources",
                    "megaAttributes",
                    "capacityProfile",
                    "voiceMailServer",
                    "dialPlanCallType",
                    "adaptation",
                    "megaOfficeLocation",
                    "megaTerminalGroup",
                    "vuStats",
                    "vectorRoutingTable",
                    "megaCmsLink",
                    "megaCtiLink",
                    "omniProviders",
                    "trunkGroup",
                    "trunk",
                    "segmentationTable"
                  ]
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/RoutingEntity"
                    }
                  }
                },
                "400": {
                  "description": "Authentication header is missing"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "security": [
                {
                  "bearer": []
                }
              ],
              "tags": [
                "Routing Entity Authorization"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenant/{tenantId}/routing-entity/{user}/authorization": {
            "post": {
              "parameters": [
                {
                  "name": "RoutingEntityKeyDtoArray",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/RoutingEntityKeyDtoArray"
                  }
                },
                {
                  "type": "string",
                  "name": "user",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "201": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/RoutingEntityAuthorizedUser"
                    }
                  }
                },
                "404": {
                  "description": "Not found"
                }
              },
              "security": [
                {
                  "bearer": []
                }
              ],
              "tags": [
                "Routing Entity Authorization"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "user",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/RoutingEntityKeyDto"
                    }
                  }
                }
              },
              "security": [
                {
                  "bearer": []
                }
              ],
              "tags": [
                "Routing Entity Authorization"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenant/{tenantId}/routing-entity/{user}/authorization/replicate": {
            "post": {
              "parameters": [
                {
                  "name": "RoutingEntityAuthUserArrayDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/RoutingEntityAuthUserArrayDto"
                  }
                },
                {
                  "type": "string",
                  "name": "user",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/RoutingEntityAuthorizedUser"
                    }
                  }
                }
              },
              "security": [
                {
                  "bearer": []
                }
              ],
              "tags": [
                "Routing Entity Authorization"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenant/{tenantId}/routing-entity": {
            "get": {
              "summary": "Find all Routing Entity keys",
              "description": "Endpoint to retrieve keys of all Routing Entities.",
              "operationId": "FindAllRoutingEntityKeys",
              "parameters": [
                {
                  "type": "string",
                  "name": "type",
                  "required": false,
                  "in": "query",
                  "enum": [
                    "agent",
                    "agentGroup",
                    "callType",
                    "station",
                    "vector",
                    "dn",
                    "benchmark",
                    "lineOfBusiness",
                    "holiday",
                    "serviceHour",
                    "agentPermissionSet",
                    "switchDialplanScheme",
                    "mediaObjects",
                    "cwt",
                    "awt",
                    "serviceProvider",
                    "acd",
                    "acdConfig",
                    "coveragePathSet",
                    "featureSet",
                    "acdSkill",
                    "afinitiMode",
                    "aicoreMode",
                    "airoDnToAgMapping",
                    "skillGroup",
                    "megaGlobalConfiguration",
                    "megaLocation",
                    "megaReasonCode",
                    "megaAesServer",
                    "customGroup",
                    "vectorVariable",
                    "subTenantMapping",
                    "cor",
                    "dialPlanAnalysis",
                    "fac",
                    "deviceDataTemplate",
                    "megaRoutingRule",
                    "megaSipServer",
                    "megaLogoutReasonCode",
                    "megaTenant",
                    "megaTenantInfo",
                    "megaBox",
                    "megaTfnDid",
                    "megaBpo",
                    "megaDatasources",
                    "megaAttributes",
                    "capacityProfile",
                    "voiceMailServer",
                    "dialPlanCallType",
                    "adaptation",
                    "megaOfficeLocation",
                    "megaTerminalGroup",
                    "vuStats",
                    "vectorRoutingTable",
                    "megaCmsLink",
                    "megaCtiLink",
                    "omniProviders",
                    "trunkGroup",
                    "trunk",
                    "segmentationTable"
                  ]
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/RoutingEntityKeyDto"
                    }
                  }
                },
                "404": {
                  "description": "Not found"
                }
              },
              "security": [
                {
                  "bearer": []
                }
              ],
              "tags": [
                "Routing Entity"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenant/{tenantId}/routing-entity/{type}/lookup": {
            "post": {
              "summary": "Filter Routing Entity Lookups",
              "description": "Endpoint to apply conditions (keys and json data filter) to retrieve Routing Entity lookups.",
              "operationId": "FilterRoutingEntityLookups",
              "parameters": [
                {
                  "name": "RoutingEntityLookupPayloadDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/RoutingEntityLookupPayloadDto"
                  }
                },
                {
                  "type": "string",
                  "name": "type",
                  "required": true,
                  "in": "path",
                  "enum": [
                    "agent",
                    "agentGroup",
                    "callType",
                    "station",
                    "vector",
                    "dn",
                    "benchmark",
                    "lineOfBusiness",
                    "holiday",
                    "serviceHour",
                    "agentPermissionSet",
                    "switchDialplanScheme",
                    "mediaObjects",
                    "cwt",
                    "awt",
                    "serviceProvider",
                    "acd",
                    "acdConfig",
                    "coveragePathSet",
                    "featureSet",
                    "acdSkill",
                    "afinitiMode",
                    "aicoreMode",
                    "airoDnToAgMapping",
                    "skillGroup",
                    "megaGlobalConfiguration",
                    "megaLocation",
                    "megaReasonCode",
                    "megaAesServer",
                    "customGroup",
                    "vectorVariable",
                    "subTenantMapping",
                    "cor",
                    "dialPlanAnalysis",
                    "fac",
                    "deviceDataTemplate",
                    "megaRoutingRule",
                    "megaSipServer",
                    "megaLogoutReasonCode",
                    "megaTenant",
                    "megaTenantInfo",
                    "megaBox",
                    "megaTfnDid",
                    "megaBpo",
                    "megaDatasources",
                    "megaAttributes",
                    "capacityProfile",
                    "voiceMailServer",
                    "dialPlanCallType",
                    "adaptation",
                    "megaOfficeLocation",
                    "megaTerminalGroup",
                    "vuStats",
                    "vectorRoutingTable",
                    "megaCmsLink",
                    "megaCtiLink",
                    "omniProviders",
                    "trunkGroup",
                    "trunk",
                    "segmentationTable"
                  ]
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Routing Entity Lookups Retrieved",
                  "schema": {
                    "$ref": "#/definitions/RoutingEntityLookupResponse"
                  }
                },
                "404": {
                  "description": "Not found"
                }
              },
              "security": [
                {
                  "bearer": []
                }
              ],
              "tags": [
                "Routing Entity"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "type",
                  "required": true,
                  "in": "path",
                  "enum": [
                    "agent",
                    "agentGroup",
                    "callType",
                    "station",
                    "vector",
                    "dn",
                    "benchmark",
                    "lineOfBusiness",
                    "holiday",
                    "serviceHour",
                    "agentPermissionSet",
                    "switchDialplanScheme",
                    "mediaObjects",
                    "cwt",
                    "awt",
                    "serviceProvider",
                    "acd",
                    "acdConfig",
                    "coveragePathSet",
                    "featureSet",
                    "acdSkill",
                    "afinitiMode",
                    "aicoreMode",
                    "airoDnToAgMapping",
                    "skillGroup",
                    "megaGlobalConfiguration",
                    "megaLocation",
                    "megaReasonCode",
                    "megaAesServer",
                    "customGroup",
                    "vectorVariable",
                    "subTenantMapping",
                    "cor",
                    "dialPlanAnalysis",
                    "fac",
                    "deviceDataTemplate",
                    "megaRoutingRule",
                    "megaSipServer",
                    "megaLogoutReasonCode",
                    "megaTenant",
                    "megaTenantInfo",
                    "megaBox",
                    "megaTfnDid",
                    "megaBpo",
                    "megaDatasources",
                    "megaAttributes",
                    "capacityProfile",
                    "voiceMailServer",
                    "dialPlanCallType",
                    "adaptation",
                    "megaOfficeLocation",
                    "megaTerminalGroup",
                    "vuStats",
                    "vectorRoutingTable",
                    "megaCmsLink",
                    "megaCtiLink",
                    "omniProviders",
                    "trunkGroup",
                    "trunk",
                    "segmentationTable"
                  ]
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/RoutingEntityLookupResponse"
                  }
                },
                "404": {
                  "description": "Not found"
                }
              },
              "security": [
                {
                  "bearer": []
                }
              ],
              "tags": [
                "Routing Entity"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenant/{tenantId}/routing-entity/{type}/filter/linked": {
            "post": {
              "summary": "",
              "description": "Filter Routing Entity Record Keys against provided type (and keys), being used as lookup(s) in other records.",
              "parameters": [
                {
                  "name": "RoutingEntityKeys",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/RoutingEntityKeys"
                  }
                },
                {
                  "type": "string",
                  "name": "type",
                  "required": true,
                  "in": "path",
                  "enum": [
                    "agent",
                    "agentGroup",
                    "callType",
                    "station",
                    "vector",
                    "dn",
                    "benchmark",
                    "lineOfBusiness",
                    "holiday",
                    "serviceHour",
                    "agentPermissionSet",
                    "switchDialplanScheme",
                    "mediaObjects",
                    "cwt",
                    "awt",
                    "serviceProvider",
                    "acd",
                    "acdConfig",
                    "coveragePathSet",
                    "featureSet",
                    "acdSkill",
                    "afinitiMode",
                    "aicoreMode",
                    "airoDnToAgMapping",
                    "skillGroup",
                    "megaGlobalConfiguration",
                    "megaLocation",
                    "megaReasonCode",
                    "megaAesServer",
                    "customGroup",
                    "vectorVariable",
                    "subTenantMapping",
                    "cor",
                    "dialPlanAnalysis",
                    "fac",
                    "deviceDataTemplate",
                    "megaRoutingRule",
                    "megaSipServer",
                    "megaLogoutReasonCode",
                    "megaTenant",
                    "megaTenantInfo",
                    "megaBox",
                    "megaTfnDid",
                    "megaBpo",
                    "megaDatasources",
                    "megaAttributes",
                    "capacityProfile",
                    "voiceMailServer",
                    "dialPlanCallType",
                    "adaptation",
                    "megaOfficeLocation",
                    "megaTerminalGroup",
                    "vuStats",
                    "vectorRoutingTable",
                    "megaCmsLink",
                    "megaCtiLink",
                    "omniProviders",
                    "trunkGroup",
                    "trunk",
                    "segmentationTable"
                  ]
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Ok"
                },
                "400": {
                  "description": "Authentication header is missing"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "security": [
                {
                  "bearer": []
                }
              ],
              "tags": [
                "Routing Entity"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenant/{tenantId}/routing-entity/lookup-query": {
            "post": {
              "summary": "Routing Entities Retrieval by Lookups",
              "description": "Query routing entity records by routing entity lookup types and values.",
              "operationId": "queryRoutingEntitiesByLookup",
              "parameters": [
                {
                  "name": "RoutingEntityQueryByLookupDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/RoutingEntityQueryByLookupDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/RoutingEntity"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                },
                "501": {
                  "description": "App version Not Found"
                }
              },
              "security": [
                {
                  "bearer": []
                }
              ],
              "tags": [
                "Routing Entity - Beta"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenant/{tenantId}/routing-entity/{type}/resolve": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "type",
                  "required": true,
                  "in": "path",
                  "enum": [
                    "agent",
                    "agentGroup",
                    "callType",
                    "station",
                    "vector",
                    "dn",
                    "benchmark",
                    "lineOfBusiness",
                    "holiday",
                    "serviceHour",
                    "agentPermissionSet",
                    "switchDialplanScheme",
                    "mediaObjects",
                    "cwt",
                    "awt",
                    "serviceProvider",
                    "acd",
                    "acdConfig",
                    "coveragePathSet",
                    "featureSet",
                    "acdSkill",
                    "afinitiMode",
                    "aicoreMode",
                    "airoDnToAgMapping",
                    "skillGroup",
                    "megaGlobalConfiguration",
                    "megaLocation",
                    "megaReasonCode",
                    "megaAesServer",
                    "customGroup",
                    "vectorVariable",
                    "subTenantMapping",
                    "cor",
                    "dialPlanAnalysis",
                    "fac",
                    "deviceDataTemplate",
                    "megaRoutingRule",
                    "megaSipServer",
                    "megaLogoutReasonCode",
                    "megaTenant",
                    "megaTenantInfo",
                    "megaBox",
                    "megaTfnDid",
                    "megaBpo",
                    "megaDatasources",
                    "megaAttributes",
                    "capacityProfile",
                    "voiceMailServer",
                    "dialPlanCallType",
                    "adaptation",
                    "megaOfficeLocation",
                    "megaTerminalGroup",
                    "vuStats",
                    "vectorRoutingTable",
                    "megaCmsLink",
                    "megaCtiLink",
                    "omniProviders",
                    "trunkGroup",
                    "trunk",
                    "segmentationTable"
                  ]
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/RoutingEntity"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "security": [
                {
                  "bearer": []
                }
              ],
              "tags": [
                "Routing Entity"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenant/{tenantId}/routing-entity/{type}": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "type",
                  "required": true,
                  "in": "path",
                  "enum": [
                    "agent",
                    "agentGroup",
                    "callType",
                    "station",
                    "vector",
                    "dn",
                    "benchmark",
                    "lineOfBusiness",
                    "holiday",
                    "serviceHour",
                    "agentPermissionSet",
                    "switchDialplanScheme",
                    "mediaObjects",
                    "cwt",
                    "awt",
                    "serviceProvider",
                    "acd",
                    "acdConfig",
                    "coveragePathSet",
                    "featureSet",
                    "acdSkill",
                    "afinitiMode",
                    "aicoreMode",
                    "airoDnToAgMapping",
                    "skillGroup",
                    "megaGlobalConfiguration",
                    "megaLocation",
                    "megaReasonCode",
                    "megaAesServer",
                    "customGroup",
                    "vectorVariable",
                    "subTenantMapping",
                    "cor",
                    "dialPlanAnalysis",
                    "fac",
                    "deviceDataTemplate",
                    "megaRoutingRule",
                    "megaSipServer",
                    "megaLogoutReasonCode",
                    "megaTenant",
                    "megaTenantInfo",
                    "megaBox",
                    "megaTfnDid",
                    "megaBpo",
                    "megaDatasources",
                    "megaAttributes",
                    "capacityProfile",
                    "voiceMailServer",
                    "dialPlanCallType",
                    "adaptation",
                    "megaOfficeLocation",
                    "megaTerminalGroup",
                    "vuStats",
                    "vectorRoutingTable",
                    "megaCmsLink",
                    "megaCtiLink",
                    "omniProviders",
                    "trunkGroup",
                    "trunk",
                    "segmentationTable"
                  ]
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/RoutingEntity"
                    }
                  }
                },
                "404": {
                  "description": "Not found"
                }
              },
              "security": [
                {
                  "bearer": []
                }
              ],
              "tags": [
                "Routing Entity"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "post": {
              "parameters": [
                {
                  "name": "RoutingEntityPostDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/RoutingEntityPostDto"
                  }
                },
                {
                  "type": "string",
                  "name": "type",
                  "required": true,
                  "in": "path",
                  "enum": [
                    "agent",
                    "agentGroup",
                    "callType",
                    "station",
                    "vector",
                    "dn",
                    "benchmark",
                    "lineOfBusiness",
                    "holiday",
                    "serviceHour",
                    "agentPermissionSet",
                    "switchDialplanScheme",
                    "mediaObjects",
                    "cwt",
                    "awt",
                    "serviceProvider",
                    "acd",
                    "acdConfig",
                    "coveragePathSet",
                    "featureSet",
                    "acdSkill",
                    "afinitiMode",
                    "aicoreMode",
                    "airoDnToAgMapping",
                    "skillGroup",
                    "megaGlobalConfiguration",
                    "megaLocation",
                    "megaReasonCode",
                    "megaAesServer",
                    "customGroup",
                    "vectorVariable",
                    "subTenantMapping",
                    "cor",
                    "dialPlanAnalysis",
                    "fac",
                    "deviceDataTemplate",
                    "megaRoutingRule",
                    "megaSipServer",
                    "megaLogoutReasonCode",
                    "megaTenant",
                    "megaTenantInfo",
                    "megaBox",
                    "megaTfnDid",
                    "megaBpo",
                    "megaDatasources",
                    "megaAttributes",
                    "capacityProfile",
                    "voiceMailServer",
                    "dialPlanCallType",
                    "adaptation",
                    "megaOfficeLocation",
                    "megaTerminalGroup",
                    "vuStats",
                    "vectorRoutingTable",
                    "megaCmsLink",
                    "megaCtiLink",
                    "omniProviders",
                    "trunkGroup",
                    "trunk",
                    "segmentationTable"
                  ]
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "201": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/RoutingEntity"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "security": [
                {
                  "bearer": []
                }
              ],
              "tags": [
                "Routing Entity"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "patch": {
              "parameters": [
                {
                  "name": "RoutingEntityDtoArray",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/RoutingEntityDtoArray"
                  }
                },
                {
                  "type": "string",
                  "name": "type",
                  "required": true,
                  "in": "path",
                  "enum": [
                    "agent",
                    "agentGroup",
                    "callType",
                    "station",
                    "vector",
                    "dn",
                    "benchmark",
                    "lineOfBusiness",
                    "holiday",
                    "serviceHour",
                    "agentPermissionSet",
                    "switchDialplanScheme",
                    "mediaObjects",
                    "cwt",
                    "awt",
                    "serviceProvider",
                    "acd",
                    "acdConfig",
                    "coveragePathSet",
                    "featureSet",
                    "acdSkill",
                    "afinitiMode",
                    "aicoreMode",
                    "airoDnToAgMapping",
                    "skillGroup",
                    "megaGlobalConfiguration",
                    "megaLocation",
                    "megaReasonCode",
                    "megaAesServer",
                    "customGroup",
                    "vectorVariable",
                    "subTenantMapping",
                    "cor",
                    "dialPlanAnalysis",
                    "fac",
                    "deviceDataTemplate",
                    "megaRoutingRule",
                    "megaSipServer",
                    "megaLogoutReasonCode",
                    "megaTenant",
                    "megaTenantInfo",
                    "megaBox",
                    "megaTfnDid",
                    "megaBpo",
                    "megaDatasources",
                    "megaAttributes",
                    "capacityProfile",
                    "voiceMailServer",
                    "dialPlanCallType",
                    "adaptation",
                    "megaOfficeLocation",
                    "megaTerminalGroup",
                    "vuStats",
                    "vectorRoutingTable",
                    "megaCmsLink",
                    "megaCtiLink",
                    "omniProviders",
                    "trunkGroup",
                    "trunk",
                    "segmentationTable"
                  ]
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/RoutingEntity"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "security": [
                {
                  "bearer": []
                }
              ],
              "tags": [
                "Routing Entity"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "delete": {
              "parameters": [
                {
                  "type": "string",
                  "name": "type",
                  "required": true,
                  "in": "path",
                  "enum": [
                    "agent",
                    "agentGroup",
                    "callType",
                    "station",
                    "vector",
                    "dn",
                    "benchmark",
                    "lineOfBusiness",
                    "holiday",
                    "serviceHour",
                    "agentPermissionSet",
                    "switchDialplanScheme",
                    "mediaObjects",
                    "cwt",
                    "awt",
                    "serviceProvider",
                    "acd",
                    "acdConfig",
                    "coveragePathSet",
                    "featureSet",
                    "acdSkill",
                    "afinitiMode",
                    "aicoreMode",
                    "airoDnToAgMapping",
                    "skillGroup",
                    "megaGlobalConfiguration",
                    "megaLocation",
                    "megaReasonCode",
                    "megaAesServer",
                    "customGroup",
                    "vectorVariable",
                    "subTenantMapping",
                    "cor",
                    "dialPlanAnalysis",
                    "fac",
                    "deviceDataTemplate",
                    "megaRoutingRule",
                    "megaSipServer",
                    "megaLogoutReasonCode",
                    "megaTenant",
                    "megaTenantInfo",
                    "megaBox",
                    "megaTfnDid",
                    "megaBpo",
                    "megaDatasources",
                    "megaAttributes",
                    "capacityProfile",
                    "voiceMailServer",
                    "dialPlanCallType",
                    "adaptation",
                    "megaOfficeLocation",
                    "megaTerminalGroup",
                    "vuStats",
                    "vectorRoutingTable",
                    "megaCmsLink",
                    "megaCtiLink",
                    "omniProviders",
                    "trunkGroup",
                    "trunk",
                    "segmentationTable"
                  ]
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Routing entity successfully deleted"
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "security": [
                {
                  "bearer": []
                }
              ],
              "tags": [
                "Routing Entity"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "put": {
              "summary": "Bulk Update Routing Entities by JSON Path ",
              "description": "Bulk update routing entity records by key, JSON path, and value",
              "parameters": [
                {
                  "name": "BulkUpdateByPathDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/BulkUpdateByPathDto"
                  }
                },
                {
                  "type": "string",
                  "name": "type",
                  "required": true,
                  "in": "path",
                  "enum": [
                    "agent",
                    "agentGroup",
                    "callType",
                    "station",
                    "vector",
                    "dn",
                    "benchmark",
                    "lineOfBusiness",
                    "holiday",
                    "serviceHour",
                    "agentPermissionSet",
                    "switchDialplanScheme",
                    "mediaObjects",
                    "cwt",
                    "awt",
                    "serviceProvider",
                    "acd",
                    "acdConfig",
                    "coveragePathSet",
                    "featureSet",
                    "acdSkill",
                    "afinitiMode",
                    "aicoreMode",
                    "airoDnToAgMapping",
                    "skillGroup",
                    "megaGlobalConfiguration",
                    "megaLocation",
                    "megaReasonCode",
                    "megaAesServer",
                    "customGroup",
                    "vectorVariable",
                    "subTenantMapping",
                    "cor",
                    "dialPlanAnalysis",
                    "fac",
                    "deviceDataTemplate",
                    "megaRoutingRule",
                    "megaSipServer",
                    "megaLogoutReasonCode",
                    "megaTenant",
                    "megaTenantInfo",
                    "megaBox",
                    "megaTfnDid",
                    "megaBpo",
                    "megaDatasources",
                    "megaAttributes",
                    "capacityProfile",
                    "voiceMailServer",
                    "dialPlanCallType",
                    "adaptation",
                    "megaOfficeLocation",
                    "megaTerminalGroup",
                    "vuStats",
                    "vectorRoutingTable",
                    "megaCmsLink",
                    "megaCtiLink",
                    "omniProviders",
                    "trunkGroup",
                    "trunk",
                    "segmentationTable"
                  ]
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Ok"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "security": [
                {
                  "bearer": []
                }
              ],
              "tags": [
                "Routing Entity"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenant/{tenantId}/routing-entity/{type}/{key}": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "key",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "type",
                  "required": true,
                  "in": "path",
                  "enum": [
                    "agent",
                    "agentGroup",
                    "callType",
                    "station",
                    "vector",
                    "dn",
                    "benchmark",
                    "lineOfBusiness",
                    "holiday",
                    "serviceHour",
                    "agentPermissionSet",
                    "switchDialplanScheme",
                    "mediaObjects",
                    "cwt",
                    "awt",
                    "serviceProvider",
                    "acd",
                    "acdConfig",
                    "coveragePathSet",
                    "featureSet",
                    "acdSkill",
                    "afinitiMode",
                    "aicoreMode",
                    "airoDnToAgMapping",
                    "skillGroup",
                    "megaGlobalConfiguration",
                    "megaLocation",
                    "megaReasonCode",
                    "megaAesServer",
                    "customGroup",
                    "vectorVariable",
                    "subTenantMapping",
                    "cor",
                    "dialPlanAnalysis",
                    "fac",
                    "deviceDataTemplate",
                    "megaRoutingRule",
                    "megaSipServer",
                    "megaLogoutReasonCode",
                    "megaTenant",
                    "megaTenantInfo",
                    "megaBox",
                    "megaTfnDid",
                    "megaBpo",
                    "megaDatasources",
                    "megaAttributes",
                    "capacityProfile",
                    "voiceMailServer",
                    "dialPlanCallType",
                    "adaptation",
                    "megaOfficeLocation",
                    "megaTerminalGroup",
                    "vuStats",
                    "vectorRoutingTable",
                    "megaCmsLink",
                    "megaCtiLink",
                    "omniProviders",
                    "trunkGroup",
                    "trunk",
                    "segmentationTable"
                  ]
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/RoutingEntity"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "security": [
                {
                  "bearer": []
                }
              ],
              "tags": [
                "Routing Entity"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "put": {
              "summary": "Clone Routing Entity",
              "description": "Endpoint to clone a Routing Entity instance with a new key.",
              "operationId": "CloneRoutingEntity",
              "parameters": [
                {
                  "type": "string",
                  "name": "key",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "type",
                  "required": true,
                  "in": "path",
                  "enum": [
                    "agent",
                    "agentGroup",
                    "callType",
                    "station",
                    "vector",
                    "dn",
                    "benchmark",
                    "lineOfBusiness",
                    "holiday",
                    "serviceHour",
                    "agentPermissionSet",
                    "switchDialplanScheme",
                    "mediaObjects",
                    "cwt",
                    "awt",
                    "serviceProvider",
                    "acd",
                    "acdConfig",
                    "coveragePathSet",
                    "featureSet",
                    "acdSkill",
                    "afinitiMode",
                    "aicoreMode",
                    "airoDnToAgMapping",
                    "skillGroup",
                    "megaGlobalConfiguration",
                    "megaLocation",
                    "megaReasonCode",
                    "megaAesServer",
                    "customGroup",
                    "vectorVariable",
                    "subTenantMapping",
                    "cor",
                    "dialPlanAnalysis",
                    "fac",
                    "deviceDataTemplate",
                    "megaRoutingRule",
                    "megaSipServer",
                    "megaLogoutReasonCode",
                    "megaTenant",
                    "megaTenantInfo",
                    "megaBox",
                    "megaTfnDid",
                    "megaBpo",
                    "megaDatasources",
                    "megaAttributes",
                    "capacityProfile",
                    "voiceMailServer",
                    "dialPlanCallType",
                    "adaptation",
                    "megaOfficeLocation",
                    "megaTerminalGroup",
                    "vuStats",
                    "vectorRoutingTable",
                    "megaCmsLink",
                    "megaCtiLink",
                    "omniProviders",
                    "trunkGroup",
                    "trunk",
                    "segmentationTable"
                  ]
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/RoutingEntity"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "security": [
                {
                  "bearer": []
                }
              ],
              "tags": [
                "Routing Entity"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "delete": {
              "parameters": [
                {
                  "type": "string",
                  "name": "key",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "type",
                  "required": true,
                  "in": "path",
                  "enum": [
                    "agent",
                    "agentGroup",
                    "callType",
                    "station",
                    "vector",
                    "dn",
                    "benchmark",
                    "lineOfBusiness",
                    "holiday",
                    "serviceHour",
                    "agentPermissionSet",
                    "switchDialplanScheme",
                    "mediaObjects",
                    "cwt",
                    "awt",
                    "serviceProvider",
                    "acd",
                    "acdConfig",
                    "coveragePathSet",
                    "featureSet",
                    "acdSkill",
                    "afinitiMode",
                    "aicoreMode",
                    "airoDnToAgMapping",
                    "skillGroup",
                    "megaGlobalConfiguration",
                    "megaLocation",
                    "megaReasonCode",
                    "megaAesServer",
                    "customGroup",
                    "vectorVariable",
                    "subTenantMapping",
                    "cor",
                    "dialPlanAnalysis",
                    "fac",
                    "deviceDataTemplate",
                    "megaRoutingRule",
                    "megaSipServer",
                    "megaLogoutReasonCode",
                    "megaTenant",
                    "megaTenantInfo",
                    "megaBox",
                    "megaTfnDid",
                    "megaBpo",
                    "megaDatasources",
                    "megaAttributes",
                    "capacityProfile",
                    "voiceMailServer",
                    "dialPlanCallType",
                    "adaptation",
                    "megaOfficeLocation",
                    "megaTerminalGroup",
                    "vuStats",
                    "vectorRoutingTable",
                    "megaCmsLink",
                    "megaCtiLink",
                    "omniProviders",
                    "trunkGroup",
                    "trunk",
                    "segmentationTable"
                  ]
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Routing entity successfully deleted"
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "security": [
                {
                  "bearer": []
                }
              ],
              "tags": [
                "Routing Entity"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenant/{tenantId}/routing-entity/{type}/bulk": {
            "delete": {
              "summary": "Bulk Delete Routing Entities",
              "description": "Endpoint to bulk delete Routing Entities by keys.",
              "operationId": "BulkDeleteRoutingEntities",
              "parameters": [
                {
                  "name": "RoutingEntityKeyBulkDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/RoutingEntityKeyBulkDto"
                  }
                },
                {
                  "type": "string",
                  "name": "type",
                  "required": true,
                  "in": "path",
                  "enum": [
                    "agent",
                    "agentGroup",
                    "callType",
                    "station",
                    "vector",
                    "dn",
                    "benchmark",
                    "lineOfBusiness",
                    "holiday",
                    "serviceHour",
                    "agentPermissionSet",
                    "switchDialplanScheme",
                    "mediaObjects",
                    "cwt",
                    "awt",
                    "serviceProvider",
                    "acd",
                    "acdConfig",
                    "coveragePathSet",
                    "featureSet",
                    "acdSkill",
                    "afinitiMode",
                    "aicoreMode",
                    "airoDnToAgMapping",
                    "skillGroup",
                    "megaGlobalConfiguration",
                    "megaLocation",
                    "megaReasonCode",
                    "megaAesServer",
                    "customGroup",
                    "vectorVariable",
                    "subTenantMapping",
                    "cor",
                    "dialPlanAnalysis",
                    "fac",
                    "deviceDataTemplate",
                    "megaRoutingRule",
                    "megaSipServer",
                    "megaLogoutReasonCode",
                    "megaTenant",
                    "megaTenantInfo",
                    "megaBox",
                    "megaTfnDid",
                    "megaBpo",
                    "megaDatasources",
                    "megaAttributes",
                    "capacityProfile",
                    "voiceMailServer",
                    "dialPlanCallType",
                    "adaptation",
                    "megaOfficeLocation",
                    "megaTerminalGroup",
                    "vuStats",
                    "vectorRoutingTable",
                    "megaCmsLink",
                    "megaCtiLink",
                    "omniProviders",
                    "trunkGroup",
                    "trunk",
                    "segmentationTable"
                  ]
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Routing entities successfully deleted"
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "security": [
                {
                  "bearer": []
                }
              ],
              "tags": [
                "Routing Entity"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenant/{tenantId}/routing-entity/{type}/query": {
            "post": {
              "parameters": [
                {
                  "name": "RoutingEntityQueryDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/RoutingEntityQueryDto"
                  }
                },
                {
                  "type": "string",
                  "name": "type",
                  "required": true,
                  "in": "path",
                  "enum": [
                    "agent",
                    "agentGroup",
                    "callType",
                    "station",
                    "vector",
                    "dn",
                    "benchmark",
                    "lineOfBusiness",
                    "holiday",
                    "serviceHour",
                    "agentPermissionSet",
                    "switchDialplanScheme",
                    "mediaObjects",
                    "cwt",
                    "awt",
                    "serviceProvider",
                    "acd",
                    "acdConfig",
                    "coveragePathSet",
                    "featureSet",
                    "acdSkill",
                    "afinitiMode",
                    "aicoreMode",
                    "airoDnToAgMapping",
                    "skillGroup",
                    "megaGlobalConfiguration",
                    "megaLocation",
                    "megaReasonCode",
                    "megaAesServer",
                    "customGroup",
                    "vectorVariable",
                    "subTenantMapping",
                    "cor",
                    "dialPlanAnalysis",
                    "fac",
                    "deviceDataTemplate",
                    "megaRoutingRule",
                    "megaSipServer",
                    "megaLogoutReasonCode",
                    "megaTenant",
                    "megaTenantInfo",
                    "megaBox",
                    "megaTfnDid",
                    "megaBpo",
                    "megaDatasources",
                    "megaAttributes",
                    "capacityProfile",
                    "voiceMailServer",
                    "dialPlanCallType",
                    "adaptation",
                    "megaOfficeLocation",
                    "megaTerminalGroup",
                    "vuStats",
                    "vectorRoutingTable",
                    "megaCmsLink",
                    "megaCtiLink",
                    "omniProviders",
                    "trunkGroup",
                    "trunk",
                    "segmentationTable"
                  ]
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/RoutingEntity"
                    }
                  }
                },
                "400": {
                  "description": "Authentication header is missing"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "security": [
                {
                  "bearer": []
                }
              ],
              "tags": [
                "Routing Entity"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenant/{tenantId}/routing-entity/{type}/pg-query": {
            "post": {
              "parameters": [
                {
                  "name": "RoutingEntityQueryDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/RoutingEntityQueryDto"
                  }
                },
                {
                  "type": "string",
                  "name": "type",
                  "required": true,
                  "in": "path",
                  "enum": [
                    "agent",
                    "agentGroup",
                    "callType",
                    "station",
                    "vector",
                    "dn",
                    "benchmark",
                    "lineOfBusiness",
                    "holiday",
                    "serviceHour",
                    "agentPermissionSet",
                    "switchDialplanScheme",
                    "mediaObjects",
                    "cwt",
                    "awt",
                    "serviceProvider",
                    "acd",
                    "acdConfig",
                    "coveragePathSet",
                    "featureSet",
                    "acdSkill",
                    "afinitiMode",
                    "aicoreMode",
                    "airoDnToAgMapping",
                    "skillGroup",
                    "megaGlobalConfiguration",
                    "megaLocation",
                    "megaReasonCode",
                    "megaAesServer",
                    "customGroup",
                    "vectorVariable",
                    "subTenantMapping",
                    "cor",
                    "dialPlanAnalysis",
                    "fac",
                    "deviceDataTemplate",
                    "megaRoutingRule",
                    "megaSipServer",
                    "megaLogoutReasonCode",
                    "megaTenant",
                    "megaTenantInfo",
                    "megaBox",
                    "megaTfnDid",
                    "megaBpo",
                    "megaDatasources",
                    "megaAttributes",
                    "capacityProfile",
                    "voiceMailServer",
                    "dialPlanCallType",
                    "adaptation",
                    "megaOfficeLocation",
                    "megaTerminalGroup",
                    "vuStats",
                    "vectorRoutingTable",
                    "megaCmsLink",
                    "megaCtiLink",
                    "omniProviders",
                    "trunkGroup",
                    "trunk",
                    "segmentationTable"
                  ]
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/RoutingEntity"
                    }
                  }
                },
                "400": {
                  "description": "Authentication header is missing"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "security": [
                {
                  "bearer": []
                }
              ],
              "tags": [
                "Routing Entity - Beta"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenant/{tenantId}/routing-entity/{type}/{key}/data*": {
            "get": {
              "summary": "",
              "description": "Swagger does not support wild-card routes. \nPlease use another tool to test this route",
              "parameters": [
                {
                  "type": "string",
                  "name": "key",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "type",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Ok"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "security": [
                {
                  "bearer": []
                }
              ],
              "tags": [
                "Routing Entity"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "put": {
              "summary": "",
              "description": "Swagger does not support wild-card routes. \nPlease use another tool to test this route",
              "parameters": [
                {
                  "name": "UpdateDataValueDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/UpdateDataValueDto"
                  }
                },
                {
                  "type": "string",
                  "name": "key",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "type",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Ok"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "security": [
                {
                  "bearer": []
                }
              ],
              "tags": [
                "Routing Entity"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/v2/tenant/{tenantId}/routing-entity/{type}": {
            "get": {
              "parameters": [
                {
                  "type": "number",
                  "name": "_page",
                  "required": false,
                  "in": "query",
                  "description": "The page number to fetch. Must be 1 or greater."
                },
                {
                  "type": "number",
                  "name": "_limit",
                  "required": false,
                  "in": "query",
                  "description": "The number of items in a single page. Must be between 10 and 100,000. Use smaller limit when fetching entities with large amount of data per record."
                },
                {
                  "type": "boolean",
                  "name": "_withDates",
                  "required": false,
                  "in": "query",
                  "description": "Set true to return create date and last update date for each entity item"
                },
                {
                  "type": "boolean",
                  "name": "_withTotals",
                  "required": false,
                  "in": "query",
                  "description": "Set true to also return total counts. Totals require additional database queries and can degrade performance."
                },
                {
                  "type": "string",
                  "name": "type",
                  "required": true,
                  "in": "path",
                  "enum": [
                    "agent",
                    "agentGroup",
                    "callType",
                    "station",
                    "vector",
                    "dn",
                    "benchmark",
                    "lineOfBusiness",
                    "holiday",
                    "serviceHour",
                    "agentPermissionSet",
                    "switchDialplanScheme",
                    "mediaObjects",
                    "cwt",
                    "awt",
                    "serviceProvider",
                    "acd",
                    "acdConfig",
                    "coveragePathSet",
                    "featureSet",
                    "acdSkill",
                    "afinitiMode",
                    "aicoreMode",
                    "airoDnToAgMapping",
                    "skillGroup",
                    "megaGlobalConfiguration",
                    "megaLocation",
                    "megaReasonCode",
                    "megaAesServer",
                    "customGroup",
                    "vectorVariable",
                    "subTenantMapping",
                    "cor",
                    "dialPlanAnalysis",
                    "fac",
                    "deviceDataTemplate",
                    "megaRoutingRule",
                    "megaSipServer",
                    "megaLogoutReasonCode",
                    "megaTenant",
                    "megaTenantInfo",
                    "megaBox",
                    "megaTfnDid",
                    "megaBpo",
                    "megaDatasources",
                    "megaAttributes",
                    "capacityProfile",
                    "voiceMailServer",
                    "dialPlanCallType",
                    "adaptation",
                    "megaOfficeLocation",
                    "megaTerminalGroup",
                    "vuStats",
                    "vectorRoutingTable",
                    "megaCmsLink",
                    "megaCtiLink",
                    "omniProviders",
                    "trunkGroup",
                    "trunk",
                    "segmentationTable"
                  ]
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/RoutingEntityPaginatedResponseDto"
                  }
                },
                "404": {
                  "description": "Not found"
                }
              },
              "security": [
                {
                  "bearer": []
                }
              ],
              "tags": [
                "Routing Entity"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants": {
            "get": {
              "summary": "Get Routing Entities Schema Tenants",
              "description": "Returns tenant ids against existing routing-entity schema",
              "operationId": "getRoutingEntitiesTenants",
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              },
              "tags": [
                "Tenants"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenant/{tenantId}/set": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Set"
                    }
                  }
                }
              },
              "tags": [
                "Set"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "post": {
              "parameters": [
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                },
                {
                  "name": "CreateSetDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/CreateSetDto"
                  }
                }
              ],
              "responses": {
                "201": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Set"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                },
                "409": {
                  "description": "Conflict - Set already exists"
                }
              },
              "tags": [
                "Set"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenant/{tenantId}/set/{setId}": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "setId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Set"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Set"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "put": {
              "parameters": [
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                },
                {
                  "name": "UpdateSetDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/UpdateSetDto"
                  }
                },
                {
                  "type": "string",
                  "name": "setId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Set"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Set"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "delete": {
              "parameters": [
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "setId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Set successfully deleted"
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Set"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenant/{tenantId}/set/{setId}/activate": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "setId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Set successfully activated"
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Set"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/{tenantId}/export": {
            "post": {
              "parameters": [
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                },
                {
                  "name": "ExportDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/ExportDto"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/ExportFileDto"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                },
                "501": {
                  "description": "App version Not Found"
                }
              },
              "tags": [
                "Import Export"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/{tenantId}/import": {
            "post": {
              "parameters": [
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                },
                {
                  "name": "ExportFileDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/ExportFileDto"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/ExportFileDto"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                },
                "501": {
                  "description": "App version Not Found"
                }
              },
              "tags": [
                "Import Export"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/{tenantId}/export/re": {
            "get": {
              "summary": "Routing Entities and Lookups Export",
              "description": "Export routing entity records against selected routing entity types, including associated routing entity lookup records and schema.",
              "operationId": "exportRoutingEntitiesAndLookupEntities",
              "parameters": [
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/RoutingEntityExportFileDto"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                },
                "501": {
                  "description": "App version Not Found"
                }
              },
              "tags": [
                "Import Export"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/{tenantId}/export/routing-entity": {
            "get": {
              "summary": "Routing Entities and Lookups Export By Type Query Array",
              "description": "Export routing entity records against selected routing entity types, including associated routing entity lookup records and schema.",
              "operationId": "exportRoutingEntitiesAndLookupEntitiesByTypeQueryArray",
              "parameters": [
                {
                  "type": "array",
                  "name": "types",
                  "required": true,
                  "in": "query",
                  "enum": [
                    "agent",
                    "agentGroup",
                    "callType",
                    "station",
                    "vector",
                    "dn",
                    "benchmark",
                    "lineOfBusiness",
                    "holiday",
                    "serviceHour",
                    "agentPermissionSet",
                    "switchDialplanScheme",
                    "mediaObjects",
                    "cwt",
                    "awt",
                    "serviceProvider",
                    "acd",
                    "acdConfig",
                    "coveragePathSet",
                    "featureSet",
                    "acdSkill",
                    "afinitiMode",
                    "aicoreMode",
                    "airoDnToAgMapping",
                    "skillGroup",
                    "megaGlobalConfiguration",
                    "megaLocation",
                    "megaReasonCode",
                    "megaAesServer",
                    "customGroup",
                    "vectorVariable",
                    "subTenantMapping",
                    "cor",
                    "dialPlanAnalysis",
                    "fac",
                    "deviceDataTemplate",
                    "megaRoutingRule",
                    "megaSipServer",
                    "megaLogoutReasonCode",
                    "megaTenant",
                    "megaTenantInfo",
                    "megaBox",
                    "megaTfnDid",
                    "megaBpo",
                    "megaDatasources",
                    "megaAttributes",
                    "capacityProfile",
                    "voiceMailServer",
                    "dialPlanCallType",
                    "adaptation",
                    "megaOfficeLocation",
                    "megaTerminalGroup",
                    "vuStats",
                    "vectorRoutingTable",
                    "megaCmsLink",
                    "megaCtiLink",
                    "omniProviders",
                    "trunkGroup",
                    "trunk",
                    "segmentationTable"
                  ],
                  "items": {
                    "type": "String",
                    "enum": [
                      "agent",
                      "agentGroup",
                      "callType",
                      "station",
                      "vector",
                      "dn",
                      "benchmark",
                      "lineOfBusiness",
                      "holiday",
                      "serviceHour",
                      "agentPermissionSet",
                      "switchDialplanScheme",
                      "mediaObjects",
                      "cwt",
                      "awt",
                      "serviceProvider",
                      "acd",
                      "acdConfig",
                      "coveragePathSet",
                      "featureSet",
                      "acdSkill",
                      "afinitiMode",
                      "aicoreMode",
                      "airoDnToAgMapping",
                      "skillGroup",
                      "megaGlobalConfiguration",
                      "megaLocation",
                      "megaReasonCode",
                      "megaAesServer",
                      "customGroup",
                      "vectorVariable",
                      "subTenantMapping",
                      "cor",
                      "dialPlanAnalysis",
                      "fac",
                      "deviceDataTemplate",
                      "megaRoutingRule",
                      "megaSipServer",
                      "megaLogoutReasonCode",
                      "megaTenant",
                      "megaTenantInfo",
                      "megaBox",
                      "megaTfnDid",
                      "megaBpo",
                      "megaDatasources",
                      "megaAttributes",
                      "capacityProfile",
                      "voiceMailServer",
                      "dialPlanCallType",
                      "adaptation",
                      "megaOfficeLocation",
                      "megaTerminalGroup",
                      "vuStats",
                      "vectorRoutingTable",
                      "megaCmsLink",
                      "megaCtiLink",
                      "omniProviders",
                      "trunkGroup",
                      "trunk",
                      "segmentationTable"
                    ]
                  },
                  "collectionFormat": "multi"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/RoutingEntityExportFileDto"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                },
                "501": {
                  "description": "App version Not Found"
                }
              },
              "tags": [
                "Import Export"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/{tenantId}/export/re/bylookup": {
            "post": {
              "summary": "Routing Entities Export by Lookups",
              "description": "Export routing entity records and schema against selected routing entity types and lookup filters, including associated routing entity lookup records and schema.",
              "operationId": "exportRoutingEntitiesByLookupFilters",
              "parameters": [
                {
                  "name": "RoutingEntityExportByLookupQueryDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/RoutingEntityExportByLookupQueryDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/RoutingEntityExportFileDto"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                },
                "501": {
                  "description": "App version Not Found"
                }
              },
              "tags": [
                "Import Export"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/{tenantId}/import/re": {
            "post": {
              "parameters": [
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                },
                {
                  "name": "RoutingEntityExportFileDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/RoutingEntityExportFileDto"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/ExportFileDto"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                },
                "501": {
                  "description": "App version Not Found"
                }
              },
              "tags": [
                "Import Export"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenant/source/{sourceTenant}/target/{targetTenant}": {
            "put": {
              "summary": "Copy Tenant Data",
              "description": "Endpoint to copy all data of source tenant to target tenant within the same config server. Note: All target tenant data and schemas will be replaced.",
              "operationId": "CopyTenant",
              "parameters": [
                {
                  "type": "string",
                  "name": "targetTenant",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "sourceTenant",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Copied all Component and RE data from tenant sourceTenant to tenant targetTenant"
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Import Export"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenant/{tenantId}/snapshot": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Snapshot"
                    }
                  }
                }
              },
              "tags": [
                "Snapshot"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenant/{tenantId}/snapshot/create": {
            "put": {
              "parameters": [
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Snapshot"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Snapshot"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenant/{tenantId}/snapshot/restore/{snapshotName}": {
            "put": {
              "parameters": [
                {
                  "type": "string",
                  "name": "snapshotName",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Restored snapshot with name snapshotName of tenant tenantId"
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Snapshot"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenant/{tenantId}/snapshot/restoreByTimeRange/start/{startTime}/end/{endTime}": {
            "put": {
              "summary": "Restore snapshot by date range",
              "description": "Endpoint to restore snapshot present between specific start/end time. Note: If multiple snapshots are found between specified date range, most recent one will be picked for restoration.\n Start and end time should be provided in ISO format without time zone e.g YYYY-MM-DDTHH:mm:ssZ",
              "operationId": "RestoreSnapshotByDateRange",
              "parameters": [
                {
                  "type": "string",
                  "name": "endTime",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "startTime",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Restored snapshot with name snapshotName of tenant tenantId"
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Snapshot"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenant/{tenantId}/history/component": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/ComponentLog"
                    }
                  }
                }
              },
              "tags": [
                "History"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenant/{tenantId}/history/component/{componentId}": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "componentId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/ComponentLog"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                }
              },
              "tags": [
                "History"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenant/{tenantId}/history/schema": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/SchemaLog"
                    }
                  }
                }
              },
              "tags": [
                "History"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenant/{tenantId}/history/schema/{schemaId}": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "schemaId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/SchemaLog"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                }
              },
              "tags": [
                "History"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenant/{tenantId}/history/configuration": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/ConfigurationLog"
                    }
                  }
                }
              },
              "tags": [
                "History"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenant/{tenantId}/history/configuration/{configurationId}": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "configurationId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/ConfigurationLog"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                }
              },
              "tags": [
                "History"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenant/{tenantId}/history/routingEntitySchema": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/RoutingEntitySchemaLog"
                    }
                  }
                }
              },
              "tags": [
                "History"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenant/{tenantId}/history/routingEntitySchema/{type}": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "type",
                  "required": true,
                  "in": "path",
                  "enum": [
                    "agent",
                    "agentGroup",
                    "callType",
                    "station",
                    "vector",
                    "dn",
                    "benchmark",
                    "lineOfBusiness",
                    "holiday",
                    "serviceHour",
                    "agentPermissionSet",
                    "switchDialplanScheme",
                    "mediaObjects",
                    "cwt",
                    "awt",
                    "serviceProvider",
                    "acd",
                    "acdConfig",
                    "coveragePathSet",
                    "featureSet",
                    "acdSkill",
                    "afinitiMode",
                    "aicoreMode",
                    "airoDnToAgMapping",
                    "skillGroup",
                    "megaGlobalConfiguration",
                    "megaLocation",
                    "megaReasonCode",
                    "megaAesServer",
                    "customGroup",
                    "vectorVariable",
                    "subTenantMapping",
                    "cor",
                    "dialPlanAnalysis",
                    "fac",
                    "deviceDataTemplate",
                    "megaRoutingRule",
                    "megaSipServer",
                    "megaLogoutReasonCode",
                    "megaTenant",
                    "megaTenantInfo",
                    "megaBox",
                    "megaTfnDid",
                    "megaBpo",
                    "megaDatasources",
                    "megaAttributes",
                    "capacityProfile",
                    "voiceMailServer",
                    "dialPlanCallType",
                    "adaptation",
                    "megaOfficeLocation",
                    "megaTerminalGroup",
                    "vuStats",
                    "vectorRoutingTable",
                    "megaCmsLink",
                    "megaCtiLink",
                    "omniProviders",
                    "trunkGroup",
                    "trunk",
                    "segmentationTable"
                  ]
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/RoutingEntitySchemaLog"
                    }
                  }
                }
              },
              "tags": [
                "History"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenant/{tenantId}/history/routingEntity": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/RoutingEntityLog"
                    }
                  }
                }
              },
              "tags": [
                "History"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenant/{tenantId}/history/routingEntity/{type}": {
            "get": {
              "summary": "Retrieve history of all changes in entity",
              "description": "Returns the list of data-modification operations, in ascending order, performed on the specified entity type. By default all records will be returned. This can be excessive for large entities. Use the startDate, endDate to filter the returned history by date and the operations parameter to return only the required type of data-modification (i.e. CREATED, UPDATED, or DELETED).",
              "parameters": [
                {
                  "type": "string",
                  "name": "startDate",
                  "required": false,
                  "in": "query",
                  "description": "Start date in YYYY-MM-DD format"
                },
                {
                  "type": "string",
                  "name": "endDate",
                  "required": false,
                  "in": "query",
                  "description": "End date in YYYY-MM-DD format"
                },
                {
                  "type": "array",
                  "name": "operations",
                  "required": false,
                  "in": "query",
                  "description": "Comma-separated list of operations for which to return audit records. Valid operations are: CREATED, UPDATED, DELETED. If this is empty then audit log of all operations are returned.",
                  "items": {},
                  "collectionFormat": "csv"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "type",
                  "required": true,
                  "in": "path",
                  "enum": [
                    "agent",
                    "agentGroup",
                    "callType",
                    "station",
                    "vector",
                    "dn",
                    "benchmark",
                    "lineOfBusiness",
                    "holiday",
                    "serviceHour",
                    "agentPermissionSet",
                    "switchDialplanScheme",
                    "mediaObjects",
                    "cwt",
                    "awt",
                    "serviceProvider",
                    "acd",
                    "acdConfig",
                    "coveragePathSet",
                    "featureSet",
                    "acdSkill",
                    "afinitiMode",
                    "aicoreMode",
                    "airoDnToAgMapping",
                    "skillGroup",
                    "megaGlobalConfiguration",
                    "megaLocation",
                    "megaReasonCode",
                    "megaAesServer",
                    "customGroup",
                    "vectorVariable",
                    "subTenantMapping",
                    "cor",
                    "dialPlanAnalysis",
                    "fac",
                    "deviceDataTemplate",
                    "megaRoutingRule",
                    "megaSipServer",
                    "megaLogoutReasonCode",
                    "megaTenant",
                    "megaTenantInfo",
                    "megaBox",
                    "megaTfnDid",
                    "megaBpo",
                    "megaDatasources",
                    "megaAttributes",
                    "capacityProfile",
                    "voiceMailServer",
                    "dialPlanCallType",
                    "adaptation",
                    "megaOfficeLocation",
                    "megaTerminalGroup",
                    "vuStats",
                    "vectorRoutingTable",
                    "megaCmsLink",
                    "megaCtiLink",
                    "omniProviders",
                    "trunkGroup",
                    "trunk",
                    "segmentationTable"
                  ]
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/RoutingEntityLog"
                    }
                  }
                }
              },
              "tags": [
                "History"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenant/{tenantId}/history/routingEntity/{type}/{key}": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "key",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "type",
                  "required": true,
                  "in": "path",
                  "enum": [
                    "agent",
                    "agentGroup",
                    "callType",
                    "station",
                    "vector",
                    "dn",
                    "benchmark",
                    "lineOfBusiness",
                    "holiday",
                    "serviceHour",
                    "agentPermissionSet",
                    "switchDialplanScheme",
                    "mediaObjects",
                    "cwt",
                    "awt",
                    "serviceProvider",
                    "acd",
                    "acdConfig",
                    "coveragePathSet",
                    "featureSet",
                    "acdSkill",
                    "afinitiMode",
                    "aicoreMode",
                    "airoDnToAgMapping",
                    "skillGroup",
                    "megaGlobalConfiguration",
                    "megaLocation",
                    "megaReasonCode",
                    "megaAesServer",
                    "customGroup",
                    "vectorVariable",
                    "subTenantMapping",
                    "cor",
                    "dialPlanAnalysis",
                    "fac",
                    "deviceDataTemplate",
                    "megaRoutingRule",
                    "megaSipServer",
                    "megaLogoutReasonCode",
                    "megaTenant",
                    "megaTenantInfo",
                    "megaBox",
                    "megaTfnDid",
                    "megaBpo",
                    "megaDatasources",
                    "megaAttributes",
                    "capacityProfile",
                    "voiceMailServer",
                    "dialPlanCallType",
                    "adaptation",
                    "megaOfficeLocation",
                    "megaTerminalGroup",
                    "vuStats",
                    "vectorRoutingTable",
                    "megaCmsLink",
                    "megaCtiLink",
                    "omniProviders",
                    "trunkGroup",
                    "trunk",
                    "segmentationTable"
                  ]
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/RoutingEntityLog"
                    }
                  }
                }
              },
              "tags": [
                "History"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/agentInfo": {
            "get": {
              "summary": "Get all Agent Info(s)",
              "description": "Endpoint to retrieve all Agent Info(s).",
              "operationId": "GetAgentInfos",
              "parameters": [],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/AgentInfo"
                    }
                  }
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "post": {
              "summary": "Create Agent Info(s)",
              "description": "Endpoint to create Agent Info(s).",
              "operationId": "CreateAgentInfo",
              "parameters": [
                {
                  "name": "CreateAgentInfoDtoArray",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/CreateAgentInfoDtoArray"
                  }
                }
              ],
              "responses": {
                "201": {
                  "description": "Created successfully",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/AgentInfo"
                    }
                  }
                },
                "400": {
                  "description": "Validation failed. Bad request"
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/agentInfo/{agentid}/{agent_group}": {
            "get": {
              "summary": "Get one Agent Info",
              "description": "Endpoint to retrieve a specific Agent Info by Agent ID and Agent Group.",
              "operationId": "GetAgentInfo",
              "parameters": [
                {
                  "type": "number",
                  "name": "agent_group",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "number",
                  "name": "agentid",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/AgentInfo"
                  }
                },
                "404": {
                  "description": "No Agent Info exists with provided ids"
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "put": {
              "summary": "Update one Agent Info",
              "description": "Endpoint to update a specific Agent Info by Agent ID and Agent Group.",
              "operationId": "UpdateAgentInfo",
              "parameters": [
                {
                  "name": "UpdateAgentInfoDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/UpdateAgentInfoDto"
                  }
                },
                {
                  "type": "number",
                  "name": "agent_group",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "number",
                  "name": "agentid",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/AgentInfo"
                  }
                },
                "400": {
                  "description": "Validation failed. Bad request"
                },
                "404": {
                  "description": "No Agent Info exists with provided ids"
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "delete": {
              "summary": "Delete one Agent Info",
              "description": "Endpoint to delete a specific Agent Info by Agent ID and Agent Group.",
              "operationId": "DeleteAgentInfo",
              "parameters": [
                {
                  "type": "number",
                  "name": "agent_group",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "number",
                  "name": "agentid",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Agent Info successfully deleted"
                },
                "404": {
                  "description": "No Agent Info exists with provided ids"
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/agentPayout": {
            "get": {
              "summary": "Get all Agent Payout(s)",
              "description": "Endpoint to retrieve all Agent Payout(s).",
              "operationId": "GetAgentPayouts",
              "parameters": [],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/AgentPayout"
                    }
                  }
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "post": {
              "summary": "Create Agent Payout(s)",
              "description": "Endpoint to create Agent Payout(s).",
              "operationId": "CreateAgentPayout",
              "parameters": [
                {
                  "name": "CreateAgentPayoutDtoArray",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/CreateAgentPayoutDtoArray"
                  }
                }
              ],
              "responses": {
                "201": {
                  "description": "Created successfully",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/AgentPayout"
                    }
                  }
                },
                "400": {
                  "description": "Validation failed. Bad request"
                },
                "404": {
                  "description": "No Model exists with provided id"
                },
                "409": {
                  "description": "Conflict - Agent Payout already exists"
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/agentPayout/{agentPayoutId}": {
            "get": {
              "summary": "Get one Agent Payout",
              "description": "Endpoint to retrieve a specific Agent Payout by Id.",
              "operationId": "GetAgentPayout",
              "parameters": [
                {
                  "type": "number",
                  "name": "agentPayoutId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/AgentPayout"
                  }
                },
                "404": {
                  "description": "No Agent Payout exists with provided id"
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "put": {
              "summary": "Update one Agent Payout",
              "description": "Endpoint to update a specific Agent Payout by Id.",
              "operationId": "UpdateAgentPayout",
              "parameters": [
                {
                  "name": "UpdateAgentPayoutDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/UpdateAgentPayoutDto"
                  }
                },
                {
                  "type": "number",
                  "name": "agentPayoutId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/AgentPayout"
                  }
                },
                "400": {
                  "description": "Validation failed. Bad request"
                },
                "404": {
                  "description": "No Agent Payout/Model exists with provided id"
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "delete": {
              "summary": "Delete one Agent Payout",
              "description": "Endpoint to delete a specific Agent Payout by Id.",
              "operationId": "DeleteAgentPayout",
              "parameters": [
                {
                  "type": "number",
                  "name": "agentPayoutId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Agent Payout successfully deleted"
                },
                "404": {
                  "description": "No Agent Payout exists with provided id"
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/agentDiagonalModel": {
            "get": {
              "summary": "Get all Agent Diagonal Model(s)",
              "description": "Endpoint to retrieve all Agent Diagonal Model(s).",
              "operationId": "GetAgentDiagonalModels",
              "parameters": [],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/AgentDiagonalModel"
                    }
                  }
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "post": {
              "summary": "Create Agent Diagonal Model(s)",
              "description": "Endpoint to create Agent Diagonal Model(s).",
              "operationId": "CreateAgentDiagonalModel",
              "parameters": [
                {
                  "name": "CreateAgentDiagonalModelDtoArray",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/CreateAgentDiagonalModelDtoArray"
                  }
                }
              ],
              "responses": {
                "201": {
                  "description": "Created successfully",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/AgentDiagonalModel"
                    }
                  }
                },
                "400": {
                  "description": "Validation failed. Bad request"
                },
                "404": {
                  "description": "No Model exists with provided id"
                },
                "409": {
                  "description": "Conflict - Agent Diagonal Model already exists"
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/agentDiagonalModel/{agentDiagonalModelId}": {
            "get": {
              "summary": "Get one Agent Diagonal Model",
              "description": "Endpoint to retrieve a specific Agent Diagonal Model by Id.",
              "operationId": "GetAgentDiagonalModel",
              "parameters": [
                {
                  "type": "number",
                  "name": "agentDiagonalModelId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/AgentDiagonalModel"
                  }
                },
                "404": {
                  "description": "No Agent Diagonal Model exists with provided id"
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "put": {
              "summary": "Update one Agent Diagonal Model",
              "description": "Endpoint to update a specific Agent Diagonal Model by Id.",
              "operationId": "UpdateAgentDiagonalModel",
              "parameters": [
                {
                  "name": "UpdateAgentDiagonalModelDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/UpdateAgentDiagonalModelDto"
                  }
                },
                {
                  "type": "number",
                  "name": "agentDiagonalModelId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/AgentDiagonalModel"
                  }
                },
                "400": {
                  "description": "Validation failed. Bad request"
                },
                "404": {
                  "description": "No Agent Diagonal Model/Model exists with provided id"
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "delete": {
              "summary": "Delete one Agent Diagonal Model",
              "description": "Endpoint to delete a specific Agent Diagonal Model by Id.",
              "operationId": "DeleteAgentDiagonalModel",
              "parameters": [
                {
                  "type": "number",
                  "name": "agentDiagonalModelId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Agent Diagonal Model successfully deleted"
                },
                "404": {
                  "description": "No Agent Diagonal Model exists with provided id"
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/callGroup": {
            "get": {
              "summary": "Get all Call Group(s)",
              "description": "Endpoint to retrieve all Call Group(s).",
              "operationId": "GetCallGroups",
              "parameters": [],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/CallGroup"
                    }
                  }
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "post": {
              "summary": "Create Call Group(s)",
              "description": "Endpoint to create Call Group(s).",
              "operationId": "CreateCallGroup",
              "parameters": [
                {
                  "name": "CreateCallGroupDtoArray",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/CreateCallGroupDtoArray"
                  }
                }
              ],
              "responses": {
                "201": {
                  "description": "Created successfully",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/CallGroup"
                    }
                  }
                },
                "400": {
                  "description": "Validation failed. Bad request"
                },
                "404": {
                  "description": "No Model exists with provided id"
                },
                "409": {
                  "description": "Conflict - Call Group already exists"
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/callGroup/{callGroupId}": {
            "get": {
              "summary": "Get one Call Group ",
              "description": "Endpoint to retrieve a specific Call Group by Id.",
              "operationId": "GetCallGroup",
              "parameters": [
                {
                  "type": "number",
                  "name": "callGroupId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/CallGroup"
                  }
                },
                "404": {
                  "description": "No Call Group exists with provided id"
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "put": {
              "summary": "Update one Call Group",
              "description": "Endpoint to update a specific Call Group by Id.",
              "operationId": "UpdateCallGroup",
              "parameters": [
                {
                  "name": "UpdateCallGroupDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/UpdateCallGroupDto"
                  }
                },
                {
                  "type": "number",
                  "name": "callGroupId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/CallGroup"
                  }
                },
                "400": {
                  "description": "Validation failed. Bad request"
                },
                "404": {
                  "description": "No Call Group/Model exists with provided id"
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "delete": {
              "summary": "Delete one Call Group",
              "description": "Endpoint to delete a specific Call Group by Id.",
              "operationId": "DeleteCallGroup",
              "parameters": [
                {
                  "type": "number",
                  "name": "callGroupId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Call Group successfully deleted"
                },
                "404": {
                  "description": "No Call Group exists with provided id"
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/callDiagonalModel": {
            "get": {
              "summary": "Get all Call Diagonal Model(s)",
              "description": "Endpoint to retrieve all Call Diagonal Model(s).",
              "operationId": "GetCallDiagonalModels",
              "parameters": [],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/CallDiagonalModel"
                    }
                  }
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "post": {
              "summary": "Create Call Diagonal Model(s)",
              "description": "Endpoint to create Call Diagonal Model(s).",
              "operationId": "CreateCallDiagonalModel",
              "parameters": [
                {
                  "name": "CreateCallDiagonalModelDtoArray",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/CreateCallDiagonalModelDtoArray"
                  }
                }
              ],
              "responses": {
                "201": {
                  "description": "Created successfully",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/CallDiagonalModel"
                    }
                  }
                },
                "400": {
                  "description": "Validation failed. Bad request"
                },
                "404": {
                  "description": "No Model exists with provided id"
                },
                "409": {
                  "description": "Conflict - Call Diagonal Model already exists"
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/callDiagonalModel/{callDiagonalModelId}": {
            "get": {
              "summary": "Get one Call Diagonal Model",
              "description": "Endpoint to retrieve a specific Call Diagonal Model by Id.",
              "operationId": "GetCallDiagonalModel",
              "parameters": [
                {
                  "type": "number",
                  "name": "callDiagonalModelId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/CallDiagonalModel"
                  }
                },
                "404": {
                  "description": "No Call Diagonal Model exists with provided id"
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "put": {
              "summary": "Update one Call Diagonal Model",
              "description": "Endpoint to update a specific Call Diagonal Model by Id.",
              "operationId": "UpdateCallDiagonalModel",
              "parameters": [
                {
                  "name": "UpdateCallDiagonalModelDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/UpdateCallDiagonalModelDto"
                  }
                },
                {
                  "type": "number",
                  "name": "callDiagonalModelId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/CallDiagonalModel"
                  }
                },
                "400": {
                  "description": "Validation failed. Bad request"
                },
                "404": {
                  "description": "No Call Diagonal Model/Model exists with provided id"
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "delete": {
              "summary": "Delete one Call Diagonal Model",
              "description": "Endpoint to delete a specific Call Diagonal Model by Id.",
              "operationId": "DeleteCallDiagonalModel",
              "parameters": [
                {
                  "type": "number",
                  "name": "callDiagonalModelId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Call Diagonal Model successfully deleted"
                },
                "404": {
                  "description": "No Call Diagonal Model exists with provided id"
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/globalConfiguration": {
            "get": {
              "summary": "Get all Global Configuration(s)",
              "description": "Endpoint to retrieve all Global Configuration(s).",
              "operationId": "GetGlobalConfigurations",
              "parameters": [],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GlobalConfiguration"
                    }
                  }
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "post": {
              "summary": "Create Global Configuration(s)",
              "description": "Endpoint to create Global Configuration(s).",
              "operationId": "CreateGlobalConfiguration",
              "parameters": [
                {
                  "name": "CreateGlobalConfigurationDtoArray",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/CreateGlobalConfigurationDtoArray"
                  }
                }
              ],
              "responses": {
                "201": {
                  "description": "Created successfully",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GlobalConfiguration"
                    }
                  }
                },
                "400": {
                  "description": "Validation failed. Bad request"
                },
                "409": {
                  "description": "Conflict - Global Configuration already exists"
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/globalConfiguration/{globalConfigurationId}": {
            "get": {
              "summary": "Get one Global Configuration",
              "description": "Endpoint to retrieve a specific Global Configuration by Id.",
              "operationId": "GetGlobalConfiguration",
              "parameters": [
                {
                  "type": "number",
                  "name": "globalConfigurationId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/GlobalConfiguration"
                  }
                },
                "404": {
                  "description": "No Global Configuration exists with provided id"
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "put": {
              "summary": "Update one Global Configuration",
              "description": "Endpoint to update a specific Global Configuration by Id.",
              "operationId": "UpdateGlobalConfiguration",
              "parameters": [
                {
                  "name": "UpdateGlobalConfigurationDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/UpdateGlobalConfigurationDto"
                  }
                },
                {
                  "type": "number",
                  "name": "globalConfigurationId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/GlobalConfiguration"
                  }
                },
                "400": {
                  "description": "Validation failed. Bad request"
                },
                "404": {
                  "description": "No Global Configuration exists with provided id"
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "delete": {
              "summary": "Delete one Global Configuration",
              "description": "Endpoint to delete a specific Global Configuration by Id.",
              "operationId": "DeleteGlobalConfiguration",
              "parameters": [
                {
                  "type": "number",
                  "name": "globalConfigurationId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Global Configuration successfully deleted"
                },
                "404": {
                  "description": "No Global Configuration exists with provided id"
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/model": {
            "get": {
              "summary": "Get all Model(s)",
              "description": "Endpoint to retrieve all Model(s).",
              "operationId": "GetModels",
              "parameters": [],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Model"
                    }
                  }
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "post": {
              "summary": "Create Model(s)",
              "description": "Endpoint to create Model(s).",
              "operationId": "CreateModel",
              "parameters": [
                {
                  "name": "CreateModelDtoArray",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/CreateModelDtoArray"
                  }
                }
              ],
              "responses": {
                "201": {
                  "description": "Created successfully",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Model"
                    }
                  }
                },
                "400": {
                  "description": "Validation failed. Bad request"
                },
                "404": {
                  "description": "No Model Scope exists with provided id"
                },
                "409": {
                  "description": "Conflict - Model already exists"
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/model/{modelId}": {
            "get": {
              "summary": "Get one Model",
              "description": "Endpoint to retrieve a specific Model by Id.",
              "operationId": "GetModel",
              "parameters": [
                {
                  "type": "number",
                  "name": "modelId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Model"
                  }
                },
                "404": {
                  "description": "No Model exists with provided id"
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "put": {
              "summary": "Update one Model",
              "description": "Endpoint to update a specific Model by Id.",
              "operationId": "UpdateModel",
              "parameters": [
                {
                  "name": "UpdateModelDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/UpdateModelDto"
                  }
                },
                {
                  "type": "number",
                  "name": "modelId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Model"
                  }
                },
                "400": {
                  "description": "Validation failed. Bad request"
                },
                "404": {
                  "description": "No Model/Model Scope exists with provided id"
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "delete": {
              "summary": "Delete one Model",
              "description": "Endpoint to delete a specific Model by Id.",
              "operationId": "DeleteModel",
              "parameters": [
                {
                  "type": "number",
                  "name": "modelId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Model successfully deleted"
                },
                "400": {
                  "description": "Model has related data. Delete all related data before proceeding"
                },
                "404": {
                  "description": "No Model exists with provided id"
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/modelConfigurations": {
            "get": {
              "summary": "Get all Model Configurations",
              "description": "Endpoint to retrieve all Model Configurations.",
              "operationId": "GetAllModelConfigurations",
              "parameters": [],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/ModelConfigurations"
                    }
                  }
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "post": {
              "summary": "Create Model Configurations",
              "description": "Endpoint to create Model Configurations.",
              "operationId": "CreateModelConfigurations",
              "parameters": [
                {
                  "name": "CreateModelConfigurationsDtoArray",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/CreateModelConfigurationsDtoArray"
                  }
                }
              ],
              "responses": {
                "201": {
                  "description": "Created successfully",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/ModelConfigurations"
                    }
                  }
                },
                "400": {
                  "description": "Validation failed. Bad request"
                },
                "404": {
                  "description": "No Model exists with provided id"
                },
                "409": {
                  "description": "Conflict - Model Configurations instance already exists"
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/modelConfigurations/{modelConfigurationsId}": {
            "get": {
              "summary": "Get one Model Configurations instance",
              "description": "Endpoint to retrieve a specific Model Configurations instance by Id.",
              "operationId": "GetModelConfigurations",
              "parameters": [
                {
                  "type": "number",
                  "name": "modelConfigurationsId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/ModelConfigurations"
                  }
                },
                "404": {
                  "description": "No Model Configurations instance exists with provided id"
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "put": {
              "summary": "Update one Model Configurations instance",
              "description": "Endpoint to update a specific Model Configurations instance by Id.",
              "operationId": "UpdateModelConfigurations",
              "parameters": [
                {
                  "name": "UpdateModelConfigurationsDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/UpdateModelConfigurationsDto"
                  }
                },
                {
                  "type": "number",
                  "name": "modelConfigurationsId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/ModelConfigurations"
                  }
                },
                "400": {
                  "description": "Validation failed. Bad request"
                },
                "404": {
                  "description": "No Model Configurations instance/Model exists with provided id"
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "delete": {
              "summary": "Delete one Model Configurations instance",
              "description": "Endpoint to delete a specific Model Configurations instance by Id.",
              "operationId": "DeleteModelConfigurations",
              "parameters": [
                {
                  "type": "number",
                  "name": "modelConfigurationsId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Model Configurations instance successfully deleted"
                },
                "404": {
                  "description": "No Model Configurations instance exists with provided id"
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/modelScope": {
            "get": {
              "summary": "Get all Model Scope(s)",
              "description": "Endpoint to retrieve all Model Scope(s).",
              "operationId": "GetModelScopes",
              "parameters": [],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/ModelScope"
                    }
                  }
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "post": {
              "summary": "Create Model Scope(s)",
              "description": "Endpoint to create Model Scope(s).",
              "operationId": "CreateModelScope",
              "parameters": [
                {
                  "name": "CreateModelScopeDtoArray",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/CreateModelScopeDtoArray"
                  }
                }
              ],
              "responses": {
                "201": {
                  "description": "Created successfully",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/ModelScope"
                    }
                  }
                },
                "400": {
                  "description": "Validation failed. Bad request"
                },
                "409": {
                  "description": "Conflict - Model Scope instance already exists"
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/modelScope/{modelScopeId}": {
            "get": {
              "summary": "Get one Model Scope",
              "description": "Endpoint to retrieve a specific Model Scope by Id.",
              "operationId": "GetModelScope",
              "parameters": [
                {
                  "type": "number",
                  "name": "modelScopeId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/ModelScope"
                  }
                },
                "404": {
                  "description": "No Model Scope exists with provided id"
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "put": {
              "summary": "Update one Model Scope",
              "description": "Endpoint to update a specific Model Scope by Id.",
              "operationId": "UpdateModelScope",
              "parameters": [
                {
                  "name": "UpdateModelScopeDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/UpdateModelScopeDto"
                  }
                },
                {
                  "type": "number",
                  "name": "modelScopeId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/ModelScope"
                  }
                },
                "400": {
                  "description": "Validation failed. Bad request"
                },
                "404": {
                  "description": "No Model Scope exists with provided id"
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "delete": {
              "summary": "Delete one Model Scope",
              "description": "Endpoint to delete a specific Model Scope by Id.",
              "operationId": "DeleteModelScope",
              "parameters": [
                {
                  "type": "number",
                  "name": "modelScopeId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Model Scope successfully deleted"
                },
                "400": {
                  "description": "Model Scope has related data. Delete all related data before proceeding"
                },
                "404": {
                  "description": "No Model Scope exists with provided id"
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/skillsetCallGroupRates": {
            "get": {
              "summary": "Get all Skillset Call Group Rates",
              "description": "Endpoint to retrieve all Skillset Call Group Rates.",
              "operationId": "GetAllSkillsetCallGroupRates",
              "parameters": [],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/SkillsetCallGroupRates"
                    }
                  }
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "post": {
              "summary": "Create Skillset Call Group Rates",
              "description": "Endpoint to create Skillset Call Group Rates.",
              "operationId": "CreateSkillsetCallGroupRates",
              "parameters": [
                {
                  "name": "CreateSkillsetCallGroupRatesDtoArray",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/CreateSkillsetCallGroupRatesDtoArray"
                  }
                }
              ],
              "responses": {
                "201": {
                  "description": "Created successfully",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/SkillsetCallGroupRates"
                    }
                  }
                },
                "400": {
                  "description": "Validation failed. Bad request"
                },
                "404": {
                  "description": "No Model exists with provided id"
                },
                "409": {
                  "description": "Conflict - Skill Set Call Group instance already exists"
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/skillsetCallGroupRates/{skillsetCallGroupRatesId}": {
            "get": {
              "summary": "Get one Skillset Call Group Rates instance",
              "description": "Endpoint to retrieve a specific Skillset Call Group Rates instance by Id.",
              "operationId": "GetSkillsetCallGroupRates",
              "parameters": [
                {
                  "type": "number",
                  "name": "skillsetCallGroupRatesId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/SkillsetCallGroupRates"
                  }
                },
                "404": {
                  "description": "No Skillset Call Group Rates instance exists with provided id"
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "put": {
              "summary": "Update one Skillset Call Group Rates instance",
              "description": "Endpoint to update a specific Skillset Call Group Rates instance by Id.",
              "operationId": "UpdateSkillsetCallGroupRates",
              "parameters": [
                {
                  "name": "UpdateSkillsetCallGroupRatesDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/UpdateSkillsetCallGroupRatesDto"
                  }
                },
                {
                  "type": "number",
                  "name": "skillsetCallGroupRatesId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/SkillsetCallGroupRates"
                  }
                },
                "400": {
                  "description": "Validation failed. Bad request"
                },
                "404": {
                  "description": "No Skillset Call Group Rates instance/Model exists with provided id"
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "delete": {
              "summary": "Delete one Skillset Call Group Rates instance",
              "description": "Endpoint to delete a specific Skillset Call Group Rates instance by Id.",
              "operationId": "DeleteSkillsetCallGroupRates",
              "parameters": [
                {
                  "type": "number",
                  "name": "skillsetCallGroupRatesId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Skillset Call Group Rates instance successfully deleted"
                },
                "404": {
                  "description": "No Skillset Call Group Rates instance exists with provided id"
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/sim/agentInfo": {
            "get": {
              "summary": "Get all Agent Info(s)",
              "description": "Endpoint to retrieve all Agent Info(s).",
              "operationId": "SimGetAgentInfos",
              "parameters": [],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/SimAgentInfo"
                    }
                  }
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "post": {
              "summary": "Create Agent Info(s)",
              "description": "Endpoint to create Agent Info(s).",
              "operationId": "SimCreateAgentInfo",
              "parameters": [
                {
                  "name": "CreateAgentInfoDtoArray",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/CreateAgentInfoDtoArray"
                  }
                }
              ],
              "responses": {
                "201": {
                  "description": "Created successfully",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/SimAgentInfo"
                    }
                  }
                },
                "400": {
                  "description": "Validation failed. Bad request"
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/sim/agentInfo/{agentid}/{agent_group}": {
            "get": {
              "summary": "Get one Agent Info",
              "description": "Endpoint to retrieve a specific Agent Info by Agent ID and Agent Group.",
              "operationId": "SimGetAgentInfo",
              "parameters": [
                {
                  "type": "number",
                  "name": "agent_group",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "number",
                  "name": "agentid",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/SimAgentInfo"
                  }
                },
                "404": {
                  "description": "No Agent Info exists with provided ids"
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "put": {
              "summary": "Update one Agent Info",
              "description": "Endpoint to update a specific Agent Info by Agent ID and Agent Group.",
              "operationId": "SimUpdateAgentInfo",
              "parameters": [
                {
                  "name": "UpdateAgentInfoDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/UpdateAgentInfoDto"
                  }
                },
                {
                  "type": "number",
                  "name": "agent_group",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "number",
                  "name": "agentid",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/SimAgentInfo"
                  }
                },
                "400": {
                  "description": "Validation failed. Bad request"
                },
                "404": {
                  "description": "No Agent Info exists with provided ids"
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "delete": {
              "summary": "Delete one Agent Info",
              "description": "Endpoint to delete a specific Agent Info by Agent ID and Agent Group.",
              "operationId": "SimDeleteAgentInfo",
              "parameters": [
                {
                  "type": "number",
                  "name": "agent_group",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "number",
                  "name": "agentid",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Agent Info successfully deleted"
                },
                "404": {
                  "description": "No Agent Info exists with provided ids"
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/sim/agentPayout": {
            "get": {
              "summary": "Get all Agent Payout(s)",
              "description": "Endpoint to retrieve all Agent Payout(s).",
              "operationId": "SimGetAgentPayouts",
              "parameters": [],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/SimAgentPayout"
                    }
                  }
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "post": {
              "summary": "Create Agent Payout(s)",
              "description": "Endpoint to create Agent Payout(s).",
              "operationId": "SimCreateAgentPayout",
              "parameters": [
                {
                  "name": "CreateAgentPayoutDtoArray",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/CreateAgentPayoutDtoArray"
                  }
                }
              ],
              "responses": {
                "201": {
                  "description": "Created successfully",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/SimAgentPayout"
                    }
                  }
                },
                "400": {
                  "description": "Validation failed. Bad request"
                },
                "404": {
                  "description": "No Model exists with provided id"
                },
                "409": {
                  "description": "Conflict - Agent Payout already exists"
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/sim/agentPayout/{agentPayoutId}": {
            "get": {
              "summary": "Get one Agent Payout",
              "description": "Endpoint to retrieve a specific Agent Payout by Id.",
              "operationId": "SimGetAgentPayout",
              "parameters": [
                {
                  "type": "number",
                  "name": "agentPayoutId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/SimAgentPayout"
                  }
                },
                "404": {
                  "description": "No Agent Payout exists with provided id"
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "put": {
              "summary": "Update one Agent Payout",
              "description": "Endpoint to update a specific Agent Payout by Id.",
              "operationId": "SimUpdateAgentPayout",
              "parameters": [
                {
                  "name": "UpdateAgentPayoutDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/UpdateAgentPayoutDto"
                  }
                },
                {
                  "type": "number",
                  "name": "agentPayoutId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/SimAgentPayout"
                  }
                },
                "400": {
                  "description": "Validation failed. Bad request"
                },
                "404": {
                  "description": "No Agent Payout/Model exists with provided id"
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "delete": {
              "summary": "Delete one Agent Payout",
              "description": "Endpoint to delete a specific Agent Payout by Id.",
              "operationId": "SimDeleteAgentPayout",
              "parameters": [
                {
                  "type": "number",
                  "name": "agentPayoutId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Agent Payout successfully deleted"
                },
                "404": {
                  "description": "No Agent Payout exists with provided id"
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/sim/agentDiagonalModel": {
            "get": {
              "summary": "Get all Agent Diagonal Model(s)",
              "description": "Endpoint to retrieve all Agent Diagonal Model(s).",
              "operationId": "SimGetAgentDiagonalModels",
              "parameters": [],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/SimAgentDiagonalModel"
                    }
                  }
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "post": {
              "summary": "Create Agent Diagonal Model(s)",
              "description": "Endpoint to create Agent Diagonal Model(s).",
              "operationId": "SimCreateAgentDiagonalModel",
              "parameters": [
                {
                  "name": "CreateAgentDiagonalModelDtoArray",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/CreateAgentDiagonalModelDtoArray"
                  }
                }
              ],
              "responses": {
                "201": {
                  "description": "Created successfully",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/SimAgentDiagonalModel"
                    }
                  }
                },
                "400": {
                  "description": "Validation failed. Bad request"
                },
                "404": {
                  "description": "No Model exists with provided id"
                },
                "409": {
                  "description": "Conflict - Agent Diagonal Model already exists"
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/sim/agentDiagonalModel/{agentDiagonalModelId}": {
            "get": {
              "summary": "Get one Agent Diagonal Model",
              "description": "Endpoint to retrieve a specific Agent Diagonal Model by Id.",
              "operationId": "SimGetAgentDiagonalModel",
              "parameters": [
                {
                  "type": "number",
                  "name": "agentDiagonalModelId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/SimAgentDiagonalModel"
                  }
                },
                "404": {
                  "description": "No Agent Diagonal Model exists with provided id"
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "put": {
              "summary": "Update one Agent Diagonal Model",
              "description": "Endpoint to update a specific Agent Diagonal Model by Id.",
              "operationId": "SimUpdateAgentDiagonalModel",
              "parameters": [
                {
                  "name": "UpdateAgentDiagonalModelDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/UpdateAgentDiagonalModelDto"
                  }
                },
                {
                  "type": "number",
                  "name": "agentDiagonalModelId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/SimAgentDiagonalModel"
                  }
                },
                "400": {
                  "description": "Validation failed. Bad request"
                },
                "404": {
                  "description": "No Agent Diagonal Model/Model exists with provided id"
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "delete": {
              "summary": "Delete one Agent Diagonal Model",
              "description": "Endpoint to delete a specific Agent Diagonal Model by Id.",
              "operationId": "SimDeleteAgentDiagonalModel",
              "parameters": [
                {
                  "type": "number",
                  "name": "agentDiagonalModelId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Agent Diagonal Model successfully deleted"
                },
                "404": {
                  "description": "No Agent Diagonal Model exists with provided id"
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/sim/callGroup": {
            "get": {
              "summary": "Get all Call Group(s)",
              "description": "Endpoint to retrieve all Call Group(s).",
              "operationId": "SimGetCallGroups",
              "parameters": [],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/SimCallGroup"
                    }
                  }
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "post": {
              "summary": "Create Call Group(s)",
              "description": "Endpoint to create Call Group(s).",
              "operationId": "SimCreateCallGroup",
              "parameters": [
                {
                  "name": "CreateCallGroupDtoArray",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/CreateCallGroupDtoArray"
                  }
                }
              ],
              "responses": {
                "201": {
                  "description": "Created successfully",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/SimCallGroup"
                    }
                  }
                },
                "400": {
                  "description": "Validation failed. Bad request"
                },
                "404": {
                  "description": "No Model exists with provided id"
                },
                "409": {
                  "description": "Conflict - Call Group already exists"
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/sim/callGroup/{callGroupId}": {
            "get": {
              "summary": "Get one Call Group ",
              "description": "Endpoint to retrieve a specific Call Group by Id.",
              "operationId": "SimGetCallGroup",
              "parameters": [
                {
                  "type": "number",
                  "name": "callGroupId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/SimCallGroup"
                  }
                },
                "404": {
                  "description": "No Call Group exists with provided id"
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "put": {
              "summary": "Update one Call Group",
              "description": "Endpoint to update a specific Call Group by Id.",
              "operationId": "SimUpdateCallGroup",
              "parameters": [
                {
                  "name": "UpdateCallGroupDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/UpdateCallGroupDto"
                  }
                },
                {
                  "type": "number",
                  "name": "callGroupId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/SimCallGroup"
                  }
                },
                "400": {
                  "description": "Validation failed. Bad request"
                },
                "404": {
                  "description": "No Call Group/Model exists with provided id"
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "delete": {
              "summary": "Delete one Call Group",
              "description": "Endpoint to delete a specific Call Group by Id.",
              "operationId": "SimDeleteCallGroup",
              "parameters": [
                {
                  "type": "number",
                  "name": "callGroupId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Call Group successfully deleted"
                },
                "404": {
                  "description": "No Call Group exists with provided id"
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/sim/callDiagonalModel": {
            "get": {
              "summary": "Get all Call Diagonal Model(s)",
              "description": "Endpoint to retrieve all Call Diagonal Model(s).",
              "operationId": "SimGetCallDiagonalModels",
              "parameters": [],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/SimCallDiagonalModel"
                    }
                  }
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "post": {
              "summary": "Create Call Diagonal Model(s)",
              "description": "Endpoint to create Call Diagonal Model(s).",
              "operationId": "SimCreateCallDiagonalModel",
              "parameters": [
                {
                  "name": "CreateCallDiagonalModelDtoArray",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/CreateCallDiagonalModelDtoArray"
                  }
                }
              ],
              "responses": {
                "201": {
                  "description": "Created successfully",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/SimCallDiagonalModel"
                    }
                  }
                },
                "400": {
                  "description": "Validation failed. Bad request"
                },
                "404": {
                  "description": "No Model exists with provided id"
                },
                "409": {
                  "description": "Conflict - Call Diagonal Model already exists"
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/sim/callDiagonalModel/{callDiagonalModelId}": {
            "get": {
              "summary": "Get one Call Diagonal Model",
              "description": "Endpoint to retrieve a specific Call Diagonal Model by Id.",
              "operationId": "SimGetCallDiagonalModel",
              "parameters": [
                {
                  "type": "number",
                  "name": "callDiagonalModelId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/SimCallDiagonalModel"
                  }
                },
                "404": {
                  "description": "No Call Diagonal Model exists with provided id"
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "put": {
              "summary": "Update one Call Diagonal Model",
              "description": "Endpoint to update a specific Call Diagonal Model by Id.",
              "operationId": "SimUpdateCallDiagonalModel",
              "parameters": [
                {
                  "name": "UpdateCallDiagonalModelDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/UpdateCallDiagonalModelDto"
                  }
                },
                {
                  "type": "number",
                  "name": "callDiagonalModelId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/SimCallDiagonalModel"
                  }
                },
                "400": {
                  "description": "Validation failed. Bad request"
                },
                "404": {
                  "description": "No Call Diagonal Model/Model exists with provided id"
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "delete": {
              "summary": "Delete one Call Diagonal Model",
              "description": "Endpoint to delete a specific Call Diagonal Model by Id.",
              "operationId": "SimDeleteCallDiagonalModel",
              "parameters": [
                {
                  "type": "number",
                  "name": "callDiagonalModelId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Call Diagonal Model successfully deleted"
                },
                "404": {
                  "description": "No Call Diagonal Model exists with provided id"
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/sim/globalConfiguration": {
            "get": {
              "summary": "Get all Global Configuration(s)",
              "description": "Endpoint to retrieve all Global Configuration(s).",
              "operationId": "SimGetGlobalConfigurations",
              "parameters": [],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/SimGlobalConfiguration"
                    }
                  }
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "post": {
              "summary": "Create Global Configuration(s)",
              "description": "Endpoint to create Global Configuration(s).",
              "operationId": "SimCreateGlobalConfiguration",
              "parameters": [
                {
                  "name": "CreateGlobalConfigurationDtoArray",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/CreateGlobalConfigurationDtoArray"
                  }
                }
              ],
              "responses": {
                "201": {
                  "description": "Created successfully",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/SimGlobalConfiguration"
                    }
                  }
                },
                "400": {
                  "description": "Validation failed. Bad request"
                },
                "409": {
                  "description": "Conflict - Global Configuration already exists"
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/sim/globalConfiguration/{globalConfigurationId}": {
            "get": {
              "summary": "Get one Global Configuration",
              "description": "Endpoint to retrieve a specific Global Configuration by Id.",
              "operationId": "SimGetGlobalConfiguration",
              "parameters": [
                {
                  "type": "number",
                  "name": "globalConfigurationId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/SimGlobalConfiguration"
                  }
                },
                "404": {
                  "description": "No Global Configuration exists with provided id"
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "put": {
              "summary": "Update one Global Configuration",
              "description": "Endpoint to update a specific Global Configuration by Id.",
              "operationId": "SimUpdateGlobalConfiguration",
              "parameters": [
                {
                  "name": "UpdateGlobalConfigurationDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/UpdateGlobalConfigurationDto"
                  }
                },
                {
                  "type": "number",
                  "name": "globalConfigurationId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/SimGlobalConfiguration"
                  }
                },
                "400": {
                  "description": "Validation failed. Bad request"
                },
                "404": {
                  "description": "No Global Configuration exists with provided id"
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "delete": {
              "summary": "Delete one Global Configuration",
              "description": "Endpoint to delete a specific Global Configuration by Id.",
              "operationId": "SimDeleteGlobalConfiguration",
              "parameters": [
                {
                  "type": "number",
                  "name": "globalConfigurationId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Global Configuration successfully deleted"
                },
                "404": {
                  "description": "No Global Configuration exists with provided id"
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/sim/model": {
            "get": {
              "summary": "Get all Model(s)",
              "description": "Endpoint to retrieve all Model(s).",
              "operationId": "SimGetModels",
              "parameters": [],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/SimModel"
                    }
                  }
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "post": {
              "summary": "Create Model(s)",
              "description": "Endpoint to create Model(s).",
              "operationId": "SimCreateModel",
              "parameters": [
                {
                  "name": "CreateModelDtoArray",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/CreateModelDtoArray"
                  }
                }
              ],
              "responses": {
                "201": {
                  "description": "Created successfully",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/SimModel"
                    }
                  }
                },
                "400": {
                  "description": "Validation failed. Bad request"
                },
                "404": {
                  "description": "No Model Scope exists with provided id"
                },
                "409": {
                  "description": "Conflict - Model already exists"
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/sim/model/{modelId}": {
            "get": {
              "summary": "Get one Model",
              "description": "Endpoint to retrieve a specific Model by Id.",
              "operationId": "SimGetModel",
              "parameters": [
                {
                  "type": "number",
                  "name": "modelId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/SimModel"
                  }
                },
                "404": {
                  "description": "No Model exists with provided id"
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "put": {
              "summary": "Update one Model",
              "description": "Endpoint to update a specific Model by Id.",
              "operationId": "SimUpdateModel",
              "parameters": [
                {
                  "name": "UpdateModelDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/UpdateModelDto"
                  }
                },
                {
                  "type": "number",
                  "name": "modelId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/SimModel"
                  }
                },
                "400": {
                  "description": "Validation failed. Bad request"
                },
                "404": {
                  "description": "No Model/Model Scope exists with provided id"
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "delete": {
              "summary": "Delete one Model",
              "description": "Endpoint to delete a specific Model by Id.",
              "operationId": "SimDeleteModel",
              "parameters": [
                {
                  "type": "number",
                  "name": "modelId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Model successfully deleted"
                },
                "400": {
                  "description": "Model has related data. Delete all related data before proceeding"
                },
                "404": {
                  "description": "No Model exists with provided id"
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/sim/modelConfigurations": {
            "get": {
              "summary": "Get all Model Configurations",
              "description": "Endpoint to retrieve all Model Configurations.",
              "operationId": "SimGetAllModelConfigurations",
              "parameters": [],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/SimModelConfigurations"
                    }
                  }
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "post": {
              "summary": "Create Model Configurations",
              "description": "Endpoint to create Model Configurations.",
              "operationId": "SimCreateModelConfigurations",
              "parameters": [
                {
                  "name": "CreateModelConfigurationsDtoArray",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/CreateModelConfigurationsDtoArray"
                  }
                }
              ],
              "responses": {
                "201": {
                  "description": "Created successfully",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/SimModelConfigurations"
                    }
                  }
                },
                "400": {
                  "description": "Validation failed. Bad request"
                },
                "404": {
                  "description": "No Model exists with provided id"
                },
                "409": {
                  "description": "Conflict - Model Configurations instance already exists"
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/sim/modelConfigurations/{modelConfigurationsId}": {
            "get": {
              "summary": "Get one Model Configurations instance",
              "description": "Endpoint to retrieve a specific Model Configurations instance by Id.",
              "operationId": "SimGetModelConfigurations",
              "parameters": [
                {
                  "type": "number",
                  "name": "modelConfigurationsId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/SimModelConfigurations"
                  }
                },
                "404": {
                  "description": "No Model Configurations instance exists with provided id"
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "put": {
              "summary": "Update one Model Configurations instance",
              "description": "Endpoint to update a specific Model Configurations instance by Id.",
              "operationId": "SimUpdateModelConfigurations",
              "parameters": [
                {
                  "name": "UpdateModelConfigurationsDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/UpdateModelConfigurationsDto"
                  }
                },
                {
                  "type": "number",
                  "name": "modelConfigurationsId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/SimModelConfigurations"
                  }
                },
                "400": {
                  "description": "Validation failed. Bad request"
                },
                "404": {
                  "description": "No Model Configurations instance/Model exists with provided id"
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "delete": {
              "summary": "Delete one Model Configurations instance",
              "description": "Endpoint to delete a specific Model Configurations instance by Id.",
              "operationId": "SimDeleteModelConfigurations",
              "parameters": [
                {
                  "type": "number",
                  "name": "modelConfigurationsId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Model Configurations instance successfully deleted"
                },
                "404": {
                  "description": "No Model Configurations instance exists with provided id"
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/sim/modelScope": {
            "get": {
              "summary": "Get all Model Scope(s)",
              "description": "Endpoint to retrieve all Model Scope(s).",
              "operationId": "SimGetModelScopes",
              "parameters": [],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/SimModelScope"
                    }
                  }
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "post": {
              "summary": "Create Model Scope(s)",
              "description": "Endpoint to create Model Scope(s).",
              "operationId": "SimCreateModelScope",
              "parameters": [
                {
                  "name": "CreateModelScopeDtoArray",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/CreateModelScopeDtoArray"
                  }
                }
              ],
              "responses": {
                "201": {
                  "description": "Created successfully",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/SimModelScope"
                    }
                  }
                },
                "400": {
                  "description": "Validation failed. Bad request"
                },
                "409": {
                  "description": "Conflict - Model Scope instance already exists"
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/sim/modelScope/{modelScopeId}": {
            "get": {
              "summary": "Get one Model Scope",
              "description": "Endpoint to retrieve a specific Model Scope by Id.",
              "operationId": "SimGetModelScope",
              "parameters": [
                {
                  "type": "number",
                  "name": "modelScopeId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/SimModelScope"
                  }
                },
                "404": {
                  "description": "No Model Scope exists with provided id"
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "put": {
              "summary": "Update one Model Scope",
              "description": "Endpoint to update a specific Model Scope by Id.",
              "operationId": "SimUpdateModelScope",
              "parameters": [
                {
                  "name": "UpdateModelScopeDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/UpdateModelScopeDto"
                  }
                },
                {
                  "type": "number",
                  "name": "modelScopeId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/SimModelScope"
                  }
                },
                "400": {
                  "description": "Validation failed. Bad request"
                },
                "404": {
                  "description": "No Model Scope exists with provided id"
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "delete": {
              "summary": "Delete one Model Scope",
              "description": "Endpoint to delete a specific Model Scope by Id.",
              "operationId": "SimDeleteModelScope",
              "parameters": [
                {
                  "type": "number",
                  "name": "modelScopeId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Model Scope successfully deleted"
                },
                "400": {
                  "description": "Model Scope has related data. Delete all related data before proceeding"
                },
                "404": {
                  "description": "No Model Scope exists with provided id"
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/sim/skillsetCallGroupRates": {
            "get": {
              "summary": "Get all Skillset Call Group Rates",
              "description": "Endpoint to retrieve all Skillset Call Group Rates.",
              "operationId": "SimGetAllSkillsetCallGroupRates",
              "parameters": [],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/SimSkillsetCallGroupRates"
                    }
                  }
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "post": {
              "summary": "Create Skillset Call Group Rates",
              "description": "Endpoint to create Skillset Call Group Rates.",
              "operationId": "SimCreateSkillsetCallGroupRates",
              "parameters": [
                {
                  "name": "CreateSkillsetCallGroupRatesDtoArray",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/CreateSkillsetCallGroupRatesDtoArray"
                  }
                }
              ],
              "responses": {
                "201": {
                  "description": "Created successfully",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/SimSkillsetCallGroupRates"
                    }
                  }
                },
                "400": {
                  "description": "Validation failed. Bad request"
                },
                "404": {
                  "description": "No Model exists with provided id"
                },
                "409": {
                  "description": "Conflict - Skill Set Call Group instance already exists"
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/sim/skillsetCallGroupRates/{skillsetCallGroupRatesId}": {
            "get": {
              "summary": "Get one Skillset Call Group Rates instance",
              "description": "Endpoint to retrieve a specific Skillset Call Group Rates instance by Id.",
              "operationId": "SimGetSkillsetCallGroupRates",
              "parameters": [
                {
                  "type": "number",
                  "name": "skillsetCallGroupRatesId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/SimSkillsetCallGroupRates"
                  }
                },
                "404": {
                  "description": "No Skillset Call Group Rates instance exists with provided id"
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "put": {
              "summary": "Update one Skillset Call Group Rates instance",
              "description": "Endpoint to update a specific Skillset Call Group Rates instance by Id.",
              "operationId": "SimUpdateSkillsetCallGroupRates",
              "parameters": [
                {
                  "name": "UpdateSkillsetCallGroupRatesDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/UpdateSkillsetCallGroupRatesDto"
                  }
                },
                {
                  "type": "number",
                  "name": "skillsetCallGroupRatesId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/SimSkillsetCallGroupRates"
                  }
                },
                "400": {
                  "description": "Validation failed. Bad request"
                },
                "404": {
                  "description": "No Skillset Call Group Rates instance/Model exists with provided id"
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "delete": {
              "summary": "Delete one Skillset Call Group Rates instance",
              "description": "Endpoint to delete a specific Skillset Call Group Rates instance by Id.",
              "operationId": "SimDeleteSkillsetCallGroupRates",
              "parameters": [
                {
                  "type": "number",
                  "name": "skillsetCallGroupRatesId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Skillset Call Group Rates instance successfully deleted"
                },
                "404": {
                  "description": "No Skillset Call Group Rates instance exists with provided id"
                }
              },
              "tags": [
                "AI Model - Evaluator 2.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/eval3/program": {
            "get": {
              "summary": "Get all Program(s)",
              "description": "Endpoint to retrieve all Programs.",
              "operationId": "Eval3GetPrograms",
              "parameters": [],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Eval3Program"
                    }
                  }
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "post": {
              "summary": "Create Program(s)",
              "description": "Endpoint to create Program(s).",
              "operationId": "Eval3CreateProgram",
              "parameters": [
                {
                  "name": "Eval3CreateProgramDtoArray",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/Eval3CreateProgramDtoArray"
                  }
                }
              ],
              "responses": {
                "201": {
                  "description": "Created successfully",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Eval3Program"
                    }
                  }
                },
                "400": {
                  "description": "Validation failed. Bad request"
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/eval3/program/{program_id}": {
            "get": {
              "summary": "Get one Program",
              "description": "Endpoint to retrieve a specific Program by program_id.",
              "operationId": "Eval3GetProgram",
              "parameters": [
                {
                  "type": "number",
                  "name": "program_id",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Eval3Program"
                  }
                },
                "404": {
                  "description": "No Program exists with provided id"
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "put": {
              "summary": "Update one Program",
              "description": "Endpoint to update a specific Program by program_id.",
              "operationId": "Eval3UpdateProgram",
              "parameters": [
                {
                  "name": "Eval3UpdateProgramDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/Eval3UpdateProgramDto"
                  }
                },
                {
                  "type": "number",
                  "name": "program_id",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Eval3Program"
                  }
                },
                "400": {
                  "description": "Validation failed. Bad request"
                },
                "404": {
                  "description": "No Program exists with provided id"
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "delete": {
              "summary": "Delete one Program",
              "description": "Endpoint to delete a specific Program by program_id.",
              "operationId": "Eval3DeleteProgram",
              "parameters": [
                {
                  "type": "number",
                  "name": "program_id",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Program successfully deleted"
                },
                "400": {
                  "description": "Unable to delete. Program has related data."
                },
                "404": {
                  "description": "No Program exists with provided id"
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/eval3/callgroup": {
            "get": {
              "summary": "Get all Callgroup(s)",
              "description": "Endpoint to retrieve all Callgroups.",
              "operationId": "Eval3GetCallGroups",
              "parameters": [],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Eval3Callgroup"
                    }
                  }
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "post": {
              "summary": "Create Callgroup(s)",
              "description": "Endpoint to create Callgroup(s).",
              "operationId": "Eval3CreateCallgroup",
              "parameters": [
                {
                  "name": "Eval3CreateCallgroupDtoArray",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/Eval3CreateCallgroupDtoArray"
                  }
                }
              ],
              "responses": {
                "201": {
                  "description": "Created successfully",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Eval3Callgroup"
                    }
                  }
                },
                "400": {
                  "description": "Validation failed. Bad request"
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/eval3/callgroup/{callgroup_tree_id}": {
            "get": {
              "summary": "Get one Callgroup",
              "description": "Endpoint to retrieve a specific Callgroup by callgroup_tree_id.",
              "operationId": "Eval3GetCallgroup",
              "parameters": [
                {
                  "type": "number",
                  "name": "callgroup_tree_id",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Eval3Callgroup"
                  }
                },
                "404": {
                  "description": "No Callgroup exists with provided id"
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "put": {
              "summary": "Update one Callgroup",
              "description": "Endpoint to update a specific Callgroup by callgroup_tree_id.",
              "operationId": "Eval3UpdateCallgroup",
              "parameters": [
                {
                  "name": "Eval3UpdateCallgroupDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/Eval3UpdateCallgroupDto"
                  }
                },
                {
                  "type": "number",
                  "name": "callgroup_tree_id",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Eval3Callgroup"
                  }
                },
                "400": {
                  "description": "Validation failed. Bad request"
                },
                "404": {
                  "description": "No Callgroup exists with provided id"
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "delete": {
              "summary": "Delete one Callgroup",
              "description": "Endpoint to delete a specific Callgroup by callgroup_tree_id.",
              "operationId": "Eval3DeleteCallgroup",
              "parameters": [
                {
                  "type": "number",
                  "name": "callgroup_tree_id",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Callgroup successfully deleted"
                },
                "400": {
                  "description": "Unable to delete. Callgroup has related data."
                },
                "404": {
                  "description": "No Callgroup exists with provided id"
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/eval3/modelunitConfiguration": {
            "get": {
              "summary": "Get all Modelunit Configuration(s)",
              "description": "Endpoint to retrieve all Modelunit Configurations.",
              "operationId": "Eval3GetModelunitConfigurations",
              "parameters": [],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Eval3ModelunitConfiguration"
                    }
                  }
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "post": {
              "summary": "Create Modelunit Configuration(s)",
              "description": "Endpoint to create Modelunit Configuration(s).",
              "operationId": "Eval3CreateModelunitConfiguration",
              "parameters": [
                {
                  "name": "Eval3CreateModelunitConfigurationDtoArray",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/Eval3CreateModelunitConfigurationDtoArray"
                  }
                }
              ],
              "responses": {
                "201": {
                  "description": "Created successfully",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Eval3ModelunitConfiguration"
                    }
                  }
                },
                "400": {
                  "description": "Validation failed. Bad request"
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/eval3/modelunitConfiguration/{modelunit_configuration_id}": {
            "get": {
              "summary": "Get one Modelunit Configuration",
              "description": "Endpoint to retrieve a specific Modelunit Configuration by modelunit_configuration_id.",
              "operationId": "Eval3GetModelunitConfiguration",
              "parameters": [
                {
                  "type": "number",
                  "name": "modelunit_configuration_id",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Eval3ModelunitConfiguration"
                  }
                },
                "404": {
                  "description": "No Modelunit Configuration exists with provided id"
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "put": {
              "summary": "Update one Modelunit Configuration",
              "description": "Endpoint to update a specific Modelunit Configuration by modelunit_configuration_id.",
              "operationId": "Eval3Updatemodelunit_configuration_id",
              "parameters": [
                {
                  "name": "Eval3UpdateModelunitConfigurationDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/Eval3UpdateModelunitConfigurationDto"
                  }
                },
                {
                  "type": "number",
                  "name": "modelunit_configuration_id",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Eval3ModelunitConfiguration"
                  }
                },
                "400": {
                  "description": "Validation failed. Bad request"
                },
                "404": {
                  "description": "No Modelunit Configuration exists with provided id"
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "delete": {
              "summary": "Delete one Modelunit Configuration",
              "description": "Endpoint to delete a specific Modelunit Configuration by modelunit_configuration_id.",
              "operationId": "Eval3DeleteModelunitConfiguration",
              "parameters": [
                {
                  "type": "number",
                  "name": "modelunit_configuration_id",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Modelunit Configuration successfully deleted"
                },
                "400": {
                  "description": "Unable to delete. Modelunit Configuration has related data."
                },
                "404": {
                  "description": "No Modelunit Configuration exists with provided id"
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/eval3/modelunit": {
            "get": {
              "summary": "Get all Modelunit(s)",
              "description": "Endpoint to retrieve all Modelunits.",
              "operationId": "Eval3GetModelunits",
              "parameters": [],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Eval3Modelunit"
                    }
                  }
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "post": {
              "summary": "Create Modelunit(s)",
              "description": "Endpoint to create Modelunit(s).",
              "operationId": "Eval3CreateModelunit",
              "parameters": [
                {
                  "name": "Eval3CreateModelunitDtoArray",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/Eval3CreateModelunitDtoArray"
                  }
                }
              ],
              "responses": {
                "201": {
                  "description": "Created successfully",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Eval3Modelunit"
                    }
                  }
                },
                "400": {
                  "description": "Validation failed. Bad request"
                },
                "404": {
                  "description": "Callgroup/Modelunit Configuration not found"
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/eval3/modelunit/{modelunit_id}": {
            "get": {
              "summary": "Get one Modelunit",
              "description": "Endpoint to retrieve a specific Modelunit by modelunit_id.",
              "operationId": "Eval3GetModelunit",
              "parameters": [
                {
                  "type": "number",
                  "name": "modelunit_id",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Eval3Modelunit"
                  }
                },
                "404": {
                  "description": "No Modelunit exists with provided id"
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "put": {
              "summary": "Update one Modelunit",
              "description": "Endpoint to update a specific Modelunit by modelunit_id.",
              "operationId": "Eval3UpdateModelunit",
              "parameters": [
                {
                  "name": "Eval3UpdateModelunitDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/Eval3UpdateModelunitDto"
                  }
                },
                {
                  "type": "number",
                  "name": "modelunit_id",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Eval3Modelunit"
                  }
                },
                "400": {
                  "description": "Validation failed. Bad request"
                },
                "404": {
                  "description": "No Modelunit exists with provided id"
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "delete": {
              "summary": "Delete one Modelunit",
              "description": "Endpoint to delete a specific Modelunit by modelunit_id.",
              "operationId": "Eval3DeleteModelunit",
              "parameters": [
                {
                  "type": "number",
                  "name": "modelunit_id",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Modelunit successfully deleted"
                },
                "400": {
                  "description": "Unable to delete. Modelunit has related data."
                },
                "404": {
                  "description": "No Modelunit exists with provided id"
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/eval3/activemodelunits": {
            "get": {
              "summary": "Get all Active Modelunit(s)",
              "description": "Endpoint to retrieve all Active Modelunits.",
              "operationId": "Eval3GetActivemodelunits",
              "parameters": [],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Eval3Activemodelunits"
                    }
                  }
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "post": {
              "summary": "Create Active Modelunit(s)",
              "description": "Endpoint to create Active Modelunit(s).",
              "operationId": "Eval3CreateActivemodelunits",
              "parameters": [
                {
                  "name": "Eval3CreateActivemodelunitsDtoArray",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/Eval3CreateActivemodelunitsDtoArray"
                  }
                }
              ],
              "responses": {
                "201": {
                  "description": "Created successfully",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Eval3Activemodelunits"
                    }
                  }
                },
                "400": {
                  "description": "Validation failed. Bad request"
                },
                "404": {
                  "description": "Modelunit/Program not found"
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/eval3/activemodelunits/{modelunit_id}/{active_datetime}": {
            "get": {
              "summary": "Get one Active Modelunit",
              "description": "Endpoint to retrieve a specific Active Modelunit by modelunit_id and active_datetime.",
              "operationId": "Eval3GetActivemodelunit",
              "parameters": [
                {
                  "type": "string",
                  "name": "active_datetime",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "number",
                  "name": "modelunit_id",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Eval3Activemodelunits"
                  }
                },
                "404": {
                  "description": "No Active Modelunit exists with provided keys"
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "put": {
              "summary": "Update one Active Modelunit",
              "description": "Endpoint to update a specific Active Modelunit by modelunit_id and active_datetime.",
              "operationId": "Eval3UpdateActivemodelunit",
              "parameters": [
                {
                  "name": "Eval3UpdateActivemodelunitsDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/Eval3UpdateActivemodelunitsDto"
                  }
                },
                {
                  "type": "string",
                  "name": "active_datetime",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "number",
                  "name": "modelunit_id",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Eval3Activemodelunits"
                  }
                },
                "400": {
                  "description": "Validation failed. Bad request"
                },
                "404": {
                  "description": "No Active Modelunit exists with provided keys"
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "delete": {
              "summary": "Delete one Active Modelunit",
              "description": "Endpoint to delete a specific Active Modelunit by modelunit_id and active_datetime.",
              "operationId": "Eval3DeleteActivemodelunit",
              "parameters": [
                {
                  "type": "string",
                  "name": "active_datetime",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "number",
                  "name": "modelunit_id",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Active Modelunit successfully deleted"
                },
                "404": {
                  "description": "No Active Modelunit exists with provided keys"
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/eval3/max/agentDiagonalModel": {
            "get": {
              "summary": "Get max Agent Diagonal Model ID",
              "description": "Endpoint to retrieve maximum ID of Agent Diagonal Model.",
              "operationId": "Eval3GetMaxAgentDiagonalModelId",
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/MaxDto"
                  }
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/eval3/agentDiagonalModel": {
            "get": {
              "summary": "Get all Agent Diagonal Model(s)",
              "description": "Endpoint to retrieve all Agent Diagonal Models.",
              "operationId": "Eval3GetAgentDiagonalModels",
              "parameters": [],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Eval3AgentDiagonalModel"
                    }
                  }
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "post": {
              "summary": "Create Agent Diagonal Model(s)",
              "description": "Endpoint to create Agent Diagonal Model(s).",
              "operationId": "Eval3CreateAgentDiagonalModel",
              "parameters": [
                {
                  "name": "Eval3CreateAgentDiagonalModelDtoArray",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/Eval3CreateAgentDiagonalModelDtoArray"
                  }
                }
              ],
              "responses": {
                "201": {
                  "description": "Created successfully",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Eval3AgentDiagonalModel"
                    }
                  }
                },
                "400": {
                  "description": "Validation failed. Bad request"
                },
                "409": {
                  "description": "Conflict - Agent Diagonal Model already exists"
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/eval3/agentDiagonalModel/{agent_diagonal_model_id}/{agent_id}": {
            "get": {
              "summary": "Get one Agent Diagonal Model",
              "description": "Endpoint to retrieve a specific Agent Diagonal Model by agent_diagonal_model_id and agent_id.",
              "operationId": "Eval3GetAgentDiagonalModel",
              "parameters": [
                {
                  "type": "string",
                  "name": "agent_id",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "number",
                  "name": "agent_diagonal_model_id",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Eval3AgentDiagonalModel"
                  }
                },
                "404": {
                  "description": "No Agent Diagonal Model exists with provided keys"
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "put": {
              "summary": "Update one Agent Diagonal Model",
              "description": "Endpoint to update a specific Agent Diagonal Model by agent_diagonal_model_id and agent_id.",
              "operationId": "Eval3UpdateAgentDiagonalModel",
              "parameters": [
                {
                  "name": "Eval3UpdateAgentDiagonalModelDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/Eval3UpdateAgentDiagonalModelDto"
                  }
                },
                {
                  "type": "string",
                  "name": "agent_id",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "number",
                  "name": "agent_diagonal_model_id",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Eval3AgentDiagonalModel"
                  }
                },
                "400": {
                  "description": "Validation failed. Bad request"
                },
                "404": {
                  "description": "No Agent Diagonal Model exists with provided keys"
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "delete": {
              "summary": "Delete one Agent Diagonal Model",
              "description": "Endpoint to delete a specific Agent Diagonal Model by agent_diagonal_model_id and agent_id.",
              "operationId": "Eval3DeleteAgentDiagonalModel",
              "parameters": [
                {
                  "type": "string",
                  "name": "agent_id",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "number",
                  "name": "agent_diagonal_model_id",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Agent Diagonal Model successfully deleted"
                },
                "404": {
                  "description": "No Agent Diagonal Model exists with provided keys"
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/eval3/agentInfo": {
            "get": {
              "summary": "Get all Agent Info(s)",
              "description": "Endpoint to retrieve all Agent Infos.",
              "operationId": "Eval3GetAgentInfos",
              "parameters": [],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Eval3AgentInfo"
                    }
                  }
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "post": {
              "summary": "Create Agent Info(s)",
              "description": "Endpoint to create Agent Info(s).",
              "operationId": "Eval3CreateAgentInfo",
              "parameters": [
                {
                  "name": "Eval3CreateAgentInfoDtoArray",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/Eval3CreateAgentInfoDtoArray"
                  }
                }
              ],
              "responses": {
                "201": {
                  "description": "Created successfully",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Eval3AgentInfo"
                    }
                  }
                },
                "400": {
                  "description": "Validation failed. Bad request"
                },
                "409": {
                  "description": "Conflict - Agent Info already exists"
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/eval3/agentInfo/{evaluator_instance}/{agent_id}/{agent_group}/{active_datetime}": {
            "get": {
              "summary": "Get one Agent Info",
              "description": "Endpoint to retrieve a specific Agent Info by evaluator_instance, agent_id, agent_group and active_datetime.",
              "operationId": "Eval3GetAgentInfo",
              "parameters": [
                {
                  "type": "string",
                  "name": "active_datetime",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "number",
                  "name": "agent_group",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "agent_id",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "evaluator_instance",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Eval3AgentInfo"
                  }
                },
                "404": {
                  "description": "No Agent Info exists with provided keys"
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "put": {
              "summary": "Update one Agent Info",
              "description": "Endpoint to update a specific Agent Info by evaluator_instance, agent_id, agent_group, active_datetime.",
              "operationId": "Eval3UpdateAgentInfo",
              "parameters": [
                {
                  "name": "Eval3UpdateAgentInfoDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/Eval3UpdateAgentInfoDto"
                  }
                },
                {
                  "type": "string",
                  "name": "active_datetime",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "number",
                  "name": "agent_group",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "agent_id",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "evaluator_instance",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Eval3AgentInfo"
                  }
                },
                "400": {
                  "description": "Validation failed. Bad request"
                },
                "404": {
                  "description": "No Agent Info exists with provided keys"
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "delete": {
              "summary": "Delete one Agent Info",
              "description": "Endpoint to delete a specific Agent Info by evaluator_instance, agent_id, agent_group, active_datetime.",
              "operationId": "Eval3DeleteAgentInfo",
              "parameters": [
                {
                  "type": "string",
                  "name": "active_datetime",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "number",
                  "name": "agent_group",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "agent_id",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "evaluator_instance",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Agent Info successfully deleted"
                },
                "404": {
                  "description": "No Agent Info exists with provided keys"
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/eval3/agentPayoff": {
            "get": {
              "summary": "Get all Agent Payoff(s)",
              "description": "Endpoint to retrieve all Agent Payoffs.",
              "operationId": "Eval3GetAgentPayoffs",
              "parameters": [],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Eval3AgentPayoff"
                    }
                  }
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "post": {
              "summary": "Create Agent Payoff(s)",
              "description": "Endpoint to create Agent Payoff(s).",
              "operationId": "Eval3CreateAgentPayoff",
              "parameters": [
                {
                  "name": "Eval3CreateAgentPayoffDtoArray",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/Eval3CreateAgentPayoffDtoArray"
                  }
                }
              ],
              "responses": {
                "201": {
                  "description": "Created successfully",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Eval3AgentPayoff"
                    }
                  }
                },
                "400": {
                  "description": "Validation failed. Bad request"
                },
                "409": {
                  "description": "Conflict - Agent Payoff already exists"
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/eval3/agentPayoff/{agent_payoff_id}/{payoff_key}": {
            "get": {
              "summary": "Get one Agent Payoff",
              "description": "Endpoint to retrieve a specific Agent Payoff by agent_payoff_id and payoff_key.",
              "operationId": "Eval3GetAgentPayoff",
              "parameters": [
                {
                  "type": "string",
                  "name": "payoff_key",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "number",
                  "name": "agent_payoff_id",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Eval3AgentPayoff"
                  }
                },
                "404": {
                  "description": "No Agent Payoff exists with provided keys"
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "put": {
              "summary": "Update one Agent Payoff",
              "description": "Endpoint to update a specific Agent Payoff by agent_payoff_id and payoff_key.",
              "operationId": "Eval3UpdateAgentPayoff",
              "parameters": [
                {
                  "name": "Eval3UpdateAgentPayoffDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/Eval3UpdateAgentPayoffDto"
                  }
                },
                {
                  "type": "string",
                  "name": "payoff_key",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "number",
                  "name": "agent_payoff_id",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Eval3AgentPayoff"
                  }
                },
                "400": {
                  "description": "Validation failed. Bad request"
                },
                "404": {
                  "description": "No Agent Payoff exists with provided keys"
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "delete": {
              "summary": "Delete one Agent Payoff",
              "description": "Endpoint to delete a specific Agent Payoff by agent_payoff_id and payoff_key.",
              "operationId": "Eval3DeleteAgentPayoff",
              "parameters": [
                {
                  "type": "string",
                  "name": "payoff_key",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "number",
                  "name": "agent_payoff_id",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Agent Payoff successfully deleted"
                },
                "404": {
                  "description": "No Agent Payoff exists with provided keys"
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/eval3/max/callDiagonalModel": {
            "get": {
              "summary": "Get max Call Diagonal Model ID",
              "description": "Endpoint to retrieve maximum ID of Call Diagonal Model.",
              "operationId": "Eval3GetMaxCallDiagonalModelId",
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/MaxDto"
                  }
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/eval3/callDiagonalModel": {
            "get": {
              "summary": "Get all Call Diagonal Model(s)",
              "description": "Endpoint to retrieve all Call Diagonal Models.",
              "operationId": "Eval3GetCallDiagonalModels",
              "parameters": [],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Eval3CallDiagonalModel"
                    }
                  }
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "post": {
              "summary": "Create Call Diagonal Model(s)",
              "description": "Endpoint to create Call Diagonal Model(s).",
              "operationId": "Eval3CreateCallDiagonalModel",
              "parameters": [
                {
                  "name": "Eval3CreateCallDiagonalModelDtoArray",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/Eval3CreateCallDiagonalModelDtoArray"
                  }
                }
              ],
              "responses": {
                "201": {
                  "description": "Created successfully",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Eval3CallDiagonalModel"
                    }
                  }
                },
                "400": {
                  "description": "Validation failed. Bad request"
                },
                "409": {
                  "description": "Conflict - Call Diagonal Model already exists"
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/eval3/callDiagonalModel/{call_diagonal_model_id}/{callgroup_id}": {
            "get": {
              "summary": "Get one Call Diagonal Model",
              "description": "Endpoint to retrieve a specific Call Diagonal Model by call_diagonal_model_id and callgroup_id.",
              "operationId": "Eval3GetCallDiagonalModel",
              "parameters": [
                {
                  "type": "number",
                  "name": "callgroup_id",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "number",
                  "name": "call_diagonal_model_id",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Eval3CallDiagonalModel"
                  }
                },
                "404": {
                  "description": "No Call Diagonal Model exists with provided keys"
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "put": {
              "summary": "Update one Call Diagonal Model",
              "description": "Endpoint to update a specific Call Diagonal Model by call_diagonal_model_id and payoff_key.",
              "operationId": "Eval3UpdateCallDiagonalModel",
              "parameters": [
                {
                  "name": "Eval3UpdateCallDiagonalModelDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/Eval3UpdateCallDiagonalModelDto"
                  }
                },
                {
                  "type": "number",
                  "name": "callgroup_id",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "number",
                  "name": "call_diagonal_model_id",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Eval3CallDiagonalModel"
                  }
                },
                "400": {
                  "description": "Validation failed. Bad request"
                },
                "404": {
                  "description": "No Call Diagonal Model exists with provided keys"
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "delete": {
              "summary": "Delete one Call Diagonal Model",
              "description": "Endpoint to delete a specific Call Diagonal Model by call_diagonal_model_id and payoff_key.",
              "operationId": "Eval3DeleteCallDiagonalModel",
              "parameters": [
                {
                  "type": "number",
                  "name": "callgroup_id",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "number",
                  "name": "call_diagonal_model_id",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Call Diagonal Model successfully deleted"
                },
                "404": {
                  "description": "No Call Diagonal Model exists with provided keys"
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/eval3/globalConfiguration": {
            "get": {
              "summary": "Get all Global Configuration(s)",
              "description": "Endpoint to retrieve all Global Configurations.",
              "operationId": "Eval3GetGlobalConfigurations",
              "parameters": [],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Eval3GlobalConfiguration"
                    }
                  }
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "post": {
              "summary": "Create Global Configuration(s)",
              "description": "Endpoint to create Global Configuration(s).",
              "operationId": "Eval3CreateGlobalConfiguration",
              "parameters": [
                {
                  "name": "Eval3CreateGlobalConfigurationDtoArray",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/Eval3CreateGlobalConfigurationDtoArray"
                  }
                }
              ],
              "responses": {
                "201": {
                  "description": "Created successfully",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Eval3GlobalConfiguration"
                    }
                  }
                },
                "400": {
                  "description": "Validation failed. Bad request"
                },
                "409": {
                  "description": "Conflict - Global Configuration already exists"
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/eval3/globalConfiguration/{global_configuration_id}": {
            "get": {
              "summary": "Get one Global Configuration",
              "description": "Endpoint to retrieve a specific Global Configuration by global_configuration_id.",
              "operationId": "Eval3GetGlobalConfiguration",
              "parameters": [
                {
                  "type": "number",
                  "name": "global_configuration_id",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Eval3GlobalConfiguration"
                  }
                },
                "404": {
                  "description": "No Global Configuration exists with provided id"
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "put": {
              "summary": "Update one Global Configuration",
              "description": "Endpoint to update a specific Global Configuration by global_configuration_id.",
              "operationId": "Eval3UpdateGlobalConfiguration",
              "parameters": [
                {
                  "name": "Eval3UpdateGlobalConfigurationDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/Eval3UpdateGlobalConfigurationDto"
                  }
                },
                {
                  "type": "number",
                  "name": "global_configuration_id",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Eval3GlobalConfiguration"
                  }
                },
                "400": {
                  "description": "Validation failed. Bad request"
                },
                "404": {
                  "description": "No Global Configuration exists with provided id"
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "delete": {
              "summary": "Delete one Global Configuration",
              "description": "Endpoint to delete a specific Global Configuration by global_configuration_id.",
              "operationId": "Eval3DeleteGlobalConfiguration",
              "parameters": [
                {
                  "type": "number",
                  "name": "global_configuration_id",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Global Configuration successfully deleted"
                },
                "404": {
                  "description": "No Global Configuration exists with provided id"
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/eval3/modelNotifier": {
            "get": {
              "summary": "Get all Model Notifier(s)",
              "description": "Endpoint to retrieve all Model Notifiers.",
              "operationId": "Eval3GetModelNotifiers",
              "parameters": [],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Eval3ModelNotifier"
                    }
                  }
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "post": {
              "summary": "Create Model Notifier(s)",
              "description": "Endpoint to create Model Notifier(s).",
              "operationId": "Eval3CreateModelNotifier",
              "parameters": [
                {
                  "name": "Eval3CreateModelNotifierDtoArray",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/Eval3CreateModelNotifierDtoArray"
                  }
                }
              ],
              "responses": {
                "201": {
                  "description": "Created successfully",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Eval3ModelNotifier"
                    }
                  }
                },
                "400": {
                  "description": "Validation failed. Bad request"
                },
                "409": {
                  "description": "Conflict - Model Notifier already exists"
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/eval3/modelNotifier/{id}": {
            "get": {
              "summary": "Get one Model Notifier",
              "description": "Endpoint to retrieve a specific Model Notifier by id.",
              "operationId": "Eval3GetModelNotifier",
              "parameters": [
                {
                  "type": "number",
                  "name": "id",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Eval3ModelNotifier"
                  }
                },
                "404": {
                  "description": "No Model Notifier exists with provided id"
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "put": {
              "summary": "Update one Model Notifier",
              "description": "Endpoint to update a specific Model Notifier by id.",
              "operationId": "Eval3UpdateModelNotifier",
              "parameters": [
                {
                  "name": "Eval3UpdateModelNotifierDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/Eval3UpdateModelNotifierDto"
                  }
                },
                {
                  "type": "number",
                  "name": "id",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Eval3ModelNotifier"
                  }
                },
                "400": {
                  "description": "Validation failed. Bad request"
                },
                "404": {
                  "description": "No Model Notifier exists with provided id"
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "delete": {
              "summary": "Delete one Model Notifier",
              "description": "Endpoint to delete a specific Model Notifier by id.",
              "operationId": "Eval3DeleteModelNotifier",
              "parameters": [
                {
                  "type": "number",
                  "name": "id",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Model Notifier successfully deleted"
                },
                "404": {
                  "description": "No Model Notifier exists with provided id"
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/eval3/skillsetCallgroupRates": {
            "get": {
              "summary": "Get all Skillset Callgroup Rate(s)",
              "description": "Endpoint to retrieve all Skillset Callgroup Rates.",
              "operationId": "Eval3GetSkillsetCallgroupRates",
              "parameters": [],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Eval3SkillsetCallgroupRates"
                    }
                  }
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "post": {
              "summary": "Create Skillset Callgroup Rate(s)",
              "description": "Endpoint to create Skillset Callgroup Rate(s).",
              "operationId": "Eval3CreateSkillsetCallgroupRates",
              "parameters": [
                {
                  "name": "Eval3CreateSkillsetCallgroupRatesDtoArray",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/Eval3CreateSkillsetCallgroupRatesDtoArray"
                  }
                }
              ],
              "responses": {
                "201": {
                  "description": "Created successfully",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Eval3SkillsetCallgroupRates"
                    }
                  }
                },
                "400": {
                  "description": "Validation failed. Bad request"
                },
                "409": {
                  "description": "Conflict - Skillset Callgroup Rate already exists"
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/eval3/skillsetCallgroupRates/{skillset_callgroup_rates_id}/{skillset_string}": {
            "get": {
              "summary": "Get one Skillset Callgroup Rate",
              "description": "Endpoint to retrieve a specific Skillset Callgroup Rate by skillset_callgroup_rates_id and skillset_string.",
              "operationId": "Eval3GetSkillsetCallgroupRate",
              "parameters": [
                {
                  "type": "string",
                  "name": "skillset_string",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "number",
                  "name": "skillset_callgroup_rates_id",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Eval3SkillsetCallgroupRates"
                  }
                },
                "404": {
                  "description": "No Skillset Callgroup Rates exists with provided keys"
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "put": {
              "summary": "Update one Skillset Callgroup Rate",
              "description": "Endpoint to update a specific Skillset Callgroup Rate by skillset_callgroup_rates_id and skillset_string.",
              "operationId": "Eval3UpdateSkillsetCallgroupRate",
              "parameters": [
                {
                  "name": "Eval3UpdateSkillsetCallgroupRatesDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/Eval3UpdateSkillsetCallgroupRatesDto"
                  }
                },
                {
                  "type": "string",
                  "name": "skillset_string",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "number",
                  "name": "skillset_callgroup_rates_id",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Eval3SkillsetCallgroupRates"
                  }
                },
                "400": {
                  "description": "Validation failed. Bad request"
                },
                "404": {
                  "description": "No Skillset Callgroup Rate exists with provided keys"
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "delete": {
              "summary": "Delete one Skillset Callgroup Rate",
              "description": "Endpoint to delete a specific Skillset Callgroup Rate by skillset_callgroup_rates_id and skillset_string.",
              "operationId": "Eval3DeleteSkillsetCallgroupRate",
              "parameters": [
                {
                  "type": "string",
                  "name": "skillset_string",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "number",
                  "name": "skillset_callgroup_rates_id",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Skillset Callgroup Rate successfully deleted"
                },
                "404": {
                  "description": "No Skillset Callgroup Rate exists with provided keys"
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/sim/eval3/program": {
            "get": {
              "summary": "Get all Program(s)",
              "description": "Endpoint to retrieve all Programs.",
              "operationId": "Eval3SimGetPrograms",
              "parameters": [],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Eval3SimProgram"
                    }
                  }
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "post": {
              "summary": "Create Program(s)",
              "description": "Endpoint to create Program(s).",
              "operationId": "Eval3SimCreateProgram",
              "parameters": [
                {
                  "name": "Eval3CreateProgramDtoArray",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/Eval3CreateProgramDtoArray"
                  }
                }
              ],
              "responses": {
                "201": {
                  "description": "Created successfully",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Eval3SimProgram"
                    }
                  }
                },
                "400": {
                  "description": "Validation failed. Bad request"
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/sim/eval3/program/{program_id}": {
            "get": {
              "summary": "Get one Program",
              "description": "Endpoint to retrieve a specific Program by program_id.",
              "operationId": "Eval3SimSimGetProgram",
              "parameters": [
                {
                  "type": "number",
                  "name": "program_id",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Eval3SimProgram"
                  }
                },
                "404": {
                  "description": "No Program exists with provided id"
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "put": {
              "summary": "Update one Program",
              "description": "Endpoint to update a specific Program by program_id.",
              "operationId": "Eval3SimUpdateProgram",
              "parameters": [
                {
                  "name": "Eval3UpdateProgramDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/Eval3UpdateProgramDto"
                  }
                },
                {
                  "type": "number",
                  "name": "program_id",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Eval3SimProgram"
                  }
                },
                "400": {
                  "description": "Validation failed. Bad request"
                },
                "404": {
                  "description": "No Program exists with provided id"
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "delete": {
              "summary": "Delete one Program",
              "description": "Endpoint to delete a specific Program by program_id.",
              "operationId": "Eval3SimDeleteProgram",
              "parameters": [
                {
                  "type": "number",
                  "name": "program_id",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Program successfully deleted"
                },
                "400": {
                  "description": "Unable to delete. Program has related data."
                },
                "404": {
                  "description": "No Program exists with provided id"
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/sim/eval3/callgroup": {
            "get": {
              "summary": "Get all Callgroup(s)",
              "description": "Endpoint to retrieve all Callgroups.",
              "operationId": "Eval3SimGetCallGroups",
              "parameters": [],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Eval3SimCallgroup"
                    }
                  }
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "post": {
              "summary": "Create Callgroup(s)",
              "description": "Endpoint to create Callgroup(s).",
              "operationId": "Eval3SimCreateCallgroup",
              "parameters": [
                {
                  "name": "Eval3CreateCallgroupDtoArray",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/Eval3CreateCallgroupDtoArray"
                  }
                }
              ],
              "responses": {
                "201": {
                  "description": "Created successfully",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Eval3SimCallgroup"
                    }
                  }
                },
                "400": {
                  "description": "Validation failed. Bad request"
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/sim/eval3/callgroup/{callgroup_tree_id}": {
            "get": {
              "summary": "Get one Callgroup",
              "description": "Endpoint to retrieve a specific Callgroup by callgroup_tree_id.",
              "operationId": "Eval3SimGetCallgroup",
              "parameters": [
                {
                  "type": "number",
                  "name": "callgroup_tree_id",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Eval3SimCallgroup"
                  }
                },
                "404": {
                  "description": "No Callgroup exists with provided id"
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "put": {
              "summary": "Update one Callgroup",
              "description": "Endpoint to update a specific Callgroup by callgroup_tree_id.",
              "operationId": "Eval3SimUpdateCallgroup",
              "parameters": [
                {
                  "name": "Eval3UpdateCallgroupDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/Eval3UpdateCallgroupDto"
                  }
                },
                {
                  "type": "number",
                  "name": "callgroup_tree_id",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Eval3SimCallgroup"
                  }
                },
                "400": {
                  "description": "Validation failed. Bad request"
                },
                "404": {
                  "description": "No Callgroup exists with provided id"
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "delete": {
              "summary": "Delete one Callgroup",
              "description": "Endpoint to delete a specific Callgroup by callgroup_tree_id.",
              "operationId": "Eval3SimDeleteCallgroup",
              "parameters": [
                {
                  "type": "number",
                  "name": "callgroup_tree_id",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Callgroup successfully deleted"
                },
                "400": {
                  "description": "Unable to delete. Callgroup has related data."
                },
                "404": {
                  "description": "No Callgroup exists with provided id"
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/sim/eval3/modelunitConfiguration": {
            "get": {
              "summary": "Get all Modelunit Configuration(s)",
              "description": "Endpoint to retrieve all Modelunit Configurations.",
              "operationId": "Eval3SimGetModelunitConfigurations",
              "parameters": [],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Eval3SimModelunitConfiguration"
                    }
                  }
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "post": {
              "summary": "Create Modelunit Configuration(s)",
              "description": "Endpoint to create Modelunit Configuration(s).",
              "operationId": "Eval3SimCreateModelunitConfiguration",
              "parameters": [
                {
                  "name": "Eval3CreateModelunitConfigurationDtoArray",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/Eval3CreateModelunitConfigurationDtoArray"
                  }
                }
              ],
              "responses": {
                "201": {
                  "description": "Created successfully",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Eval3SimModelunitConfiguration"
                    }
                  }
                },
                "400": {
                  "description": "Validation failed. Bad request"
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/sim/eval3/modelunitConfiguration/{modelunit_configuration_id}": {
            "get": {
              "summary": "Get one Modelunit Configuration",
              "description": "Endpoint to retrieve a specific Modelunit Configuration by modelunit_configuration_id.",
              "operationId": "Eval3SimGetModelunitConfiguration",
              "parameters": [
                {
                  "type": "number",
                  "name": "modelunit_configuration_id",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Eval3SimModelunitConfiguration"
                  }
                },
                "404": {
                  "description": "No Modelunit Configuration exists with provided id"
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "put": {
              "summary": "Update one Modelunit Configuration",
              "description": "Endpoint to update a specific Modelunit Configuration by modelunit_configuration_id.",
              "operationId": "Eval3SimUpdatemodelunit_configuration_id",
              "parameters": [
                {
                  "name": "Eval3UpdateModelunitConfigurationDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/Eval3UpdateModelunitConfigurationDto"
                  }
                },
                {
                  "type": "number",
                  "name": "modelunit_configuration_id",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Eval3SimModelunitConfiguration"
                  }
                },
                "400": {
                  "description": "Validation failed. Bad request"
                },
                "404": {
                  "description": "No Modelunit Configuration exists with provided id"
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "delete": {
              "summary": "Delete one Modelunit Configuration",
              "description": "Endpoint to delete a specific Modelunit Configuration by modelunit_configuration_id.",
              "operationId": "Eval3SimDeleteModelunitConfiguration",
              "parameters": [
                {
                  "type": "number",
                  "name": "modelunit_configuration_id",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Modelunit Configuration successfully deleted"
                },
                "400": {
                  "description": "Unable to delete. Modelunit Configuration has related data."
                },
                "404": {
                  "description": "No Modelunit Configuration exists with provided id"
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/sim/eval3/modelunit": {
            "get": {
              "summary": "Get all Modelunit(s)",
              "description": "Endpoint to retrieve all Modelunits.",
              "operationId": "Eval3SimGetModelunits",
              "parameters": [],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Eval3SimModelunit"
                    }
                  }
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "post": {
              "summary": "Create Modelunit(s)",
              "description": "Endpoint to create Modelunit(s).",
              "operationId": "Eval3SimCreateModelunit",
              "parameters": [
                {
                  "name": "Eval3CreateModelunitDtoArray",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/Eval3CreateModelunitDtoArray"
                  }
                }
              ],
              "responses": {
                "201": {
                  "description": "Created successfully",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Eval3SimModelunit"
                    }
                  }
                },
                "400": {
                  "description": "Validation failed. Bad request"
                },
                "404": {
                  "description": "Callgroup/Modelunit Configuration not found"
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/sim/eval3/modelunit/{modelunit_id}": {
            "get": {
              "summary": "Get one Modelunit",
              "description": "Endpoint to retrieve a specific Modelunit by modelunit_id.",
              "operationId": "Eval3SimGetModelunit",
              "parameters": [
                {
                  "type": "number",
                  "name": "modelunit_id",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Eval3SimModelunit"
                  }
                },
                "404": {
                  "description": "No Modelunit exists with provided id"
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "put": {
              "summary": "Update one Modelunit",
              "description": "Endpoint to update a specific Modelunit by modelunit_id.",
              "operationId": "Eval3SimUpdateModelunit",
              "parameters": [
                {
                  "name": "Eval3UpdateModelunitDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/Eval3UpdateModelunitDto"
                  }
                },
                {
                  "type": "number",
                  "name": "modelunit_id",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Eval3SimModelunit"
                  }
                },
                "400": {
                  "description": "Validation failed. Bad request"
                },
                "404": {
                  "description": "No Modelunit exists with provided id"
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "delete": {
              "summary": "Delete one Modelunit",
              "description": "Endpoint to delete a specific Modelunit by modelunit_id.",
              "operationId": "Eval3SimDeleteModelunit",
              "parameters": [
                {
                  "type": "number",
                  "name": "modelunit_id",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Modelunit successfully deleted"
                },
                "400": {
                  "description": "Unable to delete. Modelunit has related data."
                },
                "404": {
                  "description": "No Modelunit exists with provided id"
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/sim/eval3/activemodelunits": {
            "get": {
              "summary": "Get all Active Modelunit(s)",
              "description": "Endpoint to retrieve all Active Modelunits.",
              "operationId": "Eval3SimGetActivemodelunits",
              "parameters": [],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Eval3SimActivemodelunits"
                    }
                  }
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "post": {
              "summary": "Create Active Modelunit(s)",
              "description": "Endpoint to create Active Modelunit(s).",
              "operationId": "Eval3SimCreateActivemodelunits",
              "parameters": [
                {
                  "name": "Eval3CreateActivemodelunitsDtoArray",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/Eval3CreateActivemodelunitsDtoArray"
                  }
                }
              ],
              "responses": {
                "201": {
                  "description": "Created successfully",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Eval3SimActivemodelunits"
                    }
                  }
                },
                "400": {
                  "description": "Validation failed. Bad request"
                },
                "404": {
                  "description": "Modelunit/Program not found"
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/sim/eval3/activemodelunits/{modelunit_id}/{active_datetime}": {
            "get": {
              "summary": "Get one Active Modelunit",
              "description": "Endpoint to retrieve a specific Active Modelunit by modelunit_id and active_datetime.",
              "operationId": "Eval3SimGetActivemodelunit",
              "parameters": [
                {
                  "type": "string",
                  "name": "active_datetime",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "number",
                  "name": "modelunit_id",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Eval3SimActivemodelunits"
                  }
                },
                "404": {
                  "description": "No Active Modelunit exists with provided keys"
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "put": {
              "summary": "Update one Active Modelunit",
              "description": "Endpoint to update a specific Active Modelunit by modelunit_id and active_datetime.",
              "operationId": "Eval3SimUpdateActivemodelunit",
              "parameters": [
                {
                  "name": "Eval3UpdateActivemodelunitsDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/Eval3UpdateActivemodelunitsDto"
                  }
                },
                {
                  "type": "string",
                  "name": "active_datetime",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "number",
                  "name": "modelunit_id",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Eval3SimActivemodelunits"
                  }
                },
                "400": {
                  "description": "Validation failed. Bad request"
                },
                "404": {
                  "description": "No Active Modelunit exists with provided keys"
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "delete": {
              "summary": "Delete one Active Modelunit",
              "description": "Endpoint to delete a specific Active Modelunit by modelunit_id and active_datetime.",
              "operationId": "Eval3SimDeleteActivemodelunit",
              "parameters": [
                {
                  "type": "string",
                  "name": "active_datetime",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "number",
                  "name": "modelunit_id",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Active Modelunit successfully deleted"
                },
                "404": {
                  "description": "No Active Modelunit exists with provided keys"
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/sim/eval3/max/agentDiagonalModel": {
            "get": {
              "summary": "Get max Agent Diagonal Model ID",
              "description": "Endpoint to retrieve maximum ID of Agent Diagonal Model.",
              "operationId": "Eval3SimGetMaxAgentDiagonalModelId",
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/MaxDto"
                  }
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/sim/eval3/agentDiagonalModel": {
            "get": {
              "summary": "Get all Agent Diagonal Model(s)",
              "description": "Endpoint to retrieve all Agent Diagonal Models.",
              "operationId": "Eval3SimGetAgentDiagonalModels",
              "parameters": [],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Eval3SimAgentDiagonalModel"
                    }
                  }
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "post": {
              "summary": "Create Agent Diagonal Model(s)",
              "description": "Endpoint to create Agent Diagonal Model(s).",
              "operationId": "Eval3SimCreateAgentDiagonalModel",
              "parameters": [
                {
                  "name": "Eval3CreateAgentDiagonalModelDtoArray",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/Eval3CreateAgentDiagonalModelDtoArray"
                  }
                }
              ],
              "responses": {
                "201": {
                  "description": "Created successfully",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Eval3SimAgentDiagonalModel"
                    }
                  }
                },
                "400": {
                  "description": "Validation failed. Bad request"
                },
                "409": {
                  "description": "Conflict - Agent Diagonal Model already exists"
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/sim/eval3/agentDiagonalModel/{agent_diagonal_model_id}/{agent_id}": {
            "get": {
              "summary": "Get one Agent Diagonal Model",
              "description": "Endpoint to retrieve a specific Agent Diagonal Model by agent_diagonal_model_id and agent_id.",
              "operationId": "Eval3SimGetAgentDiagonalModel",
              "parameters": [
                {
                  "type": "string",
                  "name": "agent_id",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "number",
                  "name": "agent_diagonal_model_id",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Eval3SimAgentDiagonalModel"
                  }
                },
                "404": {
                  "description": "No Agent Diagonal Model exists with provided keys"
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "put": {
              "summary": "Update one Agent Diagonal Model",
              "description": "Endpoint to update a specific Agent Diagonal Model by agent_diagonal_model_id and agent_id.",
              "operationId": "Eval3SimUpdateAgentDiagonalModel",
              "parameters": [
                {
                  "name": "Eval3UpdateAgentDiagonalModelDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/Eval3UpdateAgentDiagonalModelDto"
                  }
                },
                {
                  "type": "string",
                  "name": "agent_id",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "number",
                  "name": "agent_diagonal_model_id",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Eval3SimAgentDiagonalModel"
                  }
                },
                "400": {
                  "description": "Validation failed. Bad request"
                },
                "404": {
                  "description": "No Agent Diagonal Model exists with provided keys"
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "delete": {
              "summary": "Delete one Agent Diagonal Model",
              "description": "Endpoint to delete a specific Agent Diagonal Model by agent_diagonal_model_id and agent_id.",
              "operationId": "Eval3SimDeleteAgentDiagonalModel",
              "parameters": [
                {
                  "type": "string",
                  "name": "agent_id",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "number",
                  "name": "agent_diagonal_model_id",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Agent Diagonal Model successfully deleted"
                },
                "404": {
                  "description": "No Agent Diagonal Model exists with provided keys"
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/sim/eval3/agentInfo": {
            "get": {
              "summary": "Get all Agent Info(s)",
              "description": "Endpoint to retrieve all Agent Infos.",
              "operationId": "Eval3SimGetAgentInfos",
              "parameters": [],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Eval3SimAgentInfo"
                    }
                  }
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "post": {
              "summary": "Create Agent Info(s)",
              "description": "Endpoint to create Agent Info(s).",
              "operationId": "Eval3SimCreateAgentInfo",
              "parameters": [
                {
                  "name": "Eval3CreateAgentInfoDtoArray",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/Eval3CreateAgentInfoDtoArray"
                  }
                }
              ],
              "responses": {
                "201": {
                  "description": "Created successfully",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Eval3SimAgentInfo"
                    }
                  }
                },
                "400": {
                  "description": "Validation failed. Bad request"
                },
                "409": {
                  "description": "Conflict - Agent Info already exists"
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/sim/eval3/agentInfo/{evaluator_instance}/{agent_id}/{agent_group}/{active_datetime}": {
            "get": {
              "summary": "Get one Agent Info",
              "description": "Endpoint to retrieve a specific Agent Info by evaluator_instance, agent_id, agent_group and active_datetime.",
              "operationId": "Eval3SimGetAgentInfo",
              "parameters": [
                {
                  "type": "string",
                  "name": "active_datetime",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "number",
                  "name": "agent_group",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "agent_id",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "evaluator_instance",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Eval3SimAgentInfo"
                  }
                },
                "404": {
                  "description": "No Agent Info exists with provided keys"
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "put": {
              "summary": "Update one Agent Info",
              "description": "Endpoint to update a specific Agent Info by evaluator_instance, agent_id, agent_group, active_datetime.",
              "operationId": "Eval3SimUpdateAgentInfo",
              "parameters": [
                {
                  "name": "Eval3UpdateAgentInfoDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/Eval3UpdateAgentInfoDto"
                  }
                },
                {
                  "type": "string",
                  "name": "active_datetime",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "number",
                  "name": "agent_group",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "agent_id",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "evaluator_instance",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Eval3SimAgentInfo"
                  }
                },
                "400": {
                  "description": "Validation failed. Bad request"
                },
                "404": {
                  "description": "No Agent Info exists with provided keys"
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "delete": {
              "summary": "Delete one Agent Info",
              "description": "Endpoint to delete a specific Agent Info by evaluator_instance, agent_id, agent_group, active_datetime.",
              "operationId": "Eval3SimDeleteAgentInfo",
              "parameters": [
                {
                  "type": "string",
                  "name": "active_datetime",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "number",
                  "name": "agent_group",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "agent_id",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "evaluator_instance",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Agent Info successfully deleted"
                },
                "404": {
                  "description": "No Agent Info exists with provided keys"
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/sim/eval3/agentPayoff": {
            "get": {
              "summary": "Get all Agent Payoff(s)",
              "description": "Endpoint to retrieve all Agent Payoffs.",
              "operationId": "Eval3SimGetAgentPayoffs",
              "parameters": [],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Eval3SimAgentPayoff"
                    }
                  }
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "post": {
              "summary": "Create Agent Payoff(s)",
              "description": "Endpoint to create Agent Payoff(s).",
              "operationId": "Eval3SimCreateAgentPayoff",
              "parameters": [
                {
                  "name": "Eval3CreateAgentPayoffDtoArray",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/Eval3CreateAgentPayoffDtoArray"
                  }
                }
              ],
              "responses": {
                "201": {
                  "description": "Created successfully",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Eval3SimAgentPayoff"
                    }
                  }
                },
                "400": {
                  "description": "Validation failed. Bad request"
                },
                "409": {
                  "description": "Conflict - Agent Payoff already exists"
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/sim/eval3/agentPayoff/{agent_payoff_id}/{payoff_key}": {
            "get": {
              "summary": "Get one Agent Payoff",
              "description": "Endpoint to retrieve a specific Agent Payoff by agent_payoff_id and payoff_key.",
              "operationId": "Eval3SimGetAgentPayoff",
              "parameters": [
                {
                  "type": "string",
                  "name": "payoff_key",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "number",
                  "name": "agent_payoff_id",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Eval3SimAgentPayoff"
                  }
                },
                "404": {
                  "description": "No Agent Payoff exists with provided keys"
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "put": {
              "summary": "Update one Agent Payoff",
              "description": "Endpoint to update a specific Agent Payoff by agent_payoff_id and payoff_key.",
              "operationId": "Eval3SimUpdateAgentPayoff",
              "parameters": [
                {
                  "name": "Eval3UpdateAgentPayoffDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/Eval3UpdateAgentPayoffDto"
                  }
                },
                {
                  "type": "string",
                  "name": "payoff_key",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "number",
                  "name": "agent_payoff_id",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Eval3SimAgentPayoff"
                  }
                },
                "400": {
                  "description": "Validation failed. Bad request"
                },
                "404": {
                  "description": "No Agent Payoff exists with provided keys"
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "delete": {
              "summary": "Delete one Agent Payoff",
              "description": "Endpoint to delete a specific Agent Payoff by agent_payoff_id and payoff_key.",
              "operationId": "Eval3SimDeleteAgentPayoff",
              "parameters": [
                {
                  "type": "string",
                  "name": "payoff_key",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "number",
                  "name": "agent_payoff_id",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Agent Payoff successfully deleted"
                },
                "404": {
                  "description": "No Agent Payoff exists with provided keys"
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/sim/eval3/max/callDiagonalModel": {
            "get": {
              "summary": "Get max Call Diagonal Model ID",
              "description": "Endpoint to retrieve maximum ID of Call Diagonal Model.",
              "operationId": "Eval3SimGetMaxCallDiagonalModelId",
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/MaxDto"
                  }
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/sim/eval3/callDiagonalModel": {
            "get": {
              "summary": "Get all Call Diagonal Model(s)",
              "description": "Endpoint to retrieve all Call Diagonal Models.",
              "operationId": "Eval3SimGetCallDiagonalModels",
              "parameters": [],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Eval3SimCallDiagonalModel"
                    }
                  }
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "post": {
              "summary": "Create Call Diagonal Model(s)",
              "description": "Endpoint to create Call Diagonal Model(s).",
              "operationId": "Eval3SimCreateCallDiagonalModel",
              "parameters": [
                {
                  "name": "Eval3CreateCallDiagonalModelDtoArray",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/Eval3CreateCallDiagonalModelDtoArray"
                  }
                }
              ],
              "responses": {
                "201": {
                  "description": "Created successfully",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Eval3SimCallDiagonalModel"
                    }
                  }
                },
                "400": {
                  "description": "Validation failed. Bad request"
                },
                "409": {
                  "description": "Conflict - Call Diagonal Model already exists"
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/sim/eval3/callDiagonalModel/{call_diagonal_model_id}/{callgroup_id}": {
            "get": {
              "summary": "Get one Call Diagonal Model",
              "description": "Endpoint to retrieve a specific Call Diagonal Model by call_diagonal_model_id and callgroup_id.",
              "operationId": "Eval3SimGetCallDiagonalModel",
              "parameters": [
                {
                  "type": "number",
                  "name": "callgroup_id",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "number",
                  "name": "call_diagonal_model_id",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Eval3SimCallDiagonalModel"
                  }
                },
                "404": {
                  "description": "No Call Diagonal Model exists with provided keys"
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "put": {
              "summary": "Update one Call Diagonal Model",
              "description": "Endpoint to update a specific Call Diagonal Model by call_diagonal_model_id and payoff_key.",
              "operationId": "Eval3SimUpdateCallDiagonalModel",
              "parameters": [
                {
                  "name": "Eval3UpdateCallDiagonalModelDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/Eval3UpdateCallDiagonalModelDto"
                  }
                },
                {
                  "type": "number",
                  "name": "callgroup_id",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "number",
                  "name": "call_diagonal_model_id",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Eval3SimCallDiagonalModel"
                  }
                },
                "400": {
                  "description": "Validation failed. Bad request"
                },
                "404": {
                  "description": "No Call Diagonal Model exists with provided keys"
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "delete": {
              "summary": "Delete one Call Diagonal Model",
              "description": "Endpoint to delete a specific Call Diagonal Model by call_diagonal_model_id and payoff_key.",
              "operationId": "Eval3SimDeleteCallDiagonalModel",
              "parameters": [
                {
                  "type": "number",
                  "name": "callgroup_id",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "number",
                  "name": "call_diagonal_model_id",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Call Diagonal Model successfully deleted"
                },
                "404": {
                  "description": "No Call Diagonal Model exists with provided keys"
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/sim/eval3/globalConfiguration": {
            "get": {
              "summary": "Get all Global Configuration(s)",
              "description": "Endpoint to retrieve all Global Configurations.",
              "operationId": "Eval3SimGetGlobalConfigurations",
              "parameters": [],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Eval3SimGlobalConfiguration"
                    }
                  }
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "post": {
              "summary": "Create Global Configuration(s)",
              "description": "Endpoint to create Global Configuration(s).",
              "operationId": "Eval3SimCreateGlobalConfiguration",
              "parameters": [
                {
                  "name": "Eval3CreateGlobalConfigurationDtoArray",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/Eval3CreateGlobalConfigurationDtoArray"
                  }
                }
              ],
              "responses": {
                "201": {
                  "description": "Created successfully",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Eval3SimGlobalConfiguration"
                    }
                  }
                },
                "400": {
                  "description": "Validation failed. Bad request"
                },
                "409": {
                  "description": "Conflict - Global Configuration already exists"
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/sim/eval3/globalConfiguration/{global_configuration_id}": {
            "get": {
              "summary": "Get one Global Configuration",
              "description": "Endpoint to retrieve a specific Global Configuration by global_configuration_id.",
              "operationId": "Eval3SimGetGlobalConfiguration",
              "parameters": [
                {
                  "type": "number",
                  "name": "global_configuration_id",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Eval3SimGlobalConfiguration"
                  }
                },
                "404": {
                  "description": "No Global Configuration exists with provided id"
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "put": {
              "summary": "Update one Global Configuration",
              "description": "Endpoint to update a specific Global Configuration by global_configuration_id.",
              "operationId": "Eval3SimUpdateGlobalConfiguration",
              "parameters": [
                {
                  "name": "Eval3UpdateGlobalConfigurationDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/Eval3UpdateGlobalConfigurationDto"
                  }
                },
                {
                  "type": "number",
                  "name": "global_configuration_id",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Eval3SimGlobalConfiguration"
                  }
                },
                "400": {
                  "description": "Validation failed. Bad request"
                },
                "404": {
                  "description": "No Global Configuration exists with provided id"
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "delete": {
              "summary": "Delete one Global Configuration",
              "description": "Endpoint to delete a specific Global Configuration by global_configuration_id.",
              "operationId": "Eval3SimDeleteGlobalConfiguration",
              "parameters": [
                {
                  "type": "number",
                  "name": "global_configuration_id",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Global Configuration successfully deleted"
                },
                "404": {
                  "description": "No Global Configuration exists with provided id"
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/sim/eval3/modelNotifier": {
            "get": {
              "summary": "Get all Model Notifier(s)",
              "description": "Endpoint to retrieve all Model Notifiers.",
              "operationId": "Eval3SimGetModelNotifiers",
              "parameters": [],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Eval3SimModelNotifier"
                    }
                  }
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "post": {
              "summary": "Create Model Notifier(s)",
              "description": "Endpoint to create Model Notifier(s).",
              "operationId": "Eval3SimCreateModelNotifier",
              "parameters": [
                {
                  "name": "Eval3CreateModelNotifierDtoArray",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/Eval3CreateModelNotifierDtoArray"
                  }
                }
              ],
              "responses": {
                "201": {
                  "description": "Created successfully",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Eval3SimModelNotifier"
                    }
                  }
                },
                "400": {
                  "description": "Validation failed. Bad request"
                },
                "409": {
                  "description": "Conflict - Model Notifier already exists"
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/sim/eval3/modelNotifier/{id}": {
            "get": {
              "summary": "Get one Model Notifier",
              "description": "Endpoint to retrieve a specific Model Notifier by id.",
              "operationId": "Eval3SimGetModelNotifier",
              "parameters": [
                {
                  "type": "number",
                  "name": "id",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Eval3SimModelNotifier"
                  }
                },
                "404": {
                  "description": "No Model Notifier exists with provided id"
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "put": {
              "summary": "Update one Model Notifier",
              "description": "Endpoint to update a specific Model Notifier by id.",
              "operationId": "Eval3SimUpdateModelNotifier",
              "parameters": [
                {
                  "name": "Eval3UpdateModelNotifierDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/Eval3UpdateModelNotifierDto"
                  }
                },
                {
                  "type": "number",
                  "name": "id",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Eval3SimModelNotifier"
                  }
                },
                "400": {
                  "description": "Validation failed. Bad request"
                },
                "404": {
                  "description": "No Model Notifier exists with provided id"
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "delete": {
              "summary": "Delete one Model Notifier",
              "description": "Endpoint to delete a specific Model Notifier by id.",
              "operationId": "Eval3SimDeleteModelNotifier",
              "parameters": [
                {
                  "type": "number",
                  "name": "id",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Model Notifier successfully deleted"
                },
                "404": {
                  "description": "No Model Notifier exists with provided id"
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/sim/eval3/skillsetCallgroupRates": {
            "get": {
              "summary": "Get all Skillset Callgroup Rate(s)",
              "description": "Endpoint to retrieve all Skillset Callgroup Rates.",
              "operationId": "Eval3SimGetSkillsetCallgroupRates",
              "parameters": [],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Eval3SimSkillsetCallgroupRates"
                    }
                  }
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "post": {
              "summary": "Create Skillset Callgroup Rate(s)",
              "description": "Endpoint to create Skillset Callgroup Rate(s).",
              "operationId": "Eval3SimCreateSkillsetCallgroupRates",
              "parameters": [
                {
                  "name": "Eval3CreateSkillsetCallgroupRatesDtoArray",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/Eval3CreateSkillsetCallgroupRatesDtoArray"
                  }
                }
              ],
              "responses": {
                "201": {
                  "description": "Created successfully",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Eval3SimSkillsetCallgroupRates"
                    }
                  }
                },
                "400": {
                  "description": "Validation failed. Bad request"
                },
                "409": {
                  "description": "Conflict - Skillset Callgroup Rate already exists"
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/sim/eval3/skillsetCallgroupRates/{skillset_callgroup_rates_id}/{skillset_string}": {
            "get": {
              "summary": "Get one Skillset Callgroup Rate",
              "description": "Endpoint to retrieve a specific Skillset Callgroup Rate by skillset_callgroup_rates_id and skillset_string.",
              "operationId": "Eval3SimGetSkillsetCallgroupRate",
              "parameters": [
                {
                  "type": "string",
                  "name": "skillset_string",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "number",
                  "name": "skillset_callgroup_rates_id",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Eval3SimSkillsetCallgroupRates"
                  }
                },
                "404": {
                  "description": "No Skillset Callgroup Rates exists with provided keys"
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "put": {
              "summary": "Update one Skillset Callgroup Rate",
              "description": "Endpoint to update a specific Skillset Callgroup Rate by skillset_callgroup_rates_id and skillset_string.",
              "operationId": "Eval3SimUpdateSkillsetCallgroupRate",
              "parameters": [
                {
                  "name": "Eval3UpdateSkillsetCallgroupRatesDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/Eval3UpdateSkillsetCallgroupRatesDto"
                  }
                },
                {
                  "type": "string",
                  "name": "skillset_string",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "number",
                  "name": "skillset_callgroup_rates_id",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Eval3SimSkillsetCallgroupRates"
                  }
                },
                "400": {
                  "description": "Validation failed. Bad request"
                },
                "404": {
                  "description": "No Skillset Callgroup Rate exists with provided keys"
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "delete": {
              "summary": "Delete one Skillset Callgroup Rate",
              "description": "Endpoint to delete a specific Skillset Callgroup Rate by skillset_callgroup_rates_id and skillset_string.",
              "operationId": "Eval3SimDeleteSkillsetCallgroupRate",
              "parameters": [
                {
                  "type": "string",
                  "name": "skillset_string",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "number",
                  "name": "skillset_callgroup_rates_id",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Skillset Callgroup Rate successfully deleted"
                },
                "404": {
                  "description": "No Skillset Callgroup Rate exists with provided keys"
                }
              },
              "tags": [
                "AI Model - Evaluator 3.0 - Simulation"
              ],
              "security": [
                {
                  "bearer": []
                }
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          }
        },
        "definitions": {
          "ServerInformation": {
            "type": "object",
            "properties": {
              "version": {
                "type": "string"
              },
              "routingEntities": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "required": [
              "version"
            ]
          },
          "ServerStatistics": {
            "type": "object",
            "properties": {
              "version": {
                "type": "string",
                "description": "Config Server version"
              },
              "process_platform": {
                "type": "string",
                "description": "Process version"
              },
              "process_pid": {
                "type": "number",
                "description": "Process PID"
              },
              "process_version": {
                "type": "string",
                "description": "Process version"
              },
              "process_uptime": {
                "type": "number",
                "description": "The number of seconds the current Node.js process has been running."
              },
              "process_memory_usage": {
                "type": "object",
                "description": "Object describing the memory usage of the Node.js process in bytes."
              },
              "process_resource_usage": {
                "type": "object",
                "description": "Object describing the resource usage for the current process."
              },
              "os_total_memory": {
                "type": "number",
                "description": "The total amount of system memory in bytes."
              },
              "os_free_memory": {
                "type": "number",
                "description": "The amount of free system memory in bytes."
              },
              "os_load_average": {
                "type": "array",
                "description": "Array containing the 1, 5, and 15 minute load averages.",
                "items": {
                  "type": "string"
                }
              },
              "v8_heap_statistics": {
                "type": "object",
                "description": "Object describing Node.js process heap statistics."
              }
            },
            "required": [
              "version",
              "process_platform",
              "process_pid",
              "process_version",
              "process_uptime",
              "process_memory_usage",
              "process_resource_usage",
              "os_total_memory",
              "os_free_memory",
              "os_load_average",
              "v8_heap_statistics"
            ]
          },
          "Component": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "activeConfigurationId": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "tenantId": {
                "type": "string"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time"
              }
            },
            "required": [
              "id",
              "name",
              "tenantId",
              "createdAt",
              "updatedAt"
            ]
          },
          "CreateComponentDto": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              }
            },
            "required": [
              "name"
            ]
          },
          "UpdateComponentDto": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              }
            }
          },
          "Schema": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "componentId": {
                "type": "string"
              },
              "schemaType": {
                "type": "string",
                "enum": [
                  "schema",
                  "customType"
                ]
              },
              "json": {
                "type": "object"
              },
              "parentSchemaId": {
                "type": "string"
              },
              "messages": {
                "type": "string"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time"
              }
            },
            "required": [
              "id",
              "name",
              "componentId",
              "schemaType",
              "json",
              "createdAt",
              "updatedAt"
            ]
          },
          "CreateSchemaDto": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "schemaType": {
                "type": "string",
                "example": "schema"
              },
              "json": {
                "type": "object",
                "example": {
                  "type": "object",
                  "properties": {
                    "property1": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "property1"
                  ]
                }
              },
              "messages": {
                "type": "string"
              }
            },
            "required": [
              "name",
              "schemaType",
              "json"
            ]
          },
          "UpdateSchemaDto": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "schemaType": {
                "type": "string",
                "example": "customType"
              },
              "json": {
                "type": "object"
              },
              "messages": {
                "type": "string"
              }
            }
          },
          "Configuration": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "data": {
                "type": "object"
              },
              "schemaId": {
                "type": "string"
              },
              "draft": {
                "type": "boolean"
              },
              "createDate": {
                "type": "string",
                "format": "date-time"
              },
              "updateDate": {
                "type": "string",
                "format": "date-time"
              },
              "messages": {
                "type": "string"
              }
            },
            "required": [
              "id",
              "name",
              "data",
              "schemaId",
              "draft",
              "createDate",
              "updateDate"
            ]
          },
          "CreateConfigurationDto": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "data": {
                "type": "object",
                "example": {
                  "property1": "value1"
                }
              },
              "messages": {
                "type": "string"
              }
            },
            "required": [
              "name",
              "data"
            ]
          },
          "UpdateConfigurationDto": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "data": {
                "type": "object"
              },
              "messages": {
                "type": "string"
              }
            }
          },
          "UpdateConfigurationValueDto": {
            "type": "object",
            "properties": {
              "value": {
                "type": "object"
              }
            },
            "required": [
              "value"
            ]
          },
          "UpdateActiveConfigurationDto": {
            "type": "object",
            "properties": {
              "activeConfigurationId": {
                "type": "string"
              }
            },
            "required": [
              "activeConfigurationId"
            ]
          },
          "RoutingEntitySchema": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "tenantId": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "agent",
                  "agentGroup",
                  "callType",
                  "station",
                  "vector",
                  "dn",
                  "benchmark",
                  "lineOfBusiness",
                  "holiday",
                  "serviceHour",
                  "agentPermissionSet",
                  "switchDialplanScheme",
                  "mediaObjects",
                  "cwt",
                  "awt",
                  "serviceProvider",
                  "acd",
                  "acdConfig",
                  "coveragePathSet",
                  "featureSet",
                  "acdSkill",
                  "afinitiMode",
                  "aicoreMode",
                  "airoDnToAgMapping",
                  "skillGroup",
                  "megaGlobalConfiguration",
                  "megaLocation",
                  "megaReasonCode",
                  "megaAesServer",
                  "customGroup",
                  "vectorVariable",
                  "subTenantMapping",
                  "cor",
                  "dialPlanAnalysis",
                  "fac",
                  "deviceDataTemplate",
                  "megaRoutingRule",
                  "megaSipServer",
                  "megaLogoutReasonCode",
                  "megaTenant",
                  "megaTenantInfo",
                  "megaBox",
                  "megaTfnDid",
                  "megaBpo",
                  "megaDatasources",
                  "megaAttributes",
                  "capacityProfile",
                  "voiceMailServer",
                  "dialPlanCallType",
                  "adaptation",
                  "megaOfficeLocation",
                  "megaTerminalGroup",
                  "vuStats",
                  "vectorRoutingTable",
                  "megaCmsLink",
                  "megaCtiLink",
                  "omniProviders",
                  "trunkGroup",
                  "trunk",
                  "segmentationTable"
                ]
              },
              "json": {
                "type": "object"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time"
              }
            },
            "required": [
              "id",
              "tenantId",
              "type",
              "json",
              "createdAt",
              "updatedAt"
            ]
          },
          "RoutingEntitySchemaDto": {
            "type": "object",
            "properties": {
              "json": {
                "type": "object"
              }
            },
            "required": [
              "json"
            ]
          },
          "RoutingEntitySchemasCloneDto": {
            "type": "object",
            "properties": {
              "sourceTenant": {
                "type": "string"
              }
            },
            "required": [
              "sourceTenant"
            ]
          },
          "RoutingEntity": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "rowId": {
                "type": "number"
              },
              "key": {
                "type": "string"
              },
              "tenantId": {
                "type": "string"
              },
              "data": {
                "type": "object"
              },
              "type": {
                "type": "string",
                "enum": [
                  "agent",
                  "agentGroup",
                  "callType",
                  "station",
                  "vector",
                  "dn",
                  "benchmark",
                  "lineOfBusiness",
                  "holiday",
                  "serviceHour",
                  "agentPermissionSet",
                  "switchDialplanScheme",
                  "mediaObjects",
                  "cwt",
                  "awt",
                  "serviceProvider",
                  "acd",
                  "acdConfig",
                  "coveragePathSet",
                  "featureSet",
                  "acdSkill",
                  "afinitiMode",
                  "aicoreMode",
                  "airoDnToAgMapping",
                  "skillGroup",
                  "megaGlobalConfiguration",
                  "megaLocation",
                  "megaReasonCode",
                  "megaAesServer",
                  "customGroup",
                  "vectorVariable",
                  "subTenantMapping",
                  "cor",
                  "dialPlanAnalysis",
                  "fac",
                  "deviceDataTemplate",
                  "megaRoutingRule",
                  "megaSipServer",
                  "megaLogoutReasonCode",
                  "megaTenant",
                  "megaTenantInfo",
                  "megaBox",
                  "megaTfnDid",
                  "megaBpo",
                  "megaDatasources",
                  "megaAttributes",
                  "capacityProfile",
                  "voiceMailServer",
                  "dialPlanCallType",
                  "adaptation",
                  "megaOfficeLocation",
                  "megaTerminalGroup",
                  "vuStats",
                  "vectorRoutingTable",
                  "megaCmsLink",
                  "megaCtiLink",
                  "omniProviders",
                  "trunkGroup",
                  "trunk",
                  "segmentationTable"
                ]
              },
              "defRec": {
                "type": "boolean",
                "default": false
              },
              "createdAt": {
                "type": "string",
                "format": "date-time"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time"
              }
            },
            "required": [
              "id",
              "rowId",
              "key",
              "tenantId",
              "data",
              "type",
              "createdAt",
              "updatedAt"
            ]
          },
          "RoutingEntitySchemaCloneResponseDto": {
            "type": "object",
            "properties": {
              "schemasCreated": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/RoutingEntitySchema"
                }
              },
              "dataCreated": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/RoutingEntity"
                }
              }
            },
            "required": [
              "schemasCreated",
              "dataCreated"
            ]
          },
          "RoutingEntityKeyDto": {
            "type": "object",
            "properties": {
              "key": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "agent",
                  "agentGroup",
                  "callType",
                  "station",
                  "vector",
                  "dn",
                  "benchmark",
                  "lineOfBusiness",
                  "holiday",
                  "serviceHour",
                  "agentPermissionSet",
                  "switchDialplanScheme",
                  "mediaObjects",
                  "cwt",
                  "awt",
                  "serviceProvider",
                  "acd",
                  "acdConfig",
                  "coveragePathSet",
                  "featureSet",
                  "acdSkill",
                  "afinitiMode",
                  "aicoreMode",
                  "airoDnToAgMapping",
                  "skillGroup",
                  "megaGlobalConfiguration",
                  "megaLocation",
                  "megaReasonCode",
                  "megaAesServer",
                  "customGroup",
                  "vectorVariable",
                  "subTenantMapping",
                  "cor",
                  "dialPlanAnalysis",
                  "fac",
                  "deviceDataTemplate",
                  "megaRoutingRule",
                  "megaSipServer",
                  "megaLogoutReasonCode",
                  "megaTenant",
                  "megaTenantInfo",
                  "megaBox",
                  "megaTfnDid",
                  "megaBpo",
                  "megaDatasources",
                  "megaAttributes",
                  "capacityProfile",
                  "voiceMailServer",
                  "dialPlanCallType",
                  "adaptation",
                  "megaOfficeLocation",
                  "megaTerminalGroup",
                  "vuStats",
                  "vectorRoutingTable",
                  "megaCmsLink",
                  "megaCtiLink",
                  "omniProviders",
                  "trunkGroup",
                  "trunk",
                  "segmentationTable"
                ]
              }
            },
            "required": [
              "key",
              "type"
            ]
          },
          "RoutingEntityKeyDtoArray": {
            "type": "object",
            "properties": {
              "routingEntityKeyDtos": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/RoutingEntityKeyDto"
                }
              }
            },
            "required": [
              "routingEntityKeyDtos"
            ]
          },
          "RoutingEntityAuthorizedUser": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "routingEntityId": {
                "type": "string"
              },
              "user": {
                "type": "string"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time"
              }
            },
            "required": [
              "id",
              "routingEntityId",
              "user",
              "createdAt",
              "updatedAt"
            ]
          },
          "RoutingEntityAuthUserArrayDto": {
            "type": "object",
            "properties": {
              "targetUsers": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "required": [
              "targetUsers"
            ]
          },
          "RoutingEntityLookupPayloadDto": {
            "type": "object",
            "properties": {
              "keys": {
                "type": "array",
                "description": "Routing Entity Keys",
                "items": {
                  "type": "string"
                }
              },
              "data": {
                "type": "object",
                "description": "Routing Entity JSON data filter"
              }
            }
          },
          "RoutingEntityLookupResponse": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "enum": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "required": [
              "type"
            ]
          },
          "RoutingEntityKeys": {
            "type": "object",
            "properties": {
              "keys": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "RoutingEntityQueryByLookupConditionDto": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "agent",
                  "agentGroup",
                  "callType",
                  "station",
                  "vector",
                  "dn",
                  "benchmark",
                  "lineOfBusiness",
                  "holiday",
                  "serviceHour",
                  "agentPermissionSet",
                  "switchDialplanScheme",
                  "mediaObjects",
                  "cwt",
                  "awt",
                  "serviceProvider",
                  "acd",
                  "acdConfig",
                  "coveragePathSet",
                  "featureSet",
                  "acdSkill",
                  "afinitiMode",
                  "aicoreMode",
                  "airoDnToAgMapping",
                  "skillGroup",
                  "megaGlobalConfiguration",
                  "megaLocation",
                  "megaReasonCode",
                  "megaAesServer",
                  "customGroup",
                  "vectorVariable",
                  "subTenantMapping",
                  "cor",
                  "dialPlanAnalysis",
                  "fac",
                  "deviceDataTemplate",
                  "megaRoutingRule",
                  "megaSipServer",
                  "megaLogoutReasonCode",
                  "megaTenant",
                  "megaTenantInfo",
                  "megaBox",
                  "megaTfnDid",
                  "megaBpo",
                  "megaDatasources",
                  "megaAttributes",
                  "capacityProfile",
                  "voiceMailServer",
                  "dialPlanCallType",
                  "adaptation",
                  "megaOfficeLocation",
                  "megaTerminalGroup",
                  "vuStats",
                  "vectorRoutingTable",
                  "megaCmsLink",
                  "megaCtiLink",
                  "omniProviders",
                  "trunkGroup",
                  "trunk",
                  "segmentationTable"
                ],
                "example": "lineOfBusiness"
              },
              "values": {
                "type": "string",
                "example": [
                  "1",
                  "2"
                ]
              }
            },
            "required": [
              "type",
              "values"
            ]
          },
          "RoutingEntityQueryByLookupConditionsDto": {
            "type": "object",
            "properties": {
              "allOf": {
                "type": "array",
                "description": "Mandatory routing entity lookup(s) type and values.",
                "items": {
                  "$ref": "#/definitions/RoutingEntityQueryByLookupConditionDto"
                }
              },
              "anyOf": {
                "type": "array",
                "description": "Optional routing entity lookup(s) type and values.",
                "items": {
                  "$ref": "#/definitions/RoutingEntityQueryByLookupConditionDto"
                }
              }
            },
            "required": [
              "allOf",
              "anyOf"
            ]
          },
          "RoutingEntityQueryByLookupDto": {
            "type": "object",
            "properties": {
              "routingEntityTypes": {
                "type": "array",
                "example": [
                  "benchmark"
                ],
                "description": "Routing entity types. Empty list indicates all routing entity types.",
                "default": [],
                "items": {
                  "type": "string",
                  "enum": [
                    "agent",
                    "agentGroup",
                    "callType",
                    "station",
                    "vector",
                    "dn",
                    "benchmark",
                    "lineOfBusiness",
                    "holiday",
                    "serviceHour",
                    "agentPermissionSet",
                    "switchDialplanScheme",
                    "mediaObjects",
                    "cwt",
                    "awt",
                    "serviceProvider",
                    "acd",
                    "acdConfig",
                    "coveragePathSet",
                    "featureSet",
                    "acdSkill",
                    "afinitiMode",
                    "aicoreMode",
                    "airoDnToAgMapping",
                    "skillGroup",
                    "megaGlobalConfiguration",
                    "megaLocation",
                    "megaReasonCode",
                    "megaAesServer",
                    "customGroup",
                    "vectorVariable",
                    "subTenantMapping",
                    "cor",
                    "dialPlanAnalysis",
                    "fac",
                    "deviceDataTemplate",
                    "megaRoutingRule",
                    "megaSipServer",
                    "megaLogoutReasonCode",
                    "megaTenant",
                    "megaTenantInfo",
                    "megaBox",
                    "megaTfnDid",
                    "megaBpo",
                    "megaDatasources",
                    "megaAttributes",
                    "capacityProfile",
                    "voiceMailServer",
                    "dialPlanCallType",
                    "adaptation",
                    "megaOfficeLocation",
                    "megaTerminalGroup",
                    "vuStats",
                    "vectorRoutingTable",
                    "megaCmsLink",
                    "megaCtiLink",
                    "omniProviders",
                    "trunkGroup",
                    "trunk",
                    "segmentationTable"
                  ]
                }
              },
              "routingEntityLookupQuery": {
                "$ref": "#/definitions/RoutingEntityQueryByLookupConditionsDto"
              }
            },
            "required": [
              "routingEntityLookupQuery"
            ]
          },
          "RoutingEntityDto": {
            "type": "object",
            "properties": {
              "key": {
                "type": "string"
              },
              "data": {
                "type": "object"
              },
              "defRec": {
                "type": "boolean",
                "default": false,
                "description": "Signifies that the current record is a default record when it is true"
              }
            },
            "required": [
              "key",
              "data"
            ]
          },
          "RoutingEntityPostDto": {
            "type": "object",
            "properties": {
              "operation": {
                "type": "string",
                "enum": [
                  "insert",
                  "upsert"
                ],
                "default": "upsert"
              },
              "compile": {
                "type": "boolean",
                "description": "Flag to enforce compilation before saving a (vector) routing entity.",
                "default": false
              },
              "routingEntityDtos": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/RoutingEntityDto"
                }
              }
            },
            "required": [
              "routingEntityDtos"
            ]
          },
          "RoutingEntityDtoArray": {
            "type": "object",
            "properties": {
              "routingEntityDtos": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/RoutingEntityDto"
                }
              },
              "compile": {
                "type": "boolean",
                "description": "Flag to enforce compilation before saving a (vector) routing entity.",
                "default": false
              }
            },
            "required": [
              "routingEntityDtos"
            ]
          },
          "RoutingEntityKeyBulkDto": {
            "type": "object",
            "properties": {
              "keys": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "required": [
              "keys"
            ]
          },
          "OrderByDto": {
            "type": "object",
            "properties": {
              "sort": {
                "type": "string",
                "example": "data.name"
              },
              "order": {
                "type": "string",
                "enum": [
                  "asc",
                  "desc"
                ],
                "example": "asc"
              }
            },
            "required": [
              "sort",
              "order"
            ]
          },
          "PaginateDto": {
            "type": "object",
            "properties": {
              "page": {
                "type": "number",
                "example": 1
              },
              "perPage": {
                "type": "number",
                "example": 1
              }
            },
            "required": [
              "page",
              "perPage"
            ]
          },
          "RoutingEntityQueryDto": {
            "type": "object",
            "properties": {
              "resolve": {
                "type": "string",
                "enum": [
                  "true",
                  "false"
                ],
                "default": true
              },
              "filter": {
                "type": "object",
                "example": {
                  "data.name": {
                    "$eq": "Routing-Entity-1"
                  }
                }
              },
              "orderBy": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/OrderByDto"
                }
              },
              "paginate": {
                "$ref": "#/definitions/PaginateDto"
              }
            }
          },
          "RoutingEntityBulkUpdateByPathDto": {
            "type": "object",
            "properties": {
              "key": {
                "type": "string",
                "example": "1",
                "description": "Routing entity key"
              },
              "path": {
                "type": "string",
                "example": "data.id",
                "description": "Vanilla JSON path in a routing entity record"
              },
              "value": {
                "type": "object",
                "example": "1",
                "description": "Replacement value for the path specified"
              }
            },
            "required": [
              "key",
              "path",
              "value"
            ]
          },
          "BulkUpdateByPathDto": {
            "type": "object",
            "properties": {
              "routingEntityBulkUpdateByPathDtoArray": {
                "type": "array",
                "description": "Routing entity dto to bulk update records by routing entity key, destination path, and value",
                "items": {
                  "$ref": "#/definitions/RoutingEntityBulkUpdateByPathDto"
                }
              },
              "compile": {
                "type": "boolean",
                "description": "Flag to enforce compilation before saving a (vector) routing entity.",
                "default": false
              }
            },
            "required": [
              "routingEntityBulkUpdateByPathDtoArray"
            ]
          },
          "UpdateDataValueDto": {
            "type": "object",
            "properties": {
              "value": {
                "type": "object"
              },
              "compile": {
                "type": "boolean",
                "description": "Flag to enforce compilation before saving a (vector) routing entity.",
                "default": false
              }
            },
            "required": [
              "value"
            ]
          },
          "RoutingEntityResponseDto": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "key": {
                "type": "string"
              },
              "data": {
                "type": "object"
              },
              "rowId": {
                "type": "number"
              },
              "tenantId": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "agent",
                  "agentGroup",
                  "callType",
                  "station",
                  "vector",
                  "dn",
                  "benchmark",
                  "lineOfBusiness",
                  "holiday",
                  "serviceHour",
                  "agentPermissionSet",
                  "switchDialplanScheme",
                  "mediaObjects",
                  "cwt",
                  "awt",
                  "serviceProvider",
                  "acd",
                  "acdConfig",
                  "coveragePathSet",
                  "featureSet",
                  "acdSkill",
                  "afinitiMode",
                  "aicoreMode",
                  "airoDnToAgMapping",
                  "skillGroup",
                  "megaGlobalConfiguration",
                  "megaLocation",
                  "megaReasonCode",
                  "megaAesServer",
                  "customGroup",
                  "vectorVariable",
                  "subTenantMapping",
                  "cor",
                  "dialPlanAnalysis",
                  "fac",
                  "deviceDataTemplate",
                  "megaRoutingRule",
                  "megaSipServer",
                  "megaLogoutReasonCode",
                  "megaTenant",
                  "megaTenantInfo",
                  "megaBox",
                  "megaTfnDid",
                  "megaBpo",
                  "megaDatasources",
                  "megaAttributes",
                  "capacityProfile",
                  "voiceMailServer",
                  "dialPlanCallType",
                  "adaptation",
                  "megaOfficeLocation",
                  "megaTerminalGroup",
                  "vuStats",
                  "vectorRoutingTable",
                  "megaCmsLink",
                  "megaCtiLink",
                  "omniProviders",
                  "trunkGroup",
                  "trunk",
                  "segmentationTable"
                ]
              },
              "defRec": {
                "type": "boolean",
                "default": false
              }
            },
            "required": [
              "id",
              "key",
              "data",
              "rowId",
              "tenantId",
              "type"
            ]
          },
          "RoutingEntityPaginatedResponseDto": {
            "type": "object",
            "properties": {
              "page": {
                "type": "number"
              },
              "perPage": {
                "type": "number"
              },
              "total": {
                "type": "number"
              },
              "totalPages": {
                "type": "number"
              },
              "count": {
                "type": "number"
              },
              "items": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/RoutingEntityResponseDto"
                }
              }
            },
            "required": [
              "page",
              "perPage",
              "count",
              "items"
            ]
          },
          "Set": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "configurationIds": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "tenantId": {
                "type": "string"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time"
              }
            },
            "required": [
              "id",
              "name",
              "configurationIds",
              "tenantId",
              "createdAt",
              "updatedAt"
            ]
          },
          "CreateSetDto": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "configurationIds": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "required": [
              "name"
            ]
          },
          "UpdateSetDto": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "configurationIds": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "ExportConfigurationDto": {
            "type": "object",
            "properties": {
              "objects": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "required": [
              "objects"
            ]
          },
          "SchemaObjectDto": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "configurations": {
                "$ref": "#/definitions/ExportConfigurationDto"
              }
            },
            "required": [
              "id",
              "configurations"
            ]
          },
          "ExportSchemaDto": {
            "type": "object",
            "properties": {
              "objects": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/SchemaObjectDto"
                }
              }
            },
            "required": [
              "objects"
            ]
          },
          "ComponentObjectDto": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "activeConfiguration": {
                "type": "boolean",
                "description": "Flag to export component's active configuration"
              },
              "schemas": {
                "$ref": "#/definitions/ExportSchemaDto"
              }
            },
            "required": [
              "id",
              "schemas"
            ]
          },
          "ExportComponentDto": {
            "type": "object",
            "properties": {
              "objects": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ComponentObjectDto"
                }
              }
            },
            "required": [
              "objects"
            ]
          },
          "ExportDto": {
            "type": "object",
            "properties": {
              "components": {
                "$ref": "#/definitions/ExportComponentDto"
              }
            },
            "required": [
              "components"
            ]
          },
          "ComponentImportDto": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "activeConfigurationId": {
                "type": "string"
              }
            },
            "required": [
              "id",
              "name"
            ]
          },
          "SchemaImportDto": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "componentId": {
                "type": "string"
              },
              "schemaType": {
                "type": "string",
                "enum": [
                  "schema",
                  "customType"
                ]
              },
              "json": {
                "type": "object",
                "example": {
                  "type": "object",
                  "properties": {
                    "property1": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "property1"
                  ]
                }
              },
              "dependencies": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "required": [
              "id",
              "name",
              "componentId",
              "schemaType",
              "json",
              "dependencies"
            ]
          },
          "ConfigurationImportDto": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "data": {
                "type": "object"
              },
              "schemaId": {
                "type": "string"
              },
              "componentId": {
                "type": "string"
              },
              "draft": {
                "type": "boolean"
              }
            },
            "required": [
              "name",
              "data",
              "schemaId",
              "componentId",
              "draft"
            ]
          },
          "ExportFileDto": {
            "type": "object",
            "properties": {
              "version": {
                "type": "string"
              },
              "components": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ComponentImportDto"
                }
              },
              "schemas": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/SchemaImportDto"
                }
              },
              "configurations": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ConfigurationImportDto"
                }
              },
              "host": {
                "type": "string"
              }
            },
            "required": [
              "version",
              "components",
              "schemas",
              "configurations"
            ]
          },
          "RoutingEntityExportFileDto": {
            "type": "object",
            "properties": {
              "version": {
                "type": "string"
              },
              "reSchemas": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/RoutingEntitySchemaDto"
                }
              },
              "routingEntities": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/RoutingEntityDto"
                }
              },
              "dependenciesOrder": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "host": {
                "type": "string"
              },
              "compile": {
                "type": "boolean",
                "description": "Flag to enforce compilation for (vector) routing entity.",
                "default": false
              }
            },
            "required": [
              "version",
              "reSchemas",
              "routingEntities",
              "dependenciesOrder"
            ]
          },
          "RoutingEntityExportByLookupQuerySelectTypesDto": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "agent",
                  "agentGroup",
                  "callType",
                  "station",
                  "vector",
                  "dn",
                  "benchmark",
                  "lineOfBusiness",
                  "holiday",
                  "serviceHour",
                  "agentPermissionSet",
                  "switchDialplanScheme",
                  "mediaObjects",
                  "cwt",
                  "awt",
                  "serviceProvider",
                  "acd",
                  "acdConfig",
                  "coveragePathSet",
                  "featureSet",
                  "acdSkill",
                  "afinitiMode",
                  "aicoreMode",
                  "airoDnToAgMapping",
                  "skillGroup",
                  "megaGlobalConfiguration",
                  "megaLocation",
                  "megaReasonCode",
                  "megaAesServer",
                  "customGroup",
                  "vectorVariable",
                  "subTenantMapping",
                  "cor",
                  "dialPlanAnalysis",
                  "fac",
                  "deviceDataTemplate",
                  "megaRoutingRule",
                  "megaSipServer",
                  "megaLogoutReasonCode",
                  "megaTenant",
                  "megaTenantInfo",
                  "megaBox",
                  "megaTfnDid",
                  "megaBpo",
                  "megaDatasources",
                  "megaAttributes",
                  "capacityProfile",
                  "voiceMailServer",
                  "dialPlanCallType",
                  "adaptation",
                  "megaOfficeLocation",
                  "megaTerminalGroup",
                  "vuStats",
                  "vectorRoutingTable",
                  "megaCmsLink",
                  "megaCtiLink",
                  "omniProviders",
                  "trunkGroup",
                  "trunk",
                  "segmentationTable"
                ],
                "example": "benchmark"
              },
              "filter": {
                "type": "boolean",
                "example": true
              },
              "keys": {
                "type": "string",
                "example": [
                  "0",
                  "1"
                ]
              }
            },
            "required": [
              "type",
              "filter",
              "keys"
            ]
          },
          "RoutingEntityExportByLookupQueryConditionDto": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "agent",
                  "agentGroup",
                  "callType",
                  "station",
                  "vector",
                  "dn",
                  "benchmark",
                  "lineOfBusiness",
                  "holiday",
                  "serviceHour",
                  "agentPermissionSet",
                  "switchDialplanScheme",
                  "mediaObjects",
                  "cwt",
                  "awt",
                  "serviceProvider",
                  "acd",
                  "acdConfig",
                  "coveragePathSet",
                  "featureSet",
                  "acdSkill",
                  "afinitiMode",
                  "aicoreMode",
                  "airoDnToAgMapping",
                  "skillGroup",
                  "megaGlobalConfiguration",
                  "megaLocation",
                  "megaReasonCode",
                  "megaAesServer",
                  "customGroup",
                  "vectorVariable",
                  "subTenantMapping",
                  "cor",
                  "dialPlanAnalysis",
                  "fac",
                  "deviceDataTemplate",
                  "megaRoutingRule",
                  "megaSipServer",
                  "megaLogoutReasonCode",
                  "megaTenant",
                  "megaTenantInfo",
                  "megaBox",
                  "megaTfnDid",
                  "megaBpo",
                  "megaDatasources",
                  "megaAttributes",
                  "capacityProfile",
                  "voiceMailServer",
                  "dialPlanCallType",
                  "adaptation",
                  "megaOfficeLocation",
                  "megaTerminalGroup",
                  "vuStats",
                  "vectorRoutingTable",
                  "megaCmsLink",
                  "megaCtiLink",
                  "omniProviders",
                  "trunkGroup",
                  "trunk",
                  "segmentationTable"
                ],
                "example": "lineOfBusiness"
              },
              "values": {
                "type": "string",
                "example": [
                  "1",
                  "2"
                ]
              }
            },
            "required": [
              "type",
              "values"
            ]
          },
          "RoutingEntityExportByLookupQueryConditionsDto": {
            "type": "object",
            "properties": {
              "allOf": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/RoutingEntityExportByLookupQueryConditionDto"
                }
              },
              "anyOf": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/RoutingEntityExportByLookupQueryConditionDto"
                }
              }
            },
            "required": [
              "allOf",
              "anyOf"
            ]
          },
          "RoutingEntityExportByLookupQueryDto": {
            "type": "object",
            "properties": {
              "routingEntityTypes": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/RoutingEntityExportByLookupQuerySelectTypesDto"
                }
              },
              "routingEntityLookupQuery": {
                "$ref": "#/definitions/RoutingEntityExportByLookupQueryConditionsDto"
              }
            },
            "required": [
              "routingEntityTypes",
              "routingEntityLookupQuery"
            ]
          },
          "Snapshot": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "tenantId": {
                "type": "string"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time"
              }
            },
            "required": [
              "id",
              "name",
              "tenantId",
              "createdAt"
            ]
          },
          "ComponentLog": {
            "type": "object",
            "properties": {
              "componentId": {
                "type": "string"
              },
              "componentName": {
                "type": "string"
              },
              "operation": {
                "type": "string",
                "enum": [
                  "CREATED",
                  "UPDATED",
                  "DELETED"
                ]
              },
              "activeConfigurationId": {
                "type": "string"
              },
              "activeConfigurationName": {
                "type": "string"
              },
              "activeConfigurationData": {
                "type": "object"
              },
              "tenantId": {
                "type": "string"
              },
              "user": {
                "type": "string"
              },
              "time": {
                "type": "string",
                "format": "date-time"
              }
            },
            "required": [
              "componentId",
              "componentName",
              "operation",
              "activeConfigurationId",
              "activeConfigurationName",
              "activeConfigurationData",
              "tenantId",
              "user",
              "time"
            ]
          },
          "SchemaLog": {
            "type": "object",
            "properties": {
              "schemaId": {
                "type": "string"
              },
              "schemaName": {
                "type": "string"
              },
              "schemaType": {
                "type": "string"
              },
              "operation": {
                "type": "string",
                "enum": [
                  "CREATED",
                  "UPDATED",
                  "DELETED"
                ]
              },
              "newSchemaJson": {
                "type": "object"
              },
              "oldSchemaJson": {
                "type": "object"
              },
              "messages": {
                "type": "string"
              },
              "componentId": {
                "type": "string"
              },
              "componentName": {
                "type": "string"
              },
              "tenantId": {
                "type": "string"
              },
              "user": {
                "type": "string"
              },
              "time": {
                "type": "string",
                "format": "date-time"
              }
            },
            "required": [
              "schemaId",
              "schemaName",
              "schemaType",
              "operation",
              "newSchemaJson",
              "oldSchemaJson",
              "messages",
              "componentId",
              "componentName",
              "tenantId",
              "user",
              "time"
            ]
          },
          "ConfigurationLog": {
            "type": "object",
            "properties": {
              "configurationId": {
                "type": "string"
              },
              "configurationName": {
                "type": "string"
              },
              "operation": {
                "type": "string",
                "enum": [
                  "CREATED",
                  "UPDATED",
                  "DELETED",
                  "ACTIVATED"
                ]
              },
              "isDraft": {
                "type": "boolean"
              },
              "newConfigurationData": {
                "type": "object"
              },
              "oldConfigurationData": {
                "type": "object"
              },
              "schemaId": {
                "type": "string"
              },
              "schemaName": {
                "type": "string"
              },
              "componentId": {
                "type": "string"
              },
              "componentName": {
                "type": "string"
              },
              "tenantId": {
                "type": "string"
              },
              "user": {
                "type": "string"
              },
              "time": {
                "type": "string",
                "format": "date-time"
              }
            },
            "required": [
              "configurationId",
              "configurationName",
              "operation",
              "isDraft",
              "newConfigurationData",
              "oldConfigurationData",
              "schemaId",
              "schemaName",
              "componentId",
              "componentName",
              "tenantId",
              "user",
              "time"
            ]
          },
          "RoutingEntitySchemaLog": {
            "type": "object",
            "properties": {
              "routingEntitySchemaTenantId": {
                "type": "string"
              },
              "routingEntitySchemaType": {
                "type": "string"
              },
              "operation": {
                "type": "string",
                "enum": [
                  "CREATED",
                  "UPDATED"
                ]
              },
              "newRoutingEntitySchemaJson": {
                "type": "object"
              },
              "oldRoutingEntitySchemaJson": {
                "type": "object"
              },
              "user": {
                "type": "string"
              },
              "time": {
                "type": "string",
                "format": "date-time"
              }
            },
            "required": [
              "routingEntitySchemaTenantId",
              "routingEntitySchemaType",
              "operation",
              "newRoutingEntitySchemaJson",
              "oldRoutingEntitySchemaJson",
              "user",
              "time"
            ]
          },
          "RoutingEntityLog": {
            "type": "object",
            "properties": {
              "routingEntityKey": {
                "type": "string"
              },
              "routingEntityTenantId": {
                "type": "string"
              },
              "routingEntityType": {
                "type": "string"
              },
              "operation": {
                "type": "string",
                "enum": [
                  "CREATED",
                  "UPDATED",
                  "DELETED"
                ]
              },
              "newRoutingEntityData": {
                "type": "object"
              },
              "oldRoutingEntityData": {
                "type": "object"
              },
              "user": {
                "type": "string"
              },
              "time": {
                "type": "string",
                "format": "date-time"
              }
            },
            "required": [
              "routingEntityKey",
              "routingEntityTenantId",
              "routingEntityType",
              "operation",
              "newRoutingEntityData",
              "oldRoutingEntityData",
              "user",
              "time"
            ]
          },
          "AgentInfo": {
            "type": "object",
            "properties": {
              "agentid": {
                "type": "number"
              },
              "agent_group": {
                "type": "number"
              },
              "is_current": {
                "type": "number"
              },
              "virtual_priority": {
                "type": "number"
              }
            },
            "required": [
              "agentid",
              "agent_group",
              "virtual_priority"
            ]
          },
          "CreateAgentInfoDto": {
            "type": "object",
            "properties": {
              "agentid": {
                "type": "number"
              },
              "agent_group": {
                "type": "number"
              },
              "virtual_priority": {
                "type": "number"
              },
              "is_current": {
                "type": "number"
              }
            },
            "required": [
              "agentid",
              "agent_group",
              "virtual_priority"
            ]
          },
          "CreateAgentInfoDtoArray": {
            "type": "object",
            "properties": {
              "createAgentInfoDtos": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/CreateAgentInfoDto"
                }
              }
            },
            "required": [
              "createAgentInfoDtos"
            ]
          },
          "UpdateAgentInfoDto": {
            "type": "object",
            "properties": {
              "agentid": {
                "type": "number"
              },
              "agent_group": {
                "type": "number"
              },
              "virtual_priority": {
                "type": "number"
              },
              "is_current": {
                "type": "number"
              }
            }
          },
          "AgentPayout": {
            "type": "object",
            "properties": {
              "agent_payout_id": {
                "type": "number"
              },
              "payoutkey": {
                "type": "string"
              },
              "m_model_id": {
                "type": "number"
              },
              "agentid": {
                "type": "number"
              },
              "callgroup": {
                "type": "number"
              },
              "payout": {
                "type": "number"
              },
              "is_current": {
                "type": "number"
              },
              "generatedon": {
                "type": "string",
                "format": "date-time"
              },
              "comments": {
                "type": "string"
              }
            },
            "required": [
              "agent_payout_id",
              "payoutkey",
              "m_model_id"
            ]
          },
          "CreateAgentPayoutDto": {
            "type": "object",
            "properties": {
              "payoutkey": {
                "type": "string"
              },
              "m_model_id": {
                "type": "number"
              },
              "agentid": {
                "type": "number"
              },
              "callgroup": {
                "type": "number"
              },
              "payout": {
                "type": "number"
              },
              "is_current": {
                "type": "number"
              },
              "generatedon": {
                "type": "string",
                "format": "date-time"
              },
              "comments": {
                "type": "string"
              }
            },
            "required": [
              "payoutkey",
              "m_model_id"
            ]
          },
          "CreateAgentPayoutDtoArray": {
            "type": "object",
            "properties": {
              "createAgentPayoutDtos": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/CreateAgentPayoutDto"
                }
              }
            },
            "required": [
              "createAgentPayoutDtos"
            ]
          },
          "UpdateAgentPayoutDto": {
            "type": "object",
            "properties": {
              "payoutkey": {
                "type": "string"
              },
              "m_model_id": {
                "type": "number"
              },
              "agentid": {
                "type": "number"
              },
              "callgroup": {
                "type": "number"
              },
              "payout": {
                "type": "number"
              },
              "is_current": {
                "type": "number"
              },
              "generatedon": {
                "type": "string",
                "format": "date-time"
              },
              "comments": {
                "type": "string"
              }
            }
          },
          "AgentDiagonalModel": {
            "type": "object",
            "properties": {
              "agent_percentile_id": {
                "type": "number"
              },
              "m_model_id": {
                "type": "number"
              },
              "agent_id": {
                "type": "number"
              },
              "agent_percentile": {
                "type": "number"
              },
              "is_current": {
                "type": "number"
              },
              "generatedon": {
                "type": "string",
                "format": "date-time"
              },
              "comments": {
                "type": "string"
              },
              "inflation_factor": {
                "type": "number"
              }
            },
            "required": [
              "agent_percentile_id",
              "m_model_id"
            ]
          },
          "CreateAgentDiagonalModelDto": {
            "type": "object",
            "properties": {
              "m_model_id": {
                "type": "number"
              },
              "agent_id": {
                "type": "number"
              },
              "agent_percentile": {
                "type": "number"
              },
              "is_current": {
                "type": "number"
              },
              "generatedon": {
                "type": "string",
                "format": "date-time"
              },
              "comments": {
                "type": "string"
              },
              "inflation_factor": {
                "type": "number"
              }
            },
            "required": [
              "m_model_id"
            ]
          },
          "CreateAgentDiagonalModelDtoArray": {
            "type": "object",
            "properties": {
              "createAgentDiagonalModelDtos": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/CreateAgentDiagonalModelDto"
                }
              }
            },
            "required": [
              "createAgentDiagonalModelDtos"
            ]
          },
          "UpdateAgentDiagonalModelDto": {
            "type": "object",
            "properties": {
              "m_model_id": {
                "type": "number"
              },
              "agent_id": {
                "type": "number"
              },
              "agent_percentile": {
                "type": "number"
              },
              "is_current": {
                "type": "number"
              },
              "generatedon": {
                "type": "string",
                "format": "date-time"
              },
              "comments": {
                "type": "string"
              },
              "inflation_factor": {
                "type": "number"
              }
            }
          },
          "CallGroup": {
            "type": "object",
            "properties": {
              "callgroupid": {
                "type": "number"
              },
              "m_model_id": {
                "type": "number"
              },
              "is_current": {
                "type": "number"
              },
              "callgroup_tree_str": {
                "type": "string"
              }
            },
            "required": [
              "callgroupid",
              "m_model_id",
              "callgroup_tree_str"
            ]
          },
          "CreateCallGroupDto": {
            "type": "object",
            "properties": {
              "m_model_id": {
                "type": "number"
              },
              "is_current": {
                "type": "number"
              },
              "callgroup_tree_str": {
                "type": "string"
              }
            },
            "required": [
              "m_model_id",
              "callgroup_tree_str"
            ]
          },
          "CreateCallGroupDtoArray": {
            "type": "object",
            "properties": {
              "createCallGroupDtos": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/CreateCallGroupDto"
                }
              }
            },
            "required": [
              "createCallGroupDtos"
            ]
          },
          "UpdateCallGroupDto": {
            "type": "object",
            "properties": {
              "m_model_id": {
                "type": "number"
              },
              "is_current": {
                "type": "number"
              },
              "callgroup_tree_str": {
                "type": "string"
              }
            }
          },
          "CallDiagonalModel": {
            "type": "object",
            "properties": {
              "callgroup_percentile_id": {
                "type": "number"
              },
              "m_model_id": {
                "type": "number"
              },
              "callgroup_id": {
                "type": "number"
              },
              "min_percentile": {
                "type": "number"
              },
              "max_percentile": {
                "type": "number"
              },
              "is_current": {
                "type": "number"
              },
              "generatedon": {
                "type": "string",
                "format": "date-time"
              },
              "comments": {
                "type": "string"
              }
            },
            "required": [
              "callgroup_percentile_id",
              "m_model_id"
            ]
          },
          "CreateCallDiagonalModelDto": {
            "type": "object",
            "properties": {
              "m_model_id": {
                "type": "number"
              },
              "callgroup_id": {
                "type": "number"
              },
              "min_percentile": {
                "type": "number"
              },
              "max_percentile": {
                "type": "number"
              },
              "is_current": {
                "type": "number"
              },
              "generatedon": {
                "type": "string",
                "format": "date-time"
              },
              "comments": {
                "type": "string"
              }
            },
            "required": [
              "m_model_id"
            ]
          },
          "CreateCallDiagonalModelDtoArray": {
            "type": "object",
            "properties": {
              "createCallDiagonalModelDtos": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/CreateCallDiagonalModelDto"
                }
              }
            },
            "required": [
              "createCallDiagonalModelDtos"
            ]
          },
          "UpdateCallDiagonalModelDto": {
            "type": "object",
            "properties": {
              "m_model_id": {
                "type": "number"
              },
              "callgroup_id": {
                "type": "number"
              },
              "min_percentile": {
                "type": "number"
              },
              "max_percentile": {
                "type": "number"
              },
              "is_current": {
                "type": "number"
              },
              "generatedon": {
                "type": "string",
                "format": "date-time"
              },
              "comments": {
                "type": "string"
              }
            }
          },
          "GlobalConfiguration": {
            "type": "object",
            "properties": {
              "global_configuration_id": {
                "type": "number"
              },
              "is_current": {
                "type": "number"
              },
              "config_json": {
                "type": "string"
              }
            },
            "required": [
              "global_configuration_id",
              "config_json"
            ]
          },
          "CreateGlobalConfigurationDto": {
            "type": "object",
            "properties": {
              "is_current": {
                "type": "number"
              },
              "config_json": {
                "type": "string"
              }
            },
            "required": [
              "config_json"
            ]
          },
          "CreateGlobalConfigurationDtoArray": {
            "type": "object",
            "properties": {
              "createGlobalConfigurationDtos": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/CreateGlobalConfigurationDto"
                }
              }
            },
            "required": [
              "createGlobalConfigurationDtos"
            ]
          },
          "UpdateGlobalConfigurationDto": {
            "type": "object",
            "properties": {
              "is_current": {
                "type": "number"
              },
              "config_json": {
                "type": "string"
              }
            }
          },
          "Model": {
            "type": "object",
            "properties": {
              "model_id": {
                "type": "number"
              },
              "ms_model_scope_id": {
                "type": "number"
              },
              "is_current": {
                "type": "number"
              },
              "algorithm_name": {
                "type": "string",
                "default": "LpMaxPayoff"
              }
            },
            "required": [
              "model_id",
              "ms_model_scope_id"
            ]
          },
          "CreateModelDto": {
            "type": "object",
            "properties": {
              "ms_model_scope_id": {
                "type": "number"
              },
              "is_current": {
                "type": "number"
              },
              "algorithm_name": {
                "type": "string",
                "default": "LpMaxPayoff"
              }
            },
            "required": [
              "ms_model_scope_id"
            ]
          },
          "CreateModelDtoArray": {
            "type": "object",
            "properties": {
              "createModelDtos": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/CreateModelDto"
                }
              }
            },
            "required": [
              "createModelDtos"
            ]
          },
          "UpdateModelDto": {
            "type": "object",
            "properties": {
              "ms_model_scope_id": {
                "type": "number"
              },
              "is_current": {
                "type": "number"
              },
              "algorithm_name": {
                "type": "string",
                "default": "LpMaxPayoff"
              }
            }
          },
          "ModelConfigurations": {
            "type": "object",
            "properties": {
              "model_configuration_id": {
                "type": "number"
              },
              "m_model_id": {
                "type": "number"
              },
              "config_json": {
                "type": "string"
              },
              "is_current": {
                "type": "number"
              }
            },
            "required": [
              "model_configuration_id",
              "m_model_id",
              "config_json"
            ]
          },
          "CreateModelConfigurationsDto": {
            "type": "object",
            "properties": {
              "m_model_id": {
                "type": "number"
              },
              "is_current": {
                "type": "number"
              },
              "config_json": {
                "type": "string"
              }
            },
            "required": [
              "m_model_id",
              "config_json"
            ]
          },
          "CreateModelConfigurationsDtoArray": {
            "type": "object",
            "properties": {
              "createModelConfigurationsDtos": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/CreateModelConfigurationsDto"
                }
              }
            },
            "required": [
              "createModelConfigurationsDtos"
            ]
          },
          "UpdateModelConfigurationsDto": {
            "type": "object",
            "properties": {
              "m_model_id": {
                "type": "number"
              },
              "is_current": {
                "type": "number"
              },
              "config_json": {
                "type": "string"
              }
            }
          },
          "ModelScope": {
            "type": "object",
            "properties": {
              "model_scope_id": {
                "type": "number"
              },
              "scoped_predicate": {
                "type": "string"
              },
              "is_current": {
                "type": "number"
              },
              "skills": {
                "type": "string"
              },
              "model_scope_rank": {
                "type": "number",
                "default": 1
              }
            },
            "required": [
              "model_scope_id"
            ]
          },
          "CreateModelScopeDto": {
            "type": "object",
            "properties": {
              "scoped_predicate": {
                "type": "string"
              },
              "is_current": {
                "type": "number"
              },
              "skills": {
                "type": "string"
              },
              "model_scope_rank": {
                "type": "number",
                "default": 1
              }
            }
          },
          "CreateModelScopeDtoArray": {
            "type": "object",
            "properties": {
              "createModelScopeDtos": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/CreateModelScopeDto"
                }
              }
            },
            "required": [
              "createModelScopeDtos"
            ]
          },
          "UpdateModelScopeDto": {
            "type": "object",
            "properties": {
              "scoped_predicate": {
                "type": "string"
              },
              "is_current": {
                "type": "number"
              },
              "skills": {
                "type": "string"
              },
              "model_scope_rank": {
                "type": "number",
                "default": 1
              }
            }
          },
          "SkillsetCallGroupRates": {
            "type": "object",
            "properties": {
              "skillset_callgroup_rates_id": {
                "type": "number"
              },
              "skillsetstring": {
                "type": "string"
              },
              "m_model_id": {
                "type": "number"
              },
              "callgroup": {
                "type": "number"
              },
              "totalrates": {
                "type": "number"
              },
              "skillsetcallgroup": {
                "type": "string"
              },
              "is_current": {
                "type": "number"
              },
              "generatedon": {
                "type": "number"
              },
              "comments": {
                "type": "string"
              },
              "aht": {
                "type": "number"
              }
            },
            "required": [
              "skillset_callgroup_rates_id",
              "skillsetstring",
              "m_model_id"
            ]
          },
          "CreateSkillsetCallGroupRatesDto": {
            "type": "object",
            "properties": {
              "skillsetstring": {
                "type": "string"
              },
              "m_model_id": {
                "type": "number"
              },
              "callgroup": {
                "type": "number"
              },
              "totalrates": {
                "type": "number"
              },
              "skillsetcallgroup": {
                "type": "string"
              },
              "is_current": {
                "type": "number"
              },
              "generatedon": {
                "type": "string",
                "format": "date-time"
              },
              "comments": {
                "type": "string"
              },
              "aht": {
                "type": "number"
              }
            },
            "required": [
              "skillsetstring",
              "m_model_id"
            ]
          },
          "CreateSkillsetCallGroupRatesDtoArray": {
            "type": "object",
            "properties": {
              "createSkillsetCallGroupRatesDtos": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/CreateSkillsetCallGroupRatesDto"
                }
              }
            },
            "required": [
              "createSkillsetCallGroupRatesDtos"
            ]
          },
          "UpdateSkillsetCallGroupRatesDto": {
            "type": "object",
            "properties": {
              "skillsetstring": {
                "type": "string"
              },
              "m_model_id": {
                "type": "number"
              },
              "callgroup": {
                "type": "number"
              },
              "totalrates": {
                "type": "number"
              },
              "skillsetcallgroup": {
                "type": "string"
              },
              "is_current": {
                "type": "number"
              },
              "generatedon": {
                "type": "string",
                "format": "date-time"
              },
              "comments": {
                "type": "string"
              },
              "aht": {
                "type": "number"
              }
            }
          },
          "SimAgentInfo": {
            "type": "object",
            "properties": {
              "agentid": {
                "type": "number"
              },
              "agent_group": {
                "type": "number"
              },
              "is_current": {
                "type": "number"
              },
              "virtual_priority": {
                "type": "number"
              }
            },
            "required": [
              "agentid",
              "agent_group",
              "virtual_priority"
            ]
          },
          "SimAgentPayout": {
            "type": "object",
            "properties": {
              "agent_payout_id": {
                "type": "number"
              },
              "payoutkey": {
                "type": "string"
              },
              "m_model_id": {
                "type": "number"
              },
              "agentid": {
                "type": "number"
              },
              "callgroup": {
                "type": "number"
              },
              "payout": {
                "type": "number"
              },
              "is_current": {
                "type": "number"
              },
              "generatedon": {
                "type": "string",
                "format": "date-time"
              },
              "comments": {
                "type": "string"
              }
            },
            "required": [
              "agent_payout_id",
              "payoutkey",
              "m_model_id"
            ]
          },
          "SimAgentDiagonalModel": {
            "type": "object",
            "properties": {
              "agent_percentile_id": {
                "type": "number"
              },
              "m_model_id": {
                "type": "number"
              },
              "agent_id": {
                "type": "number"
              },
              "agent_percentile": {
                "type": "number"
              },
              "is_current": {
                "type": "number"
              },
              "generatedon": {
                "type": "string",
                "format": "date-time"
              },
              "comments": {
                "type": "string"
              },
              "inflation_factor": {
                "type": "number"
              }
            },
            "required": [
              "agent_percentile_id",
              "m_model_id"
            ]
          },
          "SimCallGroup": {
            "type": "object",
            "properties": {
              "callgroupid": {
                "type": "number"
              },
              "m_model_id": {
                "type": "number"
              },
              "is_current": {
                "type": "number"
              },
              "callgroup_tree_str": {
                "type": "string"
              }
            },
            "required": [
              "callgroupid",
              "m_model_id",
              "callgroup_tree_str"
            ]
          },
          "SimCallDiagonalModel": {
            "type": "object",
            "properties": {
              "callgroup_percentile_id": {
                "type": "number"
              },
              "m_model_id": {
                "type": "number"
              },
              "callgroup_id": {
                "type": "number"
              },
              "min_percentile": {
                "type": "number"
              },
              "max_percentile": {
                "type": "number"
              },
              "is_current": {
                "type": "number"
              },
              "generatedon": {
                "type": "string",
                "format": "date-time"
              },
              "comments": {
                "type": "string"
              }
            },
            "required": [
              "callgroup_percentile_id",
              "m_model_id"
            ]
          },
          "SimGlobalConfiguration": {
            "type": "object",
            "properties": {
              "global_configuration_id": {
                "type": "number"
              },
              "is_current": {
                "type": "number"
              },
              "config_json": {
                "type": "string"
              }
            },
            "required": [
              "global_configuration_id",
              "config_json"
            ]
          },
          "SimModel": {
            "type": "object",
            "properties": {
              "model_id": {
                "type": "number"
              },
              "ms_model_scope_id": {
                "type": "number"
              },
              "is_current": {
                "type": "number"
              },
              "algorithm_name": {
                "type": "string",
                "default": "LpMaxPayoff"
              }
            },
            "required": [
              "model_id",
              "ms_model_scope_id"
            ]
          },
          "SimModelConfigurations": {
            "type": "object",
            "properties": {
              "model_configuration_id": {
                "type": "number"
              },
              "m_model_id": {
                "type": "number"
              },
              "config_json": {
                "type": "string"
              },
              "is_current": {
                "type": "number"
              }
            },
            "required": [
              "model_configuration_id",
              "m_model_id",
              "config_json"
            ]
          },
          "SimModelScope": {
            "type": "object",
            "properties": {
              "model_scope_id": {
                "type": "number"
              },
              "scoped_predicate": {
                "type": "string"
              },
              "is_current": {
                "type": "number"
              },
              "skills": {
                "type": "string"
              },
              "model_scope_rank": {
                "type": "number",
                "default": 1
              }
            },
            "required": [
              "model_scope_id"
            ]
          },
          "SimSkillsetCallGroupRates": {
            "type": "object",
            "properties": {
              "skillset_callgroup_rates_id": {
                "type": "number"
              },
              "skillsetstring": {
                "type": "string"
              },
              "m_model_id": {
                "type": "number"
              },
              "callgroup": {
                "type": "number"
              },
              "totalrates": {
                "type": "number"
              },
              "skillsetcallgroup": {
                "type": "string"
              },
              "is_current": {
                "type": "number"
              },
              "generatedon": {
                "type": "number"
              },
              "comments": {
                "type": "string"
              },
              "aht": {
                "type": "number"
              }
            },
            "required": [
              "skillset_callgroup_rates_id",
              "skillsetstring",
              "m_model_id"
            ]
          },
          "Eval3Program": {
            "type": "object",
            "properties": {
              "program_id": {
                "type": "number"
              },
              "program_name": {
                "type": "string"
              },
              "program_predicate": {
                "type": "string"
              },
              "algorithm_name": {
                "type": "string"
              },
              "sensor_key": {
                "type": "string"
              },
              "program_rank": {
                "type": "number"
              },
              "generated_on": {
                "type": "string",
                "format": "date-time"
              }
            },
            "required": [
              "program_id",
              "algorithm_name",
              "program_rank"
            ]
          },
          "Eval3CreateProgramDto": {
            "type": "object",
            "properties": {
              "program_name": {
                "type": "string"
              },
              "program_predicate": {
                "type": "string"
              },
              "algorithm_name": {
                "type": "string"
              },
              "sensor_key": {
                "type": "string"
              },
              "program_rank": {
                "type": "number"
              },
              "generated_on": {
                "type": "string",
                "format": "date-time"
              }
            },
            "required": [
              "program_rank"
            ]
          },
          "Eval3CreateProgramDtoArray": {
            "type": "object",
            "properties": {
              "createProgramDtos": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Eval3CreateProgramDto"
                }
              }
            },
            "required": [
              "createProgramDtos"
            ]
          },
          "Eval3UpdateProgramDto": {
            "type": "object",
            "properties": {
              "program_name": {
                "type": "string"
              },
              "program_predicate": {
                "type": "string"
              },
              "algorithm_name": {
                "type": "string"
              },
              "sensor_key": {
                "type": "string"
              },
              "program_rank": {
                "type": "number"
              },
              "generated_on": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          "Eval3Callgroup": {
            "type": "object",
            "properties": {
              "callgroup_tree_id": {
                "type": "number"
              },
              "callgroup_tree_json": {
                "type": "string"
              },
              "generated_on": {
                "type": "string",
                "format": "date-time"
              },
              "comments": {
                "type": "string"
              }
            },
            "required": [
              "callgroup_tree_id",
              "callgroup_tree_json"
            ]
          },
          "Eval3CreateCallgroupDto": {
            "type": "object",
            "properties": {
              "callgroup_tree_json": {
                "type": "string"
              },
              "generated_on": {
                "type": "string",
                "format": "date-time"
              },
              "comments": {
                "type": "string"
              }
            },
            "required": [
              "callgroup_tree_json"
            ]
          },
          "Eval3CreateCallgroupDtoArray": {
            "type": "object",
            "properties": {
              "createCallgroupDtos": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Eval3CreateCallgroupDto"
                }
              }
            },
            "required": [
              "createCallgroupDtos"
            ]
          },
          "Eval3UpdateCallgroupDto": {
            "type": "object",
            "properties": {
              "callgroup_tree_json": {
                "type": "string"
              },
              "generated_on": {
                "type": "string",
                "format": "date-time"
              },
              "comments": {
                "type": "string"
              }
            }
          },
          "Eval3ModelunitConfiguration": {
            "type": "object",
            "properties": {
              "modelunit_configuration_id": {
                "type": "number"
              },
              "config": {
                "type": "string"
              }
            },
            "required": [
              "modelunit_configuration_id",
              "config"
            ]
          },
          "Eval3CreateModelunitConfigurationDto": {
            "type": "object",
            "properties": {
              "config": {
                "type": "string"
              }
            },
            "required": [
              "config"
            ]
          },
          "Eval3CreateModelunitConfigurationDtoArray": {
            "type": "object",
            "properties": {
              "createModelunitConfigurationDtos": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Eval3CreateModelunitConfigurationDto"
                }
              }
            },
            "required": [
              "createModelunitConfigurationDtos"
            ]
          },
          "Eval3UpdateModelunitConfigurationDto": {
            "type": "object",
            "properties": {
              "config": {
                "type": "string"
              }
            }
          },
          "Eval3Modelunit": {
            "type": "object",
            "properties": {
              "modelunit_id": {
                "type": "number"
              },
              "callgroup_tree_id": {
                "type": "number"
              },
              "modelunit_configuration_id": {
                "type": "number"
              },
              "modelunit_name": {
                "type": "string"
              },
              "call_predicate": {
                "type": "string"
              },
              "agent_predicate": {
                "type": "string"
              },
              "parent_id": {
                "type": "number"
              },
              "agent_payoff_id": {
                "type": "number"
              },
              "skillset_callgroup_rates_id": {
                "type": "number"
              },
              "agent_diagonal_model_id": {
                "type": "number"
              },
              "call_diagonal_model_id": {
                "type": "number"
              },
              "modelunit_rank": {
                "type": "number"
              }
            },
            "required": [
              "modelunit_id",
              "callgroup_tree_id",
              "modelunit_configuration_id"
            ]
          },
          "Eval3CreateModelunitDto": {
            "type": "object",
            "properties": {
              "callgroup_tree_id": {
                "type": "number"
              },
              "modelunit_configuration_id": {
                "type": "number"
              },
              "modelunit_name": {
                "type": "string"
              },
              "call_predicate": {
                "type": "string"
              },
              "agent_predicate": {
                "type": "string"
              },
              "parent_id": {
                "type": "number"
              },
              "agent_payoff_id": {
                "type": "number"
              },
              "skillset_callgroup_rates_id": {
                "type": "number"
              },
              "agent_diagonal_model_id": {
                "type": "number"
              },
              "call_diagonal_model_id": {
                "type": "number"
              },
              "modelunit_rank": {
                "type": "number"
              }
            }
          },
          "Eval3CreateModelunitDtoArray": {
            "type": "object",
            "properties": {
              "createModelunitDtos": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Eval3CreateModelunitDto"
                }
              }
            },
            "required": [
              "createModelunitDtos"
            ]
          },
          "Eval3UpdateModelunitDto": {
            "type": "object",
            "properties": {
              "callgroup_tree_id": {
                "type": "number"
              },
              "modelunit_configuration_id": {
                "type": "number"
              },
              "modelunit_name": {
                "type": "string"
              },
              "call_predicate": {
                "type": "string"
              },
              "agent_predicate": {
                "type": "string"
              },
              "parent_id": {
                "type": "number"
              },
              "agent_payoff_id": {
                "type": "number"
              },
              "skillset_callgroup_rates_id": {
                "type": "number"
              },
              "agent_diagonal_model_id": {
                "type": "number"
              },
              "call_diagonal_model_id": {
                "type": "number"
              },
              "modelunit_rank": {
                "type": "number"
              }
            }
          },
          "Eval3Activemodelunits": {
            "type": "object",
            "properties": {
              "modelunit_id": {
                "type": "number"
              },
              "program_id": {
                "type": "number"
              },
              "tenant_id": {
                "type": "number"
              },
              "active_datetime": {
                "type": "string",
                "format": "date-time"
              },
              "evaluator_instance": {
                "type": "string"
              }
            },
            "required": [
              "modelunit_id",
              "program_id",
              "tenant_id",
              "active_datetime",
              "evaluator_instance"
            ]
          },
          "Eval3CreateActivemodelunitsDto": {
            "type": "object",
            "properties": {
              "modelunit_id": {
                "type": "number"
              },
              "program_id": {
                "type": "number"
              },
              "tenant_id": {
                "type": "number"
              },
              "active_datetime": {
                "type": "string",
                "format": "date-time"
              },
              "evaluator_instance": {
                "type": "string"
              }
            },
            "required": [
              "modelunit_id",
              "program_id",
              "tenant_id"
            ]
          },
          "Eval3CreateActivemodelunitsDtoArray": {
            "type": "object",
            "properties": {
              "createActivemodelunitsDtos": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Eval3CreateActivemodelunitsDto"
                }
              }
            },
            "required": [
              "createActivemodelunitsDtos"
            ]
          },
          "Eval3UpdateActivemodelunitsDto": {
            "type": "object",
            "properties": {
              "program_id": {
                "type": "number"
              },
              "tenant_id": {
                "type": "number"
              },
              "evaluator_instance": {
                "type": "string"
              }
            }
          },
          "MaxDto": {
            "type": "object",
            "properties": {
              "max": {
                "type": "number"
              }
            },
            "required": [
              "max"
            ]
          },
          "Eval3AgentDiagonalModel": {
            "type": "object",
            "properties": {
              "agent_diagonal_model_id": {
                "type": "number"
              },
              "agent_id": {
                "type": "string"
              },
              "agent_percentile": {
                "type": "number"
              },
              "inflation_factor": {
                "type": "number"
              },
              "generated_on": {
                "type": "string",
                "format": "date-time"
              },
              "comments": {
                "type": "string"
              }
            },
            "required": [
              "agent_diagonal_model_id",
              "agent_id"
            ]
          },
          "Eval3CreateAgentDiagonalModelDto": {
            "type": "object",
            "properties": {
              "agent_diagonal_model_id": {
                "type": "number"
              },
              "agent_id": {
                "type": "string"
              },
              "agent_percentile": {
                "type": "number"
              },
              "inflation_factor": {
                "type": "number"
              },
              "generated_on": {
                "type": "string",
                "format": "date-time"
              },
              "comments": {
                "type": "string"
              }
            },
            "required": [
              "agent_diagonal_model_id",
              "agent_id"
            ]
          },
          "Eval3CreateAgentDiagonalModelDtoArray": {
            "type": "object",
            "properties": {
              "createAgentDiagonalModelDtos": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Eval3CreateAgentDiagonalModelDto"
                }
              }
            },
            "required": [
              "createAgentDiagonalModelDtos"
            ]
          },
          "Eval3UpdateAgentDiagonalModelDto": {
            "type": "object",
            "properties": {
              "agent_percentile": {
                "type": "number"
              },
              "inflation_factor": {
                "type": "number"
              },
              "generated_on": {
                "type": "string",
                "format": "date-time"
              },
              "comments": {
                "type": "string"
              }
            }
          },
          "Eval3AgentInfo": {
            "type": "object",
            "properties": {
              "agent_id": {
                "type": "string"
              },
              "agent_group": {
                "type": "number"
              },
              "virtual_priority": {
                "type": "number"
              },
              "active_datetime": {
                "type": "string",
                "format": "date-time"
              },
              "evaluator_instance": {
                "type": "string"
              }
            },
            "required": [
              "agent_id",
              "agent_group",
              "virtual_priority",
              "active_datetime",
              "evaluator_instance"
            ]
          },
          "Eval3CreateAgentInfoDto": {
            "type": "object",
            "properties": {
              "agent_id": {
                "type": "string"
              },
              "agent_group": {
                "type": "number"
              },
              "virtual_priority": {
                "type": "number"
              },
              "active_datetime": {
                "type": "string",
                "format": "date-time"
              },
              "evaluator_instance": {
                "type": "string"
              }
            },
            "required": [
              "agent_id",
              "agent_group",
              "virtual_priority"
            ]
          },
          "Eval3CreateAgentInfoDtoArray": {
            "type": "object",
            "properties": {
              "createAgentInfoDtos": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Eval3CreateAgentInfoDto"
                }
              }
            },
            "required": [
              "createAgentInfoDtos"
            ]
          },
          "Eval3UpdateAgentInfoDto": {
            "type": "object",
            "properties": {
              "virtual_priority": {
                "type": "number"
              }
            }
          },
          "Eval3AgentPayoff": {
            "type": "object",
            "properties": {
              "agent_payoff_id": {
                "type": "number"
              },
              "payoff_key": {
                "type": "string"
              },
              "agent_id": {
                "type": "number"
              },
              "callgroup": {
                "type": "number"
              },
              "payout": {
                "type": "number"
              },
              "generated_on": {
                "type": "string",
                "format": "date-time"
              },
              "comments": {
                "type": "string"
              }
            },
            "required": [
              "agent_payoff_id",
              "payoff_key"
            ]
          },
          "Eval3CreateAgentPayoffDto": {
            "type": "object",
            "properties": {
              "agent_payoff_id": {
                "type": "number"
              },
              "payoff_key": {
                "type": "string"
              },
              "agent_id": {
                "type": "number"
              },
              "callgroup": {
                "type": "number"
              },
              "payout": {
                "type": "number"
              },
              "generated_on": {
                "type": "string",
                "format": "date-time"
              },
              "comments": {
                "type": "string"
              }
            },
            "required": [
              "agent_payoff_id",
              "payoff_key"
            ]
          },
          "Eval3CreateAgentPayoffDtoArray": {
            "type": "object",
            "properties": {
              "createAgentPayoffDtos": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Eval3CreateAgentPayoffDto"
                }
              }
            },
            "required": [
              "createAgentPayoffDtos"
            ]
          },
          "Eval3UpdateAgentPayoffDto": {
            "type": "object",
            "properties": {
              "agent_id": {
                "type": "number"
              },
              "callgroup": {
                "type": "number"
              },
              "payout": {
                "type": "number"
              },
              "generated_on": {
                "type": "string",
                "format": "date-time"
              },
              "comments": {
                "type": "string"
              }
            }
          },
          "Eval3CallDiagonalModel": {
            "type": "object",
            "properties": {
              "call_diagonal_model_id": {
                "type": "number"
              },
              "callgroup_id": {
                "type": "number"
              },
              "min_percentile": {
                "type": "number"
              },
              "max_percentile": {
                "type": "number"
              },
              "generated_on": {
                "type": "string",
                "format": "date-time"
              },
              "comments": {
                "type": "string"
              }
            },
            "required": [
              "call_diagonal_model_id",
              "callgroup_id"
            ]
          },
          "Eval3CreateCallDiagonalModelDto": {
            "type": "object",
            "properties": {
              "call_diagonal_model_id": {
                "type": "number"
              },
              "callgroup_id": {
                "type": "number"
              },
              "min_percentile": {
                "type": "number"
              },
              "max_percentile": {
                "type": "number"
              },
              "generated_on": {
                "type": "string",
                "format": "date-time"
              },
              "comments": {
                "type": "string"
              }
            },
            "required": [
              "call_diagonal_model_id",
              "callgroup_id"
            ]
          },
          "Eval3CreateCallDiagonalModelDtoArray": {
            "type": "object",
            "properties": {
              "createCallDiagonalModelDtos": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Eval3CreateCallDiagonalModelDto"
                }
              }
            },
            "required": [
              "createCallDiagonalModelDtos"
            ]
          },
          "Eval3UpdateCallDiagonalModelDto": {
            "type": "object",
            "properties": {
              "min_percentile": {
                "type": "number"
              },
              "max_percentile": {
                "type": "number"
              },
              "generated_on": {
                "type": "string",
                "format": "date-time"
              },
              "comments": {
                "type": "string"
              }
            }
          },
          "Eval3GlobalConfiguration": {
            "type": "object",
            "properties": {
              "global_configuration_id": {
                "type": "number"
              },
              "config": {
                "type": "string"
              },
              "active_datetime": {
                "type": "string",
                "format": "date-time"
              },
              "evaluator_instance": {
                "type": "string"
              }
            },
            "required": [
              "global_configuration_id",
              "config",
              "evaluator_instance"
            ]
          },
          "Eval3CreateGlobalConfigurationDto": {
            "type": "object",
            "properties": {
              "config": {
                "type": "string"
              },
              "active_datetime": {
                "type": "string",
                "format": "date-time"
              },
              "evaluator_instance": {
                "type": "string"
              }
            },
            "required": [
              "config"
            ]
          },
          "Eval3CreateGlobalConfigurationDtoArray": {
            "type": "object",
            "properties": {
              "createGlobalConfigurationDtos": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Eval3CreateGlobalConfigurationDto"
                }
              }
            },
            "required": [
              "createGlobalConfigurationDtos"
            ]
          },
          "Eval3UpdateGlobalConfigurationDto": {
            "type": "object",
            "properties": {
              "config": {
                "type": "string"
              },
              "active_datetime": {
                "type": "string",
                "format": "date-time"
              },
              "evaluator_instance": {
                "type": "string"
              }
            }
          },
          "Eval3ModelNotifier": {
            "type": "object",
            "properties": {
              "id": {
                "type": "number"
              },
              "generatedon": {
                "type": "string",
                "format": "date-time"
              },
              "ismodelupdate": {
                "type": "number"
              }
            },
            "required": [
              "id"
            ]
          },
          "Eval3CreateModelNotifierDto": {
            "type": "object",
            "properties": {
              "generatedon": {
                "type": "string",
                "format": "date-time"
              },
              "ismodelupdate": {
                "type": "number"
              }
            }
          },
          "Eval3CreateModelNotifierDtoArray": {
            "type": "object",
            "properties": {
              "createModelNotifierDtos": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Eval3CreateModelNotifierDto"
                }
              }
            },
            "required": [
              "createModelNotifierDtos"
            ]
          },
          "Eval3UpdateModelNotifierDto": {
            "type": "object",
            "properties": {
              "generatedon": {
                "type": "string",
                "format": "date-time"
              },
              "ismodelupdate": {
                "type": "number"
              }
            }
          },
          "Eval3SkillsetCallgroupRates": {
            "type": "object",
            "properties": {
              "skillset_callgroup_rates_id": {
                "type": "number"
              },
              "skillset_string": {
                "type": "string"
              },
              "callgroup": {
                "type": "number"
              },
              "total_rates": {
                "type": "number"
              },
              "skillset_callgroup": {
                "type": "string"
              },
              "generated_on": {
                "type": "string",
                "format": "date-time"
              },
              "comments": {
                "type": "string"
              },
              "aht": {
                "type": "number"
              }
            },
            "required": [
              "skillset_callgroup_rates_id",
              "skillset_string"
            ]
          },
          "Eval3CreateSkillsetCallgroupRatesDto": {
            "type": "object",
            "properties": {
              "skillset_callgroup_rates_id": {
                "type": "number"
              },
              "skillset_string": {
                "type": "string"
              },
              "callgroup": {
                "type": "number"
              },
              "total_rates": {
                "type": "number"
              },
              "skillset_callgroup": {
                "type": "string"
              },
              "generated_on": {
                "type": "string",
                "format": "date-time"
              },
              "comments": {
                "type": "string"
              },
              "aht": {
                "type": "number"
              }
            },
            "required": [
              "skillset_callgroup_rates_id",
              "skillset_string"
            ]
          },
          "Eval3CreateSkillsetCallgroupRatesDtoArray": {
            "type": "object",
            "properties": {
              "createSkillsetCallgroupRatesDtos": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Eval3CreateSkillsetCallgroupRatesDto"
                }
              }
            },
            "required": [
              "createSkillsetCallgroupRatesDtos"
            ]
          },
          "Eval3UpdateSkillsetCallgroupRatesDto": {
            "type": "object",
            "properties": {
              "callgroup": {
                "type": "number"
              },
              "total_rates": {
                "type": "number"
              },
              "skillset_callgroup": {
                "type": "string"
              },
              "generated_on": {
                "type": "string",
                "format": "date-time"
              },
              "comments": {
                "type": "string"
              },
              "aht": {
                "type": "number"
              }
            }
          },
          "Eval3SimProgram": {
            "type": "object",
            "properties": {
              "program_id": {
                "type": "number"
              },
              "program_name": {
                "type": "string"
              },
              "program_predicate": {
                "type": "string"
              },
              "algorithm_name": {
                "type": "string"
              },
              "sensor_key": {
                "type": "string"
              },
              "program_rank": {
                "type": "number"
              },
              "generated_on": {
                "type": "string",
                "format": "date-time"
              }
            },
            "required": [
              "program_id",
              "algorithm_name",
              "program_rank"
            ]
          },
          "Eval3SimCallgroup": {
            "type": "object",
            "properties": {
              "callgroup_tree_id": {
                "type": "number"
              },
              "callgroup_tree_json": {
                "type": "string"
              },
              "generated_on": {
                "type": "string",
                "format": "date-time"
              },
              "comments": {
                "type": "string"
              }
            },
            "required": [
              "callgroup_tree_id",
              "callgroup_tree_json"
            ]
          },
          "Eval3SimModelunitConfiguration": {
            "type": "object",
            "properties": {
              "modelunit_configuration_id": {
                "type": "number"
              },
              "config": {
                "type": "string"
              }
            },
            "required": [
              "modelunit_configuration_id",
              "config"
            ]
          },
          "Eval3SimModelunit": {
            "type": "object",
            "properties": {
              "modelunit_id": {
                "type": "number"
              },
              "callgroup_tree_id": {
                "type": "number"
              },
              "modelunit_configuration_id": {
                "type": "number"
              },
              "modelunit_name": {
                "type": "string"
              },
              "call_predicate": {
                "type": "string"
              },
              "agent_predicate": {
                "type": "string"
              },
              "parent_id": {
                "type": "number"
              },
              "agent_payoff_id": {
                "type": "number"
              },
              "skillset_callgroup_rates_id": {
                "type": "number"
              },
              "agent_diagonal_model_id": {
                "type": "number"
              },
              "call_diagonal_model_id": {
                "type": "number"
              },
              "modelunit_rank": {
                "type": "number"
              }
            },
            "required": [
              "modelunit_id",
              "callgroup_tree_id",
              "modelunit_configuration_id"
            ]
          },
          "Eval3SimActivemodelunits": {
            "type": "object",
            "properties": {
              "modelunit_id": {
                "type": "number"
              },
              "program_id": {
                "type": "number"
              },
              "tenant_id": {
                "type": "number"
              },
              "active_datetime": {
                "type": "string",
                "format": "date-time"
              },
              "evaluator_instance": {
                "type": "string"
              }
            },
            "required": [
              "modelunit_id",
              "program_id",
              "tenant_id",
              "active_datetime",
              "evaluator_instance"
            ]
          },
          "Eval3SimAgentDiagonalModel": {
            "type": "object",
            "properties": {
              "agent_diagonal_model_id": {
                "type": "number"
              },
              "agent_id": {
                "type": "string"
              },
              "agent_percentile": {
                "type": "number"
              },
              "inflation_factor": {
                "type": "number"
              },
              "generated_on": {
                "type": "string",
                "format": "date-time"
              },
              "comments": {
                "type": "string"
              }
            },
            "required": [
              "agent_diagonal_model_id",
              "agent_id"
            ]
          },
          "Eval3SimAgentInfo": {
            "type": "object",
            "properties": {
              "agent_id": {
                "type": "string"
              },
              "agent_group": {
                "type": "number"
              },
              "virtual_priority": {
                "type": "number"
              },
              "active_datetime": {
                "type": "string",
                "format": "date-time"
              },
              "evaluator_instance": {
                "type": "string"
              }
            },
            "required": [
              "agent_id",
              "agent_group",
              "virtual_priority",
              "active_datetime",
              "evaluator_instance"
            ]
          },
          "Eval3SimAgentPayoff": {
            "type": "object",
            "properties": {
              "agent_payoff_id": {
                "type": "number"
              },
              "payoff_key": {
                "type": "string"
              },
              "agent_id": {
                "type": "number"
              },
              "callgroup": {
                "type": "number"
              },
              "payout": {
                "type": "number"
              },
              "generated_on": {
                "type": "string",
                "format": "date-time"
              },
              "comments": {
                "type": "string"
              }
            },
            "required": [
              "agent_payoff_id",
              "payoff_key"
            ]
          },
          "Eval3SimCallDiagonalModel": {
            "type": "object",
            "properties": {
              "call_diagonal_model_id": {
                "type": "number"
              },
              "callgroup_id": {
                "type": "number"
              },
              "min_percentile": {
                "type": "number"
              },
              "max_percentile": {
                "type": "number"
              },
              "generated_on": {
                "type": "string",
                "format": "date-time"
              },
              "comments": {
                "type": "string"
              }
            },
            "required": [
              "call_diagonal_model_id",
              "callgroup_id"
            ]
          },
          "Eval3SimGlobalConfiguration": {
            "type": "object",
            "properties": {
              "global_configuration_id": {
                "type": "number"
              },
              "config": {
                "type": "string"
              },
              "active_datetime": {
                "type": "string",
                "format": "date-time"
              },
              "evaluator_instance": {
                "type": "string"
              }
            },
            "required": [
              "global_configuration_id",
              "config",
              "evaluator_instance"
            ]
          },
          "Eval3SimModelNotifier": {
            "type": "object",
            "properties": {
              "id": {
                "type": "number"
              },
              "generatedon": {
                "type": "string",
                "format": "date-time"
              },
              "ismodelupdate": {
                "type": "number"
              }
            },
            "required": [
              "id"
            ]
          },
          "Eval3SimSkillsetCallgroupRates": {
            "type": "object",
            "properties": {
              "skillset_callgroup_rates_id": {
                "type": "number"
              },
              "skillset_string": {
                "type": "string"
              },
              "callgroup": {
                "type": "number"
              },
              "total_rates": {
                "type": "number"
              },
              "skillset_callgroup": {
                "type": "string"
              },
              "generated_on": {
                "type": "string",
                "format": "date-time"
              },
              "comments": {
                "type": "string"
              },
              "aht": {
                "type": "number"
              }
            },
            "required": [
              "skillset_callgroup_rates_id",
              "skillset_string"
            ]
          }
        }
      }
    },
    {
      "label": "Afiniti Link SDK",
      "value": "afiniti_link_si",
      "Specs": {
        "openapi": "3.0.0",
        "info": {
          "title": "Afiniti Link SI - REST Interface",
          "description": "This API defines and document the REST methods to interface Afiniti with stateful ACDs.",
          "termsOfService": "https://www.afiniti.com/",
          "contact": {
            "name": "Afiniti",
            "url": "https://afiniti.com/",
            "email": "info@afiniti.com"
          },
          "license": {
            "name": "2021 Afiniti. All rights reserved",
            "url": "https://www.afiniti.com/"
          },
          "version": "1.0.0"
        },
        "servers": [
          {
            "url": "https://virtserver.swaggerhub.com/Afiniti8/AfinitiLinkRestInterfaceWithIniti/1.0.0",
            "description": "SwaggerHub API Auto Mocking"
          },
          {
            "url": "https://virtserver.swaggerhub.com/Afiniti8/afinitilink/1.0.0",
            "description": "SwaggerHub API Auto Mocking"
          },
          {
            "url": "http://localhost:3000",
            "description": "Localhost Server"
          },
          {
            "url": "https://api.afinitilink.com/1.0.0",
            "description": "Afiniti Link Server"
          }
        ],
        "security": [
          {
            "basicAuth": []
          }
        ],
        "tags": [
          {
            "name": "Authorization",
            "description": "Methods for authorization like JWT management"
          },
          {
            "name": "Initialization",
            "description": "Methods for initialization"
          },
          {
            "name": "Control",
            "description": "Methods for control messages"
          },
          {
            "name": "Routing",
            "description": "Methods for the roting messages"
          },
          {
            "name": "Interactions",
            "description": "Interactions related methods"
          },
          {
            "name": "Agents",
            "description": "Agent related methods"
          },
          {
            "name": "ACD to Afiniti",
            "description": "ACD will use these methods to send requests to the Afiniti Link"
          },
          {
            "name": "Afiniti to ACD",
            "description": "Afiniti will use these methods to send requests to the ACD"
          }
        ],
        "paths": {
          "/authorization/token": {
            "post": {
              "tags": [
                "Authorization",
                "ACD to Afiniti",
                "Afiniti to ACD"
              ],
              "summary": "Requests/Refresh the JWT token",
              "description": "This method will be used to request a **new token** or **refresh** a valid token.  When requesting a new token, basic authentication credentials following the  HTTP Basic authentication procedures and  `grantType = credentials` value will be  provided in the request body.\\nIn order to **refresh the token**, in the HTTP header  Basic authentication may be replaced with the Bearer &lt;token&gt; and the grant type  must be 'refreshToken' (`grantType = refreshToken`). \nAlso, when `grantType = refreshToken` it is mandatory to add a request  body parameter `refreshToken = &lt;refresh token value&gt;`. The refresh token value  is provided when the first token is issued. A new refresh token will be provided when the  operation is successful and the new value must be used in the future refresh requests.",
              "operationId": "generateToken",
              "requestBody": {
                "$ref": "#/components/requestBodies/bodyRequestToken"
              },
              "responses": {
                "200": {
                  "description": "**OK** - Token is generated and will be returned in response body",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/bodyTokenGrantedResponse"
                      }
                    }
                  }
                },
                "400": {
                  "description": "**Bad Request**",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/bodyrefCountResponse"
                      }
                    }
                  }
                },
                "401": {
                  "description": "**Unauthorized**",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/bodyrefCountResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "basicAuth": []
                }
              ]
            }
          },
          "/init": {
            "post": {
              "tags": [
                "Initialization",
                "ACD to Afiniti"
              ],
              "summary": "Initialization related information",
              "description": "After getting authorization token, this will be the first request sent from the ACD. In the request body, ACD will provide it's base URL and (optional)`hbInterval` interval. If `hbInterval` interval is not sent by the ACD, heartbeat will be disabled by default.\n",
              "operationId": "init",
              "requestBody": {
                "$ref": "#/components/requestBodies/bodyInit"
              },
              "responses": {
                "200": {
                  "description": "**OK**",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/bodyInitResponse"
                      }
                    }
                  }
                },
                "400": {
                  "description": "**Bad Request**",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/bodyrefCountResponse"
                      }
                    }
                  }
                },
                "401": {
                  "description": "**Unauthorized**",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/bodyrefCountResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "bearerAuth": []
                }
              ]
            }
          },
          "/skillsActivation": {
            "post": {
              "tags": [
                "Initialization",
                "Afiniti to ACD"
              ],
              "summary": "Enlisting the skills monitored by Afiniti",
              "description": "After initialization, Afiniti will send list of campaigns/queues/skills to the ACD to activate the monitoring.\n",
              "operationId": "skillsActivation",
              "requestBody": {
                "$ref": "#/components/requestBodies/bodyActivationDeactivation"
              },
              "responses": {
                "200": {
                  "description": "**OK**",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/bodyrefCountResponse"
                      }
                    }
                  }
                },
                "400": {
                  "description": "**Bad Request**",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/bodyrefCountResponse"
                      }
                    }
                  }
                },
                "401": {
                  "description": "**Unauthorized**",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/bodyrefCountResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "bearerAuth": []
                }
              ]
            }
          },
          "/skillsDeactivation": {
            "post": {
              "tags": [
                "Initialization",
                "Afiniti to ACD"
              ],
              "summary": "Delisting of skills monitored by Afiniti",
              "description": "Afiniti will send list of campaigns/queues/skills to the ACD to deactivate the monitoring on those skills.\n",
              "operationId": "skillsDeactivation",
              "requestBody": {
                "$ref": "#/components/requestBodies/bodyActivationDeactivation"
              },
              "responses": {
                "200": {
                  "description": "**OK**",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/bodyrefCountResponse"
                      }
                    }
                  }
                },
                "400": {
                  "description": "**Bad Request**",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/bodyrefCountResponse"
                      }
                    }
                  }
                },
                "401": {
                  "description": "**Unauthorized**",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/bodyrefCountResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "bearerAuth": []
                }
              ]
            }
          },
          "/control/heartbeat": {
            "post": {
              "tags": [
                "Control",
                "Afiniti to ACD"
              ],
              "summary": "Sends heartbeat message",
              "description": "Afiniti Link uses this method to send heartbeat message to ACD when connection is idle for a specified inetrval. ACD will respond OK.",
              "operationId": "heartbeat",
              "requestBody": {
                "$ref": "#/components/requestBodies/bodyHeartbeat"
              },
              "responses": {
                "200": {
                  "description": "**OK**",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/bodyrefCountResponse"
                      }
                    }
                  }
                },
                "400": {
                  "description": "**Bad Request**",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/bodyrefCountResponse"
                      }
                    }
                  }
                },
                "401": {
                  "description": "**Unauthorized**",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/bodyrefCountResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "bearerAuth": []
                }
              ]
            }
          },
          "/control/controlModeChange": {
            "post": {
              "tags": [
                "Control",
                "Afiniti to ACD"
              ],
              "summary": "Control Mode change",
              "description": "If Afiniti wants to change the mode, it will use this method to send a message to the ACD.",
              "operationId": "controlMode",
              "requestBody": {
                "$ref": "#/components/requestBodies/bodyctrlMode"
              },
              "responses": {
                "200": {
                  "description": "**OK**",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/bodyrefCountResponse"
                      }
                    }
                  }
                },
                "400": {
                  "description": "**Bad Request**",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/bodyrefCountResponse"
                      }
                    }
                  }
                },
                "401": {
                  "description": "**Unauthorized**",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/bodyrefCountResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "bearerAuth": []
                }
              ]
            }
          },
          "/routing/routeRequestSync": {
            "post": {
              "tags": [
                "Routing",
                "ACD to Afiniti"
              ],
              "summary": "ACD requests to Afiniti to find a route",
              "description": "ACD will use this method to send Route Request message the Afiniti to find route for an interaction and Afiniti will provide that as the response of the request. If some agents are available, Afiniti will respond with a Route Select by providing the agent ID in the response. Afiniti my send `TIMEOUT` in the response if it cannot find the agent in given time. The fields `agentId` and `timeout` in the response are mutually exclusive; only one can occur at a time. In case of customer surplus scenarios, Afiniti will wait for an agent to become available. The ACD should implement a timeout to end this Route Request. In case of timeout, the ACD must generate a Route End message with response code = `TIME_OUT`. The ACD can then again issue another Route Request to Afiniti with the same or an expanded target, or it can move to its default (ACD own) routing logic.",
              "operationId": "routeRequestSync",
              "requestBody": {
                "$ref": "#/components/requestBodies/bodyRouteRequest"
              },
              "responses": {
                "200": {
                  "description": "**OK**",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/inline_response_200"
                      }
                    }
                  }
                },
                "400": {
                  "description": "**Bad Request**",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/bodyrefCountResponse"
                      }
                    }
                  }
                },
                "401": {
                  "description": "**Unauthorized**",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/bodyrefCountResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "bearerAuth": []
                }
              ]
            }
          },
          "/routing/routeRequestAsync": {
            "post": {
              "tags": [
                "Routing",
                "ACD to Afiniti"
              ],
              "summary": "ACD request to Afiniti to find a route",
              "description": "ACD will use this method to send Route Request message the Afiniti to find route for an interaction and provide the route as webhook using path on /routing/routeSelect. If some agents are available, Afiniti will respond with a Route Select message. In case of customer surplus scenarios, Afiniti will wait for an agent to become available. The ACD should implement a timeout to end this Route Request. In case of timeout, the ACD must generate a Route End message with response code = `TIME_OUT`. The ACD can than again issue another Route Request to Afiniti with the same or an expanded target, or it can move to its default (ACD own) routing logic.",
              "operationId": "routeRequestAsync",
              "requestBody": {
                "$ref": "#/components/requestBodies/bodyRouteRequest"
              },
              "responses": {
                "200": {
                  "description": "**OK**",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/bodyRouteRequestAsyncResponse"
                      }
                    }
                  }
                },
                "400": {
                  "description": "**Bad Request**",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/bodyrefCountResponse"
                      }
                    }
                  }
                },
                "401": {
                  "description": "**Unauthorized**",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/bodyrefCountResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "bearerAuth": []
                }
              ]
            }
          },
          "/routing/routeSelect": {
            "post": {
              "tags": [
                "Routing",
                "Afiniti to ACD"
              ],
              "summary": "Afiniti finds a route for an interaction and send to the ACD",
              "description": "Afiniti will use this method to send Route Select message to the ACD. On getting Route Request message, Afiniti finds the best matching agent and sends back a Route Select to the ACD. The ACD should then patch the interaction to the recommended agent. Benchmark flag indicates whether the agent selection for the interaction was done using Afiniti intelligent pairing algorithm or on first in first out (FIFO) bases. If present in the message, the ACD should store the benchmark flag values in the interaction detail record of the interaction.",
              "operationId": "routeSelect",
              "requestBody": {
                "$ref": "#/components/requestBodies/bodyRouteSelect"
              },
              "responses": {
                "200": {
                  "description": "**OK**",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/bodyrefCountResponse"
                      }
                    }
                  }
                },
                "400": {
                  "description": "**Bad Request**",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/bodyrefCountResponse"
                      }
                    }
                  }
                },
                "401": {
                  "description": "**Unauthorized**",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/bodyrefCountResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "bearerAuth": []
                }
              ]
            }
          },
          "/routing/routeEnd": {
            "put": {
              "tags": [
                "Routing",
                "ACD to Afiniti",
                "Afiniti to ACD"
              ],
              "summary": "ACD will send Route End message",
              "description": "ACD will use this method to send Route End message to the Afiniti. This message indicates end of routing window of an interaction. The Response Code field tells the reason for routing window termination. If the ACD was able to patch the interaction to Afiniti recommended agent, the ResponseCode field will contain SUCCESS. In case of a route failure, the ResponseCode will contain the corresponding failure code. Afiniti may also end a routing window by sending Route End in response to Route Request. The Response Code will be SERVICE_NOT_AVAILABLE. In such cases the ACD should move to its default (ACD own) routing logic. Typically, Afiniti sends RouteEnd when it is operating in monitor mode.",
              "operationId": "routeEnd",
              "requestBody": {
                "$ref": "#/components/requestBodies/bodyRouteEnd"
              },
              "responses": {
                "200": {
                  "description": "**OK**",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/bodyrefCountResponse"
                      }
                    }
                  }
                },
                "400": {
                  "description": "**Bad Request**",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/bodyrefCountResponse"
                      }
                    }
                  }
                },
                "401": {
                  "description": "**Unauthorized**",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/bodyrefCountResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "bearerAuth": []
                }
              ]
            }
          },
          "/interactions/interactionInitiated": {
            "post": {
              "tags": [
                "Interactions",
                "ACD to Afiniti"
              ],
              "summary": "New interaction is initiated on the ACD",
              "description": "ACD uses this method to send **interaction Initiated** event to Afiniti. This is a very first event of the interaction and should be sent as soon as possible, preferably when interaction has just arrived on ACD in case of inbound. For outbound this event should be sent as early as dialing is initiated on a lead.\n",
              "operationId": "interactionInitiated",
              "requestBody": {
                "$ref": "#/components/requestBodies/bodyInteractionInitiated"
              },
              "responses": {
                "200": {
                  "description": "**OK**",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/bodyrefCountResponse"
                      }
                    }
                  }
                },
                "400": {
                  "description": "**Bad Request**",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/bodyrefCountResponse"
                      }
                    }
                  }
                },
                "401": {
                  "description": "**Unauthorized**",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/bodyrefCountResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "bearerAuth": []
                }
              ]
            }
          },
          "/interactions/interactionRinging": {
            "put": {
              "tags": [
                "Interactions",
                "ACD to Afiniti"
              ],
              "summary": "Interaction is ringing on an agent station",
              "description": "When an interaction starts ringing on some agent station, this method is used to send a message from ACD to Afiniti.\n",
              "operationId": "interactionRinging",
              "requestBody": {
                "$ref": "#/components/requestBodies/bodyInteractionRinging"
              },
              "responses": {
                "200": {
                  "description": "**OK**",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/bodyrefCountResponse"
                      }
                    }
                  }
                },
                "400": {
                  "description": "**Bad Request**",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/bodyrefCountResponse"
                      }
                    }
                  }
                },
                "401": {
                  "description": "**Unauthorized**",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/bodyrefCountResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "bearerAuth": []
                }
              ]
            }
          },
          "/interactions/interactionConnected": {
            "put": {
              "tags": [
                "Interactions",
                "ACD to Afiniti"
              ],
              "summary": "Interaction is connected to an agent",
              "description": "When an interaction is connected to an agent at some station, this method is used to send a message from ACD to Afiniti.\n",
              "operationId": "interactionConnected",
              "requestBody": {
                "$ref": "#/components/requestBodies/bodyInteractionConnected"
              },
              "responses": {
                "200": {
                  "description": "**OK**",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/bodyrefCountResponse"
                      }
                    }
                  }
                },
                "400": {
                  "description": "**Bad Request**",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/bodyrefCountResponse"
                      }
                    }
                  }
                },
                "401": {
                  "description": "**Unauthorized**",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/bodyrefCountResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "bearerAuth": []
                }
              ]
            }
          },
          "/interactions/interactionAbandoned": {
            "put": {
              "tags": [
                "Interactions",
                "ACD to Afiniti"
              ],
              "summary": "Interaction is abandoned before connected to an agent/station",
              "description": "When an interaction gets abandoned before connected to an agent/station, this method is used to send a message from ACD to Afiniti.\n",
              "operationId": "interactionAbandoned",
              "requestBody": {
                "$ref": "#/components/requestBodies/bodyInteractionAbandoned"
              },
              "responses": {
                "200": {
                  "description": "**OK**",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/bodyrefCountResponse"
                      }
                    }
                  }
                },
                "400": {
                  "description": "**Bad Request**",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/bodyrefCountResponse"
                      }
                    }
                  }
                },
                "401": {
                  "description": "**Unauthorized**",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/bodyrefCountResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "bearerAuth": []
                }
              ]
            }
          },
          "/interactions/interactionInactive": {
            "put": {
              "tags": [
                "Interactions",
                "ACD to Afiniti"
              ],
              "summary": "Interaction is inactive",
              "description": "This message is generated when Interaction gets inactive. It will only be generated if no message received from consumer side within specific amount of time (configured on ACD side).\n",
              "operationId": "interactionInactive",
              "requestBody": {
                "$ref": "#/components/requestBodies/bodyInteractionInactive"
              },
              "responses": {
                "200": {
                  "description": "**OK**",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/bodyrefCountResponse"
                      }
                    }
                  }
                },
                "400": {
                  "description": "**Bad Request**",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/bodyrefCountResponse"
                      }
                    }
                  }
                },
                "401": {
                  "description": "**Unauthorized**",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/bodyrefCountResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "bearerAuth": []
                }
              ]
            }
          },
          "/interactions/interactionTransferred": {
            "put": {
              "tags": [
                "Interactions",
                "ACD to Afiniti"
              ],
              "summary": "Interaction is transferred to another agent/station",
              "description": "When an interaction gets transferred to another destination (agent/station), this method is used to send a message from ACD to Afiniti.\n",
              "operationId": "interactionTransferred",
              "requestBody": {
                "$ref": "#/components/requestBodies/bodyInteractionTransferred"
              },
              "responses": {
                "200": {
                  "description": "**OK**",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/bodyrefCountResponse"
                      }
                    }
                  }
                },
                "400": {
                  "description": "**Bad Request**",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/bodyrefCountResponse"
                      }
                    }
                  }
                },
                "401": {
                  "description": "**Unauthorized**",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/bodyrefCountResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "bearerAuth": []
                }
              ]
            }
          },
          "/interactions/interactionDisconnected": {
            "put": {
              "tags": [
                "Interactions",
                "ACD to Afiniti"
              ],
              "summary": "Interaction is connected to answer by an agent",
              "description": "When an interaction is disposed, this method is used to send a message from ACD to Afiniti. It is only generated if the interaction was connected to an agent.\n",
              "operationId": "interactionDisconnected",
              "requestBody": {
                "$ref": "#/components/requestBodies/bodyInteractionDisconnected"
              },
              "responses": {
                "200": {
                  "description": "**OK**",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/bodyrefCountResponse"
                      }
                    }
                  }
                },
                "400": {
                  "description": "**Bad Request**",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/bodyrefCountResponse"
                      }
                    }
                  }
                },
                "401": {
                  "description": "**Unauthorized**",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/bodyrefCountResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "bearerAuth": []
                }
              ]
            }
          },
          "/interactions/interactionTimerExtension": {
            "put": {
              "tags": [
                "Interactions",
                "Afiniti to ACD"
              ],
              "summary": "Afiniti Link requests entend the timeout of an interaction",
              "description": "Afiniti Link uses this method to generates a message to extend the timeout of an interaction. It provides the ability to Afiniti to inform ACD that it needs more time to provide a RouteSelect response. This will cause ACD to reset its timer waiting for a response from Afiniti. ",
              "operationId": "interactionTimerExtension",
              "requestBody": {
                "$ref": "#/components/requestBodies/bodyInteractionTimerExtension"
              },
              "responses": {
                "200": {
                  "description": "**OK**",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/bodyrefCountResponse"
                      }
                    }
                  }
                },
                "400": {
                  "description": "**Bad Request**",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/bodyrefCountResponse"
                      }
                    }
                  }
                },
                "401": {
                  "description": "**Unauthorized**",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/bodyrefCountResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "bearerAuth": []
                }
              ]
            }
          },
          "/agents/agentLogin": {
            "post": {
              "tags": [
                "Agents",
                "ACD to Afiniti"
              ],
              "summary": "An agent is logged in",
              "description": "When an agent logs in to a campaign/queue/skill, this method is used to send a message from ACD to Afiniti.\n",
              "operationId": "agentLogin",
              "requestBody": {
                "$ref": "#/components/requestBodies/bodyAgentLogin"
              },
              "responses": {
                "200": {
                  "description": "**OK**",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/bodyrefCountResponse"
                      }
                    }
                  }
                },
                "400": {
                  "description": "**Bad Request**",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/bodyrefCountResponse"
                      }
                    }
                  }
                },
                "401": {
                  "description": "**Unauthorized**",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/bodyrefCountResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "bearerAuth": []
                }
              ]
            }
          },
          "/agents/agentStatusChange": {
            "put": {
              "tags": [
                "Agents",
                "ACD to Afiniti"
              ],
              "summary": "Agent's status is changed",
              "description": "Whenever an agent's status is changed, this method is used to send a message from ACD to Afiniti.\n",
              "operationId": "agentStatusChange",
              "requestBody": {
                "$ref": "#/components/requestBodies/bodyAgentStatusChange"
              },
              "responses": {
                "200": {
                  "description": "**OK**",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/bodyrefCountResponse"
                      }
                    }
                  }
                },
                "400": {
                  "description": "**Bad Request**",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/bodyrefCountResponse"
                      }
                    }
                  }
                },
                "401": {
                  "description": "**Unauthorized**",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/bodyrefCountResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "bearerAuth": []
                }
              ]
            }
          },
          "/agents/agentSkillChange": {
            "put": {
              "tags": [
                "Agents",
                "ACD to Afiniti"
              ],
              "summary": "Agent's skill is changed",
              "description": "When a new campaign/queue/skill is assigned to a logged in agent or an existing assignment is removed, this method is used to send a message from ACD to Afiniti.\n",
              "operationId": "agentSkillChange",
              "requestBody": {
                "$ref": "#/components/requestBodies/bodyAgentSkillChange"
              },
              "responses": {
                "200": {
                  "description": "**OK**",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/bodyrefCountResponse"
                      }
                    }
                  }
                },
                "400": {
                  "description": "**Bad Request**",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/bodyrefCountResponse"
                      }
                    }
                  }
                },
                "401": {
                  "description": "**Unauthorized**",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/bodyrefCountResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "bearerAuth": []
                }
              ]
            }
          },
          "/agents/agentCapacityChange": {
            "put": {
              "tags": [
                "Agents",
                "ACD to Afiniti"
              ],
              "summary": "Agent's capaciti is changed",
              "description": "This message is generated when an agent capacity changes on a queue/Skill. The ACD should send this agent capacity message to Afiniti.\n",
              "operationId": "agentCapacityChange",
              "requestBody": {
                "$ref": "#/components/requestBodies/bodyAgentCapacityChange"
              },
              "responses": {
                "200": {
                  "description": "**OK**",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/bodyrefCountResponse"
                      }
                    }
                  }
                },
                "400": {
                  "description": "**Bad Request**",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/bodyrefCountResponse"
                      }
                    }
                  }
                },
                "401": {
                  "description": "**Unauthorized**",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/bodyrefCountResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "bearerAuth": []
                }
              ]
            }
          },
          "/agents/agentChannelChange": {
            "put": {
              "tags": [
                "Agents",
                "ACD to Afiniti"
              ],
              "summary": "Agent's channel is changed",
              "description": "The ACD will generate this message when a new Channel is assigned to a logged in agent or an existing assignment is removed.\n",
              "operationId": "agentChannelChange",
              "requestBody": {
                "$ref": "#/components/requestBodies/bodyAgentChannelChange"
              },
              "responses": {
                "200": {
                  "description": "**OK**",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/bodyrefCountResponse"
                      }
                    }
                  }
                },
                "400": {
                  "description": "**Bad Request**",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/bodyrefCountResponse"
                      }
                    }
                  }
                },
                "401": {
                  "description": "**Unauthorized**",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/bodyrefCountResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "bearerAuth": []
                }
              ]
            }
          },
          "/agents/agentLogout": {
            "put": {
              "tags": [
                "Agents",
                "ACD to Afiniti"
              ],
              "summary": "An agent is logged out",
              "description": "When an agent logs out from a campaign/queue, this method is used to send a message from ACD to Afiniti.\n",
              "operationId": "agentLogout",
              "requestBody": {
                "$ref": "#/components/requestBodies/bodyAgentLogout"
              },
              "responses": {
                "200": {
                  "description": "**OK**",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/bodyrefCountResponse"
                      }
                    }
                  }
                },
                "400": {
                  "description": "**Bad Request**",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/bodyrefCountResponse"
                      }
                    }
                  }
                },
                "401": {
                  "description": "**Unauthorized**",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/bodyrefCountResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "bearerAuth": []
                }
              ]
            }
          },
          "/agents/queryLoggedInAgents": {
            "get": {
              "tags": [
                "Agents",
                "Afiniti to ACD"
              ],
              "summary": "Afiniti Link will query the list of logged in agents",
              "description": "Afiniti Link uses this method to get all logged in agents on a campaign/queue/skill. Typically, it is sent during initialization. Afiniti will sent this message per campaign per channel.",
              "operationId": "queryLoggedInAgents",
              "parameters": [
                {
                  "name": "refCount",
                  "in": "query",
                  "description": "Refernce Count",
                  "required": true,
                  "style": "form",
                  "explode": true,
                  "schema": {
                    "$ref": "#/components/schemas/refCount"
                  }
                },
                {
                  "name": "refId",
                  "in": "query",
                  "description": "A reference identifier associated with the request",
                  "required": true,
                  "style": "form",
                  "explode": true,
                  "schema": {
                    "$ref": "#/components/schemas/refId"
                  }
                },
                {
                  "name": "skill",
                  "in": "query",
                  "description": "Campaign/Queue/Skill name or identifier",
                  "required": true,
                  "style": "form",
                  "explode": true,
                  "schema": {
                    "$ref": "#/components/schemas/skill"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "**OK**",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/bodyLoggedinAgentsResponse"
                      }
                    }
                  }
                },
                "400": {
                  "description": "**Bad Request**",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/bodyrefCountResponse"
                      }
                    }
                  }
                },
                "401": {
                  "description": "**Unauthorized**",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/bodyrefCountResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "bearerAuth": []
                }
              ]
            }
          },
          "/agents/agentsStatusRequest": {
            "get": {
              "tags": [
                "Agents",
                "Afiniti to ACD"
              ],
              "summary": "Afiniti Link will get the status of agent on a campaign",
              "description": "Afiniti Link uses this method to generates a message to get the status of an agent on a campaign/queue/skill. Typically, it is sent during initialization.",
              "operationId": "agentsStatusRequest",
              "parameters": [
                {
                  "name": "refCount",
                  "in": "query",
                  "description": "Refernce Count",
                  "required": true,
                  "style": "form",
                  "explode": true,
                  "schema": {
                    "$ref": "#/components/schemas/refCount"
                  }
                },
                {
                  "name": "refId",
                  "in": "query",
                  "description": "A reference identifier associated with the request",
                  "required": true,
                  "style": "form",
                  "explode": true,
                  "schema": {
                    "$ref": "#/components/schemas/refId"
                  }
                },
                {
                  "name": "skill",
                  "in": "query",
                  "description": "Campaign/Queue/Skill name or identifier",
                  "required": true,
                  "style": "form",
                  "explode": true,
                  "schema": {
                    "$ref": "#/components/schemas/skill"
                  }
                },
                {
                  "name": "agents",
                  "in": "query",
                  "description": "List of agents ids",
                  "required": true,
                  "style": "form",
                  "explode": true,
                  "schema": {
                    "$ref": "#/components/schemas/agentsList"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "**OK** - Statuses of agents",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/bodyAgentsStatusResponse"
                      }
                    }
                  }
                },
                "400": {
                  "description": "**Bad Request**",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/bodyrefCountResponse"
                      }
                    }
                  }
                },
                "401": {
                  "description": "**Unauthorized**",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/bodyrefCountResponse"
                      }
                    }
                  }
                }
              },
              "security": [
                {
                  "bearerAuth": []
                }
              ]
            }
          }
        },
        "components": {
          "schemas": {
            "agentId": {
              "type": "string",
              "description": "A unique identifier assigned to an agent",
              "example": "42323"
            },
            "agentsList": {
              "type": "array",
              "description": "List of agent ids",
              "items": {
                "$ref": "#/components/schemas/agentId"
              },
              "example": [
                "12345",
                "42198",
                "52087"
              ]
            },
            "interactionId": {
              "type": "string",
              "description": "A unique identifier assigned to an interaction by the ACD",
              "example": "10016543212002"
            },
            "skill": {
              "type": "string",
              "description": "Campaign/Queue/Skill name or identifier",
              "example": "English"
            },
            "btn": {
              "type": "string",
              "description": "Customer's Business Telephone Number",
              "example": "1202289898"
            },
            "dialedNumber": {
              "type": "string",
              "description": "Dialed number",
              "example": "175497569"
            },
            "agentStationId": {
              "type": "string",
              "description": "The id of the station which the agent is using",
              "example": "125498"
            },
            "destination": {
              "type": "string",
              "description": "Destination number to which the interaction is transferred. It can be any station id, agent id, DNIS or external number",
              "example": "21223"
            },
            "disposition": {
              "type": "string",
              "description": "Interaction outcome Code marked by the agent for the interaction. The list of disposition codes should be provided by the contact center operator",
              "example": "SALE"
            },
            "url": {
              "type": "string",
              "description": "URL",
              "format": "uri"
            },
            "benchmarkFlag": {
              "type": "string",
              "description": "Afiniti benchmark ON/OFF flag",
              "example": "OFF",
              "enum": [
                "ON",
                "OFF"
              ]
            },
            "refCount": {
              "type": "integer",
              "description": "Unique reference count being incremented",
              "example": 1275
            },
            "benchmarkType": {
              "type": "string",
              "description": "This field will include the further type of the benchmark off flag/type that will be sent from Afiniti. Following table lists all the possible values that can be expected from this field.\n| Code | Description |\n|-----|-----|\n| **Global_OFF**   | Full Off |\n| **MM** | Monitor Mode |\n| **PRGM_LVL_OFF** | Program level Off benchmark |\n| **OFF_CYCLE** | Off |\n",
              "example": "MM",
              "enum": [
                "Global_OFF",
                "MM",
                "PRGM_LVL_OFF",
                "OFF_CYCLE"
              ]
            },
            "hbInterval": {
              "type": "integer",
              "description": "Heartbeat interval in seconds.",
              "format": "int64",
              "example": 10
            },
            "agentStatus": {
              "type": "string",
              "description": "Status of the agent to be set/changed\n| Status Code | Description |\n|-----|-----|\n| **READY**   | Agent is ready on specified campaign/queue/skill |\n| **BUSY_ON_CALL** | Agent is busy on specified campaign/queue/skill for an interaction|\n| **ON_BREAK** | Agent is on break |\n| **ACW** | Agent is on after call works |\n| **LOGGED_OUT** | Agent is logged out |\n",
              "example": "READY",
              "enum": [
                "READY",
                "BUSY_ON_CALL",
                "ON_BREAK",
                "ACW",
                "LOGGED_OUT"
              ]
            },
            "agentPriority": {
              "type": "integer",
              "description": "Priority assigned to an agent. Lower number is considered higher priority.",
              "format": "int32",
              "example": 1
            },
            "skillPriority": {
              "type": "integer",
              "description": "Afiniti will consider all agents within the campaign/queue with the specified skill having skill Priority greater than or equal to the specified skill priority. Smaller number is considered lower skill priority.",
              "format": "int64",
              "example": 1
            },
            "skillEWT": {
              "type": "integer",
              "description": "Wait time associated with the skill in milliseconds.",
              "format": "int64"
            },
            "afinitiCtrlMode": {
              "type": "string",
              "description": "Afiniti Control Modes.\n  | Code | Description |\n|-----|-----|\n| **FULL_CONTROL**| Afiniti never gives back control of interaction routing of any interaction that is offered to Afiniti via Route Request |\n| **SHARED_CONTROL**| Afiniti may give back control to ACD of Afiniti OFF interactions that are offered to Afiniti via Route Request |\n| **MONITOR_MODE**| In MONITOR_MODE Afiniti rejects all RouteRequest commands by sending AFINITI_RESERVE in RouteEnd command |\n",
              "example": "FULL_CONTROL",
              "enum": [
                "FULL_CONTROL",
                "SHARED_CONTROL",
                "MONITOR_MODE"
              ]
            },
            "scenario": {
              "type": "string",
              "description": "| Code | Description |\n|-----|-----|\n| **AGENT_SURPLUS**| Agents are available to handle the interaction |\n| **INTERACTION_SURPLUS**| No  agent available to handle the interaction |\n",
              "example": "AGENT_SURPLUS",
              "enum": [
                "AGENT_SURPLUS",
                "INTERACTION_SURPLUS"
              ]
            },
            "timeValue": {
              "type": "integer",
              "description": "Time in milliseconds",
              "format": "int64",
              "example": 1500
            },
            "refId": {
              "description": "A unique reference identifier associated with the request",
              "example": 648,
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "channelCapacity": {
              "type": "integer",
              "description": "Agents total capacity on respective channel",
              "format": "int32",
              "example": 3
            },
            "channelName": {
              "type": "string",
              "description": "Channels e.g MESSAGING, CHAT",
              "example": "VOICE"
            },
            "responseCode": {
              "type": "string",
              "description": "| Code | Description |\n|-----|-----|\n| **SUCCESS**   | Route Success, interaction successfully patched to the Afiniti recommended agent |\n| **NO_AGENT** | Route Failure, Afiniti recommended agent is not in ready state |\n| **NO_INTERACTION** | The interaction is not in routable state or has terminated |\n| **NO_INTERACTION_NO_AGENT** | Route Failure, Afiniti recommended agent is not in ready state, also the interaction is not routable |\n| **INTERACTION_NOT_ROUTABLE** | Due to any reason, the interaction is no more routable |\n| **FAILURE** | Route Failure, general failure |\n| **SERVICE_NOT_AVAILABLE** | For the cases when Afiniti ends the routing window |\n| **NO_AGENT_AVAILABLE** | For the cases when Afiniti does not have any available agent and hence ends the routing window |\n| **PERFORMANCE_LIMIT_EXCEEDED** | Afiniti will have the option to respond to RouteRequest with an agent interaction pair with in a configurable threshold. In case of threshold expiry ACD with send PERFORMANCE_LIMIT_EXCEEDED in RouteEnd message and interaction will be default routed by ACD. |\n| **AFINITI_RESERVE** | This indicates that Afiniti is in monitor mode. |\n",
              "example": "SUCCESS"
            },
            "skillsLevel": {
              "type": "object",
              "properties": {
                "skill_name": {
                  "$ref": "#/components/schemas/skill"
                },
                "skill_priority": {
                  "$ref": "#/components/schemas/skillPriority"
                }
              },
              "description": "Map of skill and skill level pairs. Afiniti will consider all agents within the campaign/queue with the specified skill having skill level greater than or equal to the specified skill level. Smaller number is considered lower skill level."
            },
            "skillsList": {
              "uniqueItems": true,
              "type": "array",
              "description": "List of Skill names or ids",
              "example": [
                "URDU",
                "English",
                "Compoter"
              ],
              "items": {
                "$ref": "#/components/schemas/skill"
              }
            },
            "channelCapacityPair": {
              "type": "object",
              "properties": {
                "channelName": {
                  "$ref": "#/components/schemas/channelName"
                },
                "channelCapacity": {
                  "$ref": "#/components/schemas/channelCapacity"
                }
              },
              "description": "Agent's channel and corresponding capacity"
            },
            "channelCapacityList": {
              "type": "array",
              "description": "List of channels and their capacities",
              "example": [
                {
                  "channelName": "VOICE",
                  "channelCapacity": 1
                },
                {
                  "channelName": "EMAIL",
                  "channelCapacity": 2
                },
                {
                  "channelName": "MESSAGING",
                  "channelCapacity": 2
                }
              ],
              "items": {
                "$ref": "#/components/schemas/channelCapacityPair"
              }
            },
            "skillsUpdated": {
              "type": "object",
              "properties": {
                "action": {
                  "type": "string",
                  "description": "Flag describition the action on the skill",
                  "enum": [
                    "ADD",
                    "REMOVE",
                    "UPDATE_PRIORITY"
                  ]
                },
                "skill": {
                  "$ref": "#/components/schemas/skill"
                },
                "skillPriority": {
                  "$ref": "#/components/schemas/skillPriority"
                }
              },
              "description": "Update the skills list of an agent. A skills can be added, removed or change the skill level (priority)."
            },
            "channelUpdated": {
              "type": "object",
              "properties": {
                "action": {
                  "type": "string",
                  "description": "Flag describing the action",
                  "enum": [
                    "ADD",
                    "REMOVE",
                    "UPDATE_CAPACITY"
                  ]
                },
                "channelName": {
                  "$ref": "#/components/schemas/channelName"
                },
                "channelCapacity": {
                  "$ref": "#/components/schemas/channelCapacity"
                }
              },
              "description": "Update the channel list of an agent. A channel can be added, removed or change the capacity."
            },
            "skillsUpdatedList": {
              "type": "array",
              "description": "List of the skills of an agent to be updated. Each element can containg `action` describing the action on the skill like `ADD`, `REMOVE` or `UPDATE_PRIORITY` to add, remove or update the prority/level of the skill respectively.",
              "example": [
                {
                  "action": "ADD",
                  "skill": "English",
                  "skillPriority": 1
                },
                {
                  "action": "REMOVE",
                  "skill": "Urdu",
                  "skillPriority": 2
                },
                {
                  "action": "UPDATE_PRIORITY",
                  "skill": "Compoter",
                  "skillPriority": 4
                }
              ],
              "items": {
                "$ref": "#/components/schemas/skillsUpdated"
              }
            },
            "channelUpdatedList": {
              "type": "array",
              "description": "List of the channels of an agent to be updated. Each element can containg `action` describing the action on the channel like `ADD`, `REMOVE` or `UPDATE_CAPACITY` to add, remove or update the capacity of the channel respectively.",
              "example": [
                {
                  "action": "ADD",
                  "channelName": "VOICE",
                  "channelCapacity": 3
                },
                {
                  "action": "REMOVE",
                  "channelName": "EMAIL",
                  "channelCapacity": 2
                },
                {
                  "action": "UPDATE_CAPACITY",
                  "channelName": "MESSAGING",
                  "channelCapacity": 2
                }
              ],
              "items": {
                "$ref": "#/components/schemas/channelUpdated"
              }
            },
            "skillPriorityList": {
              "type": "array",
              "description": "List of skills and corresponding level/priority.",
              "example": [
                {
                  "skill_name": "English",
                  "skill_priority": 1
                },
                {
                  "skill_name": "Compoter",
                  "skill_priority": 6
                },
                {
                  "skill_name": "French",
                  "skill_priority": 3
                }
              ],
              "items": {
                "$ref": "#/components/schemas/skillsLevel"
              }
            },
            "capacityChangeList": {
              "type": "array",
              "description": "List of capacities change on channles",
              "example": [
                {
                  "channel": "MESSAGING",
                  "capacity": 5,
                  "remaingingCapacity": 4
                },
                {
                  "channel": "CHAT",
                  "capacity": 4,
                  "remaingingCapacity": 3
                }
              ],
              "items": {
                "$ref": "#/components/schemas/capacityChangeList_inner"
              }
            },
            "assignedInteractionsList": {
              "type": "array",
              "description": "List of inteactions assigned to the agent",
              "example": [
                {
                  "interactionId": "799404228",
                  "skill": "English",
                  "Channel": "Messaging",
                  "interactionload": 1,
                  "interactionState": "ACTIVE"
                },
                {
                  "interactionId": "799404224",
                  "skill": "French",
                  "Channel": "Messaging",
                  "interactionload": 1,
                  "interactionState": "ACTIVE"
                }
              ],
              "items": {
                "$ref": "#/components/schemas/assignedInteractionsList_inner"
              }
            },
            "keyValuePair": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "example": {
                "key": "value"
              }
            },
            "attachedData": {
              "type": "array",
              "description": "List of key-value pairs",
              "example": [
                {
                  "key1": "value1"
                },
                {
                  "key2": "value2"
                },
                {
                  "key3": "value3"
                }
              ],
              "items": {
                "$ref": "#/components/schemas/keyValuePair"
              }
            },
            "contentInteractionInitiated": {
              "required": [
                "btn",
                "interactionId",
                "refCount",
                "skill"
              ],
              "type": "object",
              "properties": {
                "refCount": {
                  "$ref": "#/components/schemas/refCount"
                },
                "interactionId": {
                  "$ref": "#/components/schemas/interactionId"
                },
                "btn": {
                  "$ref": "#/components/schemas/btn"
                },
                "campaign": {
                  "$ref": "#/components/schemas/skill"
                },
                "attachedData": {
                  "$ref": "#/components/schemas/attachedData"
                }
              }
            },
            "contentInteractionRinging": {
              "required": [
                "agentId",
                "agentStationId",
                "interactionId",
                "refCount"
              ],
              "type": "object",
              "properties": {
                "refCount": {
                  "$ref": "#/components/schemas/refCount"
                },
                "interactionId": {
                  "$ref": "#/components/schemas/interactionId"
                },
                "agentId": {
                  "$ref": "#/components/schemas/agentId"
                },
                "agentStationId": {
                  "$ref": "#/components/schemas/agentStationId"
                }
              }
            },
            "contentInteractionConnected": {
              "required": [
                "agentId",
                "channel",
                "interactionId",
                "refCount",
                "skill"
              ],
              "type": "object",
              "properties": {
                "refCount": {
                  "$ref": "#/components/schemas/refCount"
                },
                "interactionId": {
                  "$ref": "#/components/schemas/interactionId"
                },
                "agentId": {
                  "$ref": "#/components/schemas/agentId"
                },
                "skill": {
                  "$ref": "#/components/schemas/skill"
                },
                "channel": {
                  "$ref": "#/components/schemas/channelName"
                }
              }
            },
            "contentInteractionAbandoned": {
              "required": [
                "interactionId",
                "refCount"
              ],
              "type": "object",
              "properties": {
                "refCount": {
                  "$ref": "#/components/schemas/refCount"
                },
                "interactionId": {
                  "$ref": "#/components/schemas/interactionId"
                }
              }
            },
            "contentInteractionInactive": {
              "required": [
                "agentId",
                "interactionId",
                "refCount"
              ],
              "type": "object",
              "properties": {
                "refCount": {
                  "$ref": "#/components/schemas/refCount"
                },
                "interactionId": {
                  "$ref": "#/components/schemas/interactionId"
                },
                "agentId": {
                  "$ref": "#/components/schemas/agentId"
                }
              }
            },
            "contentInteractionTransferred": {
              "required": [
                "destination",
                "interactionId",
                "refCount"
              ],
              "type": "object",
              "properties": {
                "refCount": {
                  "$ref": "#/components/schemas/refCount"
                },
                "interactionId": {
                  "$ref": "#/components/schemas/interactionId"
                },
                "destination": {
                  "$ref": "#/components/schemas/destination"
                }
              }
            },
            "contentInteractionDisconnected": {
              "required": [
                "agentId",
                "disposition",
                "interactionId",
                "refCount"
              ],
              "type": "object",
              "properties": {
                "refCount": {
                  "$ref": "#/components/schemas/refCount"
                },
                "interactionId": {
                  "$ref": "#/components/schemas/interactionId"
                },
                "agentId": {
                  "$ref": "#/components/schemas/agentId"
                },
                "disposition": {
                  "$ref": "#/components/schemas/disposition"
                }
              }
            },
            "contentInteractionTimerExtension": {
              "required": [
                "interactionId",
                "refCount",
                "timeValue"
              ],
              "type": "object",
              "properties": {
                "refCount": {
                  "$ref": "#/components/schemas/refCount"
                },
                "interactionId": {
                  "$ref": "#/components/schemas/interactionId"
                },
                "timeValue": {
                  "$ref": "#/components/schemas/timeValue"
                }
              }
            },
            "contentAgentLogin": {
              "required": [
                "agentId",
                "channelsCapacityList",
                "refCount",
                "skillsPriorityList"
              ],
              "type": "object",
              "properties": {
                "refCount": {
                  "$ref": "#/components/schemas/refCount"
                },
                "agentId": {
                  "$ref": "#/components/schemas/agentId"
                },
                "skillsPriorityList": {
                  "$ref": "#/components/schemas/skillPriorityList"
                },
                "channelsCapacityList": {
                  "$ref": "#/components/schemas/channelCapacityList"
                },
                "attributes": {
                  "$ref": "#/components/schemas/attachedData"
                }
              }
            },
            "contentAgentLogout": {
              "required": [
                "agent",
                "refCount",
                "skills"
              ],
              "type": "object",
              "properties": {
                "refCount": {
                  "$ref": "#/components/schemas/refCount"
                },
                "agent": {
                  "$ref": "#/components/schemas/agentId"
                },
                "skills": {
                  "$ref": "#/components/schemas/skillsList"
                }
              }
            },
            "contentAgentStatusChange": {
              "required": [
                "agentId",
                "agentPresence",
                "busySlot",
                "configureMaxSlots",
                "currentConnectionState",
                "currentStatusReason",
                "intenseConversations",
                "load",
                "openAssignedConversations",
                "refCount",
                "ringingSlots",
                "status"
              ],
              "type": "object",
              "properties": {
                "refCount": {
                  "$ref": "#/components/schemas/refCount"
                },
                "agentId": {
                  "$ref": "#/components/schemas/agentId"
                },
                "skill": {
                  "$ref": "#/components/schemas/skill"
                },
                "interactionId": {
                  "$ref": "#/components/schemas/interactionId"
                },
                "channel": {
                  "$ref": "#/components/schemas/channelName"
                },
                "status": {
                  "$ref": "#/components/schemas/agentStatus"
                },
                "currentStatusReason": {
                  "type": "string",
                  "description": "The id of the reason for the agents 'AWAY' status"
                },
                "ringingSlots": {
                  "type": "integer",
                  "description": "Number of Ringing Slots",
                  "example": 0
                },
                "configureMaxSlots": {
                  "type": "integer",
                  "description": "The Agents configured Maximum number of Slots",
                  "format": "int32",
                  "example": 20
                },
                "busySlot": {
                  "type": "integer",
                  "description": "The Agent's number of busy Slots",
                  "format": "int32",
                  "example": 0
                },
                "openAssignedConversations": {
                  "type": "integer",
                  "description": "The Agent's number of open assigned conversations",
                  "format": "int32",
                  "example": 0
                },
                "intenseConversations": {
                  "type": "integer",
                  "description": "The Agents number of intense conversations",
                  "format": "int32",
                  "example": 0
                },
                "currentConnectionState": {
                  "type": "string",
                  "description": "The Agents state(Connected or Disconnected)",
                  "example": "CONNECTED",
                  "enum": [
                    "CONNECTED",
                    "DISCONNECTED"
                  ]
                },
                "agentPresence": {
                  "type": "string",
                  "description": "Indicator whether the agent is in presence mode (TRUE or FALSE)",
                  "example": "TRUE",
                  "enum": [
                    "TRUE",
                    "FALSE"
                  ]
                },
                "load": {
                  "type": "integer",
                  "description": "Indication for the agents efficiency (i.e the amount of work the agent needs to handle, relative to the maximum capacity)",
                  "format": "int32",
                  "example": 0
                }
              }
            },
            "contentAgentSkillChange": {
              "required": [
                "agentId",
                "refCount",
                "skillsUpdatedList"
              ],
              "type": "object",
              "properties": {
                "refCount": {
                  "$ref": "#/components/schemas/refCount"
                },
                "agentId": {
                  "$ref": "#/components/schemas/agentId"
                },
                "skillsUpdatedList": {
                  "$ref": "#/components/schemas/skillsUpdatedList"
                }
              }
            },
            "contentAgentCapacityChange": {
              "required": [
                "agentId",
                "assignedInteractionsList",
                "capacityChangeList",
                "refCount"
              ],
              "type": "object",
              "properties": {
                "refCount": {
                  "$ref": "#/components/schemas/refCount"
                },
                "agentId": {
                  "$ref": "#/components/schemas/agentId"
                },
                "capacityChangeList": {
                  "$ref": "#/components/schemas/capacityChangeList"
                },
                "assignedInteractionsList": {
                  "$ref": "#/components/schemas/assignedInteractionsList"
                }
              }
            },
            "contentAgentChannelChange": {
              "required": [
                "agentId",
                "channelChangeList",
                "refCount"
              ],
              "type": "object",
              "properties": {
                "refCount": {
                  "$ref": "#/components/schemas/refCount"
                },
                "agentId": {
                  "$ref": "#/components/schemas/agentId"
                },
                "channelChangeList": {
                  "$ref": "#/components/schemas/channelUpdatedList"
                }
              }
            },
            "contentHeartbeat": {
              "required": [
                "refCount"
              ],
              "type": "object",
              "properties": {
                "refCount": {
                  "$ref": "#/components/schemas/refCount"
                }
              }
            },
            "contentCtrlMode": {
              "required": [
                "controlMode",
                "refCount"
              ],
              "type": "object",
              "properties": {
                "refCount": {
                  "$ref": "#/components/schemas/refCount"
                },
                "controlMode": {
                  "$ref": "#/components/schemas/afinitiCtrlMode"
                }
              }
            },
            "tokenGrantType": {
              "type": "string",
              "description": "Either grant new token `tokenGrantType = credentials` or refresh existing token `tokenGrantType = refreshToken`",
              "example": "credentials",
              "enum": [
                "refreshToken",
                "credentials"
              ]
            },
            "refreshToken": {
              "type": "string",
              "description": "The refresh token provided in case of `grantType = refreshToken`",
              "example": "eyJhbGciOiJIUzI1NiJ9"
            },
            "username": {
              "type": "string",
              "description": "User name in case of `grantType=credentials`"
            },
            "password": {
              "type": "string",
              "description": "Password in case of `grantType=credentials`"
            },
            "contentInit": {
              "required": [
                "ACDBaseURL",
                "refCount"
              ],
              "type": "object",
              "properties": {
                "refCount": {
                  "$ref": "#/components/schemas/refCount"
                },
                "ACDBaseURL": {
                  "$ref": "#/components/schemas/url"
                },
                "hbInterval": {
                  "$ref": "#/components/schemas/hbInterval"
                }
              }
            },
            "contentActivationDeactivation": {
              "required": [
                "refCount",
                "skill"
              ],
              "type": "object",
              "properties": {
                "refCount": {
                  "$ref": "#/components/schemas/refCount"
                },
                "skill": {
                  "$ref": "#/components/schemas/skill"
                }
              }
            },
            "contentRequestToken": {
              "required": [
                "grantType",
                "refCount"
              ],
              "type": "object",
              "properties": {
                "refCount": {
                  "$ref": "#/components/schemas/refCount"
                },
                "grantType": {
                  "$ref": "#/components/schemas/tokenGrantType"
                },
                "refreshToken": {
                  "$ref": "#/components/schemas/refreshToken"
                },
                "username": {
                  "$ref": "#/components/schemas/username"
                },
                "password": {
                  "$ref": "#/components/schemas/password"
                }
              }
            },
            "contentRouteRequest": {
              "required": [
                "afinitiCtrlMode",
                "btn",
                "channel",
                "dialedNumber",
                "interactionArrivalTime",
                "interactionId",
                "refCount",
                "scenario",
                "skill",
                "skillEWT",
                "skillPriority"
              ],
              "type": "object",
              "properties": {
                "refCount": {
                  "$ref": "#/components/schemas/refCount"
                },
                "interactionId": {
                  "$ref": "#/components/schemas/interactionId"
                },
                "btn": {
                  "$ref": "#/components/schemas/btn"
                },
                "dialedNumber": {
                  "$ref": "#/components/schemas/dialedNumber"
                },
                "skill": {
                  "$ref": "#/components/schemas/skill"
                },
                "skillPriority": {
                  "$ref": "#/components/schemas/skillPriority"
                },
                "skillEWT": {
                  "$ref": "#/components/schemas/skillEWT"
                },
                "channel": {
                  "$ref": "#/components/schemas/channelName"
                },
                "scenario": {
                  "$ref": "#/components/schemas/scenario"
                },
                "inTrunkId": {
                  "type": "string",
                  "description": "interaction trunk ID"
                },
                "refId": {
                  "$ref": "#/components/schemas/refId"
                },
                "interactionArrivalTime": {
                  "$ref": "#/components/schemas/refCount"
                },
                "attachedData": {
                  "$ref": "#/components/schemas/attachedData"
                }
              }
            },
            "contentRouteEnd": {
              "required": [
                "interactionId",
                "refCount",
                "responseCode"
              ],
              "type": "object",
              "properties": {
                "refCount": {
                  "$ref": "#/components/schemas/refCount"
                },
                "interactionId": {
                  "$ref": "#/components/schemas/interactionId"
                },
                "responseCode": {
                  "$ref": "#/components/schemas/responseCode"
                },
                "agentId": {
                  "$ref": "#/components/schemas/agentId"
                }
              }
            },
            "contentRouteSelect": {
              "required": [
                "agentId",
                "benchmarkFlag",
                "benchmarkType",
                "interactionId",
                "refCount",
                "skill"
              ],
              "type": "object",
              "properties": {
                "refCount": {
                  "$ref": "#/components/schemas/refCount"
                },
                "agentId": {
                  "$ref": "#/components/schemas/agentId"
                },
                "interactionId": {
                  "$ref": "#/components/schemas/interactionId"
                },
                "skill": {
                  "$ref": "#/components/schemas/skill"
                },
                "benchmarkFlag": {
                  "$ref": "#/components/schemas/benchmarkFlag"
                },
                "benchmarkType": {
                  "$ref": "#/components/schemas/benchmarkType"
                }
              }
            },
            "bodyrefCountResponse": {
              "required": [
                "refCount"
              ],
              "type": "object",
              "properties": {
                "refCount": {
                  "$ref": "#/components/schemas/refCount"
                }
              }
            },
            "bodyInitResponse": {
              "required": [
                "controlMode",
                "refCount"
              ],
              "type": "object",
              "properties": {
                "refCount": {
                  "$ref": "#/components/schemas/refCount"
                },
                "controlMode": {
                  "$ref": "#/components/schemas/afinitiCtrlMode"
                }
              }
            },
            "bodyAgentsStatusResponse": {
              "required": [
                "agents",
                "refCount",
                "refId",
                "skill"
              ],
              "type": "object",
              "properties": {
                "refCount": {
                  "$ref": "#/components/schemas/refCount"
                },
                "refId": {
                  "$ref": "#/components/schemas/refId"
                },
                "skill": {
                  "$ref": "#/components/schemas/skill"
                },
                "agents": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/bodyAgentsStatusResponse_agents"
                  }
                }
              }
            },
            "bodyLoggedinAgentsResponse": {
              "required": [
                "agentsPriorityAndstatusList",
                "refCount",
                "refId",
                "skill"
              ],
              "type": "object",
              "properties": {
                "refCount": {
                  "$ref": "#/components/schemas/refCount"
                },
                "refId": {
                  "$ref": "#/components/schemas/refId"
                },
                "skill": {
                  "$ref": "#/components/schemas/skill"
                },
                "agents": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/bodyLoggedinAgentsResponse_agents"
                  }
                }
              }
            },
            "bodyRouteRequestSyncRouteSelectResponse": {
              "required": [
                "agentId",
                "benchmarkFlag",
                "benchmarkType",
                "interactionId",
                "refCount",
                "skill"
              ],
              "type": "object",
              "properties": {
                "refCount": {
                  "$ref": "#/components/schemas/refCount"
                },
                "agentId": {
                  "$ref": "#/components/schemas/agentId"
                },
                "interactionId": {
                  "$ref": "#/components/schemas/interactionId"
                },
                "skill": {
                  "$ref": "#/components/schemas/skill"
                },
                "benchmarkFlag": {
                  "$ref": "#/components/schemas/benchmarkFlag"
                },
                "benchmarkType": {
                  "$ref": "#/components/schemas/benchmarkType"
                }
              }
            },
            "bodyRouteRequestSyncTimeoutResponse": {
              "required": [
                "benchmarkFlag",
                "benchmarkType",
                "interactionId",
                "refCount",
                "skill",
                "timeout"
              ],
              "type": "object",
              "properties": {
                "refCount": {
                  "$ref": "#/components/schemas/refCount"
                },
                "interactionId": {
                  "$ref": "#/components/schemas/interactionId"
                },
                "skill": {
                  "$ref": "#/components/schemas/skill"
                },
                "benchmarkFlag": {
                  "$ref": "#/components/schemas/benchmarkFlag"
                },
                "benchmarkType": {
                  "$ref": "#/components/schemas/benchmarkType"
                },
                "timeout": {
                  "type": "string",
                  "example": "TIMEOUT",
                  "enum": [
                    "TIMEOUT"
                  ]
                }
              }
            },
            "bodyRouteRequestAsyncResponse": {
              "required": [
                "benchmarkFlag",
                "benchmarkType",
                "interactionId",
                "refCount",
                "skill"
              ],
              "type": "object",
              "properties": {
                "refCount": {
                  "$ref": "#/components/schemas/refCount"
                },
                "interactionId": {
                  "$ref": "#/components/schemas/interactionId"
                },
                "skill": {
                  "$ref": "#/components/schemas/skill"
                },
                "benchmarkFlag": {
                  "$ref": "#/components/schemas/benchmarkFlag"
                },
                "benchmarkType": {
                  "$ref": "#/components/schemas/benchmarkType"
                }
              }
            },
            "bodyTokenGrantedResponse": {
              "required": [
                "accessToken",
                "expiresIn",
                "refCount",
                "refreshToken",
                "tokenType"
              ],
              "type": "object",
              "properties": {
                "refCount": {
                  "$ref": "#/components/schemas/refCount"
                },
                "tokenType": {
                  "type": "string",
                  "example": "bearer"
                },
                "accessToken": {
                  "type": "string",
                  "description": "JWT token",
                  "format": "jwt",
                  "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpY0JVSWQiOjQ1OTQyNzQsIm5hbWUiOiJzdXBwb3J0QHNhdG1hcGluYy5jb20iLCJpc3MiOiJodHRwczovL2FwaS5hZmluaXRpbGluay5jb20iLCJzdWIiOiJ1c2VyOjI5NTI1MiIsImF1ZCI6IlRlc3RBcHBAU0FUTUFQIiwiZXhwIjoxNjE4MjM3NDA3LCJpYXQiOjE2MTgyMzM4MDgsImljU2NvcGUiOiIxLDIsNCw1LDYsNyw4IiwiaWNDbHVzdGVySWQiOiJCMiIsImljQWdlbnRJZCI6Mjk1MjUyLCJpY1NQSWQiOjYsImdpdmVuX25hbWUiOiJTQVRNQVAiLCJmYW1pbHlfbmFtZSI6IlN1cHBvcnQiLCJ0ZW5hbnRJZCI6IjExZTlkMDcxLTQwMTktOTAwOC04MTAxLTAwNTA1NmExNzE3YyIsIm5iZiI6MTYxODIzMzgwN30.HryUoU8dSWLy8pSAnm3X1izFzIe3hR0SodzHgf1kOLM"
                },
                "expiresIn": {
                  "type": "integer",
                  "description": "Time on seconds after which token will expire",
                  "format": "int64",
                  "example": 3600
                },
                "refreshToken": {
                  "type": "string",
                  "description": "This token will be used in future to refresh the JWT token",
                  "format": "string",
                  "example": "eyJhbKciOiJIUzI1NiJ9"
                }
              }
            },
            "inline_response_200": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/bodyRouteRequestSyncRouteSelectResponse"
                },
                {
                  "$ref": "#/components/schemas/bodyRouteRequestSyncTimeoutResponse"
                }
              ]
            },
            "capacityChangeList_inner": {
              "type": "object",
              "properties": {
                "channel": {
                  "$ref": "#/components/schemas/channelName"
                },
                "capacity": {
                  "$ref": "#/components/schemas/channelCapacity"
                },
                "remaingingCapacity": {
                  "type": "integer",
                  "description": "Agents remaining capacity on respective Channel",
                  "format": "int32",
                  "example": 2
                }
              }
            },
            "assignedInteractionsList_inner": {
              "type": "object",
              "properties": {
                "interactionId": {
                  "$ref": "#/components/schemas/interactionId"
                },
                "skill": {
                  "$ref": "#/components/schemas/skill"
                },
                "channel": {
                  "$ref": "#/components/schemas/channelName"
                },
                "interactionLoad": {
                  "type": "integer",
                  "format": "int32",
                  "example": 1
                },
                "interactionState": {
                  "type": "string",
                  "example": "ACTIVE",
                  "enum": [
                    "ACTIVE",
                    "INACTIVE"
                  ]
                }
              }
            },
            "bodyAgentsStatusResponse_agentsInfoOnSkills": {
              "type": "object",
              "properties": {
                "skill": {
                  "$ref": "#/components/schemas/skill"
                },
                "priority": {
                  "$ref": "#/components/schemas/agentPriority"
                }
              }
            },
            "bodyAgentsStatusResponse_agentsInfoOnChannels": {
              "type": "object",
              "properties": {
                "channel": {
                  "$ref": "#/components/schemas/channelName"
                },
                "capacity": {
                  "$ref": "#/components/schemas/channelCapacity"
                },
                "remainingCapacity": {
                  "type": "integer",
                  "format": "int32",
                  "example": 2
                }
              }
            },
            "bodyAgentsStatusResponse_agents": {
              "type": "object",
              "properties": {
                "agentId": {
                  "$ref": "#/components/schemas/agentId"
                },
                "agentStatus": {
                  "$ref": "#/components/schemas/agentStatus"
                },
                "agentsInfoOnSkills": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/bodyAgentsStatusResponse_agentsInfoOnSkills"
                  }
                },
                "agentsInfoOnChannels": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/bodyAgentsStatusResponse_agentsInfoOnChannels"
                  }
                }
              }
            },
            "bodyLoggedinAgentsResponse_agents": {
              "type": "object",
              "properties": {
                "agentId": {
                  "$ref": "#/components/schemas/agentId"
                },
                "agentPriority": {
                  "$ref": "#/components/schemas/agentPriority"
                },
                "agentStatus": {
                  "$ref": "#/components/schemas/agentStatus"
                },
                "channelCapacityList": {
                  "$ref": "#/components/schemas/channelCapacityList"
                },
                "agentAttributes": {
                  "$ref": "#/components/schemas/attachedData"
                }
              }
            }
          },
          "responses": {
            "OK": {
              "description": "**OK**",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/bodyrefCountResponse"
                  }
                }
              }
            },
            "BadRequestError": {
              "description": "**Bad Request**",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/bodyrefCountResponse"
                  }
                }
              }
            },
            "UnauthorizedError": {
              "description": "**Unauthorized**",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/bodyrefCountResponse"
                  }
                }
              }
            },
            "LoggedInAgentsOK": {
              "description": "**OK**",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/bodyLoggedinAgentsResponse"
                  }
                }
              }
            },
            "AgentsStatusOK": {
              "description": "**OK** - Statuses of agents",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/bodyAgentsStatusResponse"
                  }
                }
              }
            },
            "InitOK": {
              "description": "**OK**",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/bodyInitResponse"
                  }
                }
              }
            },
            "TokenRequestOK": {
              "description": "**OK** - Token is generated and will be returned in response body",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/bodyTokenGrantedResponse"
                  }
                }
              }
            },
            "RouteRequestSyncOK": {
              "description": "**OK**",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/inline_response_200"
                  }
                }
              }
            },
            "RouteRequestAsyncOK": {
              "description": "**OK**",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/bodyRouteRequestAsyncResponse"
                  }
                }
              }
            }
          },
          "requestBodies": {
            "bodyInteractionInitiated": {
              "content": {
                "application/x-www-form-urlencoded": {
                  "schema": {
                    "$ref": "#/components/schemas/contentInteractionInitiated"
                  }
                },
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/contentInteractionInitiated"
                  }
                },
                "application/xml": {
                  "schema": {
                    "$ref": "#/components/schemas/contentInteractionInitiated"
                  }
                },
                "application/text": {
                  "schema": {
                    "$ref": "#/components/schemas/contentInteractionInitiated"
                  }
                }
              },
              "required": true
            },
            "bodyInteractionRinging": {
              "content": {
                "application/x-www-form-urlencoded": {
                  "schema": {
                    "$ref": "#/components/schemas/contentInteractionRinging"
                  }
                },
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/contentInteractionRinging"
                  }
                },
                "application/xml": {
                  "schema": {
                    "$ref": "#/components/schemas/contentInteractionRinging"
                  }
                },
                "application/text": {
                  "schema": {
                    "$ref": "#/components/schemas/contentInteractionRinging"
                  }
                }
              },
              "required": true
            },
            "bodyInteractionConnected": {
              "content": {
                "application/x-www-form-urlencoded": {
                  "schema": {
                    "$ref": "#/components/schemas/contentInteractionConnected"
                  }
                },
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/contentInteractionConnected"
                  }
                },
                "application/xml": {
                  "schema": {
                    "$ref": "#/components/schemas/contentInteractionConnected"
                  }
                },
                "application/text": {
                  "schema": {
                    "$ref": "#/components/schemas/contentInteractionConnected"
                  }
                }
              },
              "required": true
            },
            "bodyInteractionAbandoned": {
              "content": {
                "application/x-www-form-urlencoded": {
                  "schema": {
                    "$ref": "#/components/schemas/contentInteractionAbandoned"
                  }
                },
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/contentInteractionAbandoned"
                  }
                },
                "application/xml": {
                  "schema": {
                    "$ref": "#/components/schemas/contentInteractionAbandoned"
                  }
                },
                "application/text": {
                  "schema": {
                    "$ref": "#/components/schemas/contentInteractionAbandoned"
                  }
                }
              },
              "required": true
            },
            "bodyInteractionInactive": {
              "content": {
                "application/x-www-form-urlencoded": {
                  "schema": {
                    "$ref": "#/components/schemas/contentInteractionInactive"
                  }
                },
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/contentInteractionInactive"
                  }
                },
                "application/xml": {
                  "schema": {
                    "$ref": "#/components/schemas/contentInteractionInactive"
                  }
                },
                "application/text": {
                  "schema": {
                    "$ref": "#/components/schemas/contentInteractionInactive"
                  }
                }
              },
              "required": true
            },
            "bodyInteractionTransferred": {
              "content": {
                "application/x-www-form-urlencoded": {
                  "schema": {
                    "$ref": "#/components/schemas/contentInteractionTransferred"
                  }
                },
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/contentInteractionTransferred"
                  }
                },
                "application/xml": {
                  "schema": {
                    "$ref": "#/components/schemas/contentInteractionTransferred"
                  }
                },
                "application/text": {
                  "schema": {
                    "$ref": "#/components/schemas/contentInteractionTransferred"
                  }
                }
              },
              "required": true
            },
            "bodyInteractionDisconnected": {
              "content": {
                "application/x-www-form-urlencoded": {
                  "schema": {
                    "$ref": "#/components/schemas/contentInteractionDisconnected"
                  }
                },
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/contentInteractionDisconnected"
                  }
                },
                "application/xml": {
                  "schema": {
                    "$ref": "#/components/schemas/contentInteractionDisconnected"
                  }
                },
                "application/text": {
                  "schema": {
                    "$ref": "#/components/schemas/contentInteractionDisconnected"
                  }
                }
              },
              "required": true
            },
            "bodyInteractionTimerExtension": {
              "content": {
                "application/x-www-form-urlencoded": {
                  "schema": {
                    "$ref": "#/components/schemas/contentInteractionTimerExtension"
                  }
                },
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/contentInteractionTimerExtension"
                  }
                },
                "application/xml": {
                  "schema": {
                    "$ref": "#/components/schemas/contentInteractionTimerExtension"
                  }
                },
                "application/text": {
                  "schema": {
                    "$ref": "#/components/schemas/contentInteractionTimerExtension"
                  }
                }
              },
              "required": true
            },
            "bodyAgentLogin": {
              "content": {
                "application/x-www-form-urlencoded": {
                  "schema": {
                    "$ref": "#/components/schemas/contentAgentLogin"
                  }
                },
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/contentAgentLogin"
                  }
                },
                "application/xml": {
                  "schema": {
                    "$ref": "#/components/schemas/contentAgentLogin"
                  }
                },
                "application/text": {
                  "schema": {
                    "$ref": "#/components/schemas/contentAgentLogin"
                  }
                }
              },
              "required": true
            },
            "bodyAgentLogout": {
              "content": {
                "application/x-www-form-urlencoded": {
                  "schema": {
                    "$ref": "#/components/schemas/contentAgentLogout"
                  }
                },
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/contentAgentLogout"
                  }
                },
                "application/xml": {
                  "schema": {
                    "$ref": "#/components/schemas/contentAgentLogout"
                  }
                },
                "application/text": {
                  "schema": {
                    "$ref": "#/components/schemas/contentAgentLogout"
                  }
                }
              },
              "required": true
            },
            "bodyAgentStatusChange": {
              "content": {
                "application/x-www-form-urlencoded": {
                  "schema": {
                    "$ref": "#/components/schemas/contentAgentStatusChange"
                  }
                },
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/contentAgentStatusChange"
                  }
                },
                "application/xml": {
                  "schema": {
                    "$ref": "#/components/schemas/contentAgentStatusChange"
                  }
                },
                "application/text": {
                  "schema": {
                    "$ref": "#/components/schemas/contentAgentStatusChange"
                  }
                }
              },
              "required": true
            },
            "bodyAgentSkillChange": {
              "content": {
                "application/x-www-form-urlencoded": {
                  "schema": {
                    "$ref": "#/components/schemas/contentAgentSkillChange"
                  }
                },
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/contentAgentSkillChange"
                  }
                },
                "application/xml": {
                  "schema": {
                    "$ref": "#/components/schemas/contentAgentSkillChange"
                  }
                },
                "application/text": {
                  "schema": {
                    "$ref": "#/components/schemas/contentAgentSkillChange"
                  }
                }
              },
              "required": true
            },
            "bodyAgentCapacityChange": {
              "content": {
                "application/x-www-form-urlencoded": {
                  "schema": {
                    "$ref": "#/components/schemas/contentAgentCapacityChange"
                  }
                },
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/contentAgentCapacityChange"
                  }
                },
                "application/xml": {
                  "schema": {
                    "$ref": "#/components/schemas/contentAgentCapacityChange"
                  }
                },
                "application/text": {
                  "schema": {
                    "$ref": "#/components/schemas/contentAgentCapacityChange"
                  }
                }
              },
              "required": true
            },
            "bodyAgentChannelChange": {
              "content": {
                "application/x-www-form-urlencoded": {
                  "schema": {
                    "$ref": "#/components/schemas/contentAgentChannelChange"
                  }
                },
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/contentAgentChannelChange"
                  }
                },
                "application/xml": {
                  "schema": {
                    "$ref": "#/components/schemas/contentAgentChannelChange"
                  }
                },
                "application/text": {
                  "schema": {
                    "$ref": "#/components/schemas/contentAgentChannelChange"
                  }
                }
              },
              "required": true
            },
            "bodyHeartbeat": {
              "content": {
                "application/x-www-form-urlencoded": {
                  "schema": {
                    "$ref": "#/components/schemas/contentHeartbeat"
                  }
                },
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/contentHeartbeat"
                  }
                },
                "application/xml": {
                  "schema": {
                    "$ref": "#/components/schemas/contentHeartbeat"
                  }
                },
                "application/text": {
                  "schema": {
                    "$ref": "#/components/schemas/contentHeartbeat"
                  }
                }
              },
              "required": true
            },
            "bodyctrlMode": {
              "content": {
                "application/x-www-form-urlencoded": {
                  "schema": {
                    "$ref": "#/components/schemas/contentCtrlMode"
                  }
                },
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/contentCtrlMode"
                  }
                },
                "application/xml": {
                  "schema": {
                    "$ref": "#/components/schemas/contentCtrlMode"
                  }
                },
                "application/text": {
                  "schema": {
                    "$ref": "#/components/schemas/contentCtrlMode"
                  }
                }
              },
              "required": true
            },
            "bodyInit": {
              "content": {
                "application/x-www-form-urlencoded": {
                  "schema": {
                    "$ref": "#/components/schemas/contentInit"
                  }
                },
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/contentInit"
                  }
                },
                "application/xml": {
                  "schema": {
                    "$ref": "#/components/schemas/contentInit"
                  }
                },
                "application/text": {
                  "schema": {
                    "$ref": "#/components/schemas/contentInit"
                  }
                }
              },
              "required": true
            },
            "bodyActivationDeactivation": {
              "content": {
                "application/x-www-form-urlencoded": {
                  "schema": {
                    "$ref": "#/components/schemas/contentActivationDeactivation"
                  }
                },
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/contentActivationDeactivation"
                  }
                },
                "application/xml": {
                  "schema": {
                    "$ref": "#/components/schemas/contentActivationDeactivation"
                  }
                },
                "application/text": {
                  "schema": {
                    "$ref": "#/components/schemas/contentActivationDeactivation"
                  }
                }
              },
              "required": true
            },
            "bodyRequestToken": {
              "content": {
                "application/x-www-form-urlencoded": {
                  "schema": {
                    "$ref": "#/components/schemas/contentRequestToken"
                  }
                },
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/contentRequestToken"
                  }
                },
                "application/xml": {
                  "schema": {
                    "$ref": "#/components/schemas/contentRequestToken"
                  }
                },
                "application/text": {
                  "schema": {
                    "$ref": "#/components/schemas/contentRequestToken"
                  }
                }
              },
              "required": true
            },
            "bodyRouteRequest": {
              "content": {
                "application/x-www-form-urlencoded": {
                  "schema": {
                    "$ref": "#/components/schemas/contentRouteRequest"
                  }
                },
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/contentRouteRequest"
                  }
                },
                "application/xml": {
                  "schema": {
                    "$ref": "#/components/schemas/contentRouteRequest"
                  }
                },
                "application/text": {
                  "schema": {
                    "$ref": "#/components/schemas/contentRouteRequest"
                  }
                }
              },
              "required": true
            },
            "bodyRouteEnd": {
              "content": {
                "application/x-www-form-urlencoded": {
                  "schema": {
                    "$ref": "#/components/schemas/contentRouteEnd"
                  }
                },
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/contentRouteEnd"
                  }
                },
                "application/xml": {
                  "schema": {
                    "$ref": "#/components/schemas/contentRouteEnd"
                  }
                },
                "application/text": {
                  "schema": {
                    "$ref": "#/components/schemas/contentRouteEnd"
                  }
                }
              },
              "required": true
            },
            "bodyRouteSelect": {
              "content": {
                "application/x-www-form-urlencoded": {
                  "schema": {
                    "$ref": "#/components/schemas/contentRouteSelect"
                  }
                },
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/contentRouteSelect"
                  }
                },
                "application/xml": {
                  "schema": {
                    "$ref": "#/components/schemas/contentRouteSelect"
                  }
                },
                "application/text": {
                  "schema": {
                    "$ref": "#/components/schemas/contentRouteSelect"
                  }
                }
              },
              "required": true
            }
          },
          "securitySchemes": {
            "bearerAuth": {
              "type": "http",
              "scheme": "bearer",
              "bearerFormat": "JWT"
            },
            "basicAuth": {
              "type": "http",
              "scheme": "basic"
            }
          }
        }
      }
    },
    {
      "label": "Mega Omni",
      "value": "Mega-Omni",
      "Specs": {
        "openapi": "3.0.0",
        "info": {
          "version": "20.10.0",
          "title": "MEGA AGENT API",
          "description": "Mega Agent API v20.10 description"
        },
        "servers": [
          {
            "url": "https://eps.megavaya.com/agentapi/{basePath}",
            "variables": {
              "basePath": {
                "default": "v1.0"
              }
            }
          }
        ],
        "paths": {
          "/mfs/mfs_agent_command": {
            "post": {
              "description": "Agent's endpoint for commands pertaining MFS webhook",
              "operationId": "Agent MFS Command webhook",
              "requestBody": {
                "description": "POST Agent command information for MFS webhook",
                "required": true,
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/MFSAgentCommandsRequest"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "Agent Performance Response",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/MFSAgentCommandsResponse"
                      }
                    }
                  }
                }
              },
              "x-code-samples": [
                {
                  "lang": "Java",
                  "source": "Unirest.setTimeouts(0, 0);\n HttpResponse<String> response = Unirest.post(\"http://172.16.30.171:9000/agentapi/v1.0/mfs/mfs_agent_command\")\n   .header(\"Content-Type\", \"application/json\")\n   .body(\"{\\r\\n\\\"agent_id\\\":0,\\r\\n\\\"tenant_id\\\":0,\\r\\n\\\"ixn_id\\\":0,\\r\\n\\\"result\\\":0,\\r\\n\\\"timestamp\\\":0,\\r\\n\\\"op_type\\\":\\\"string\\\",\\r\\n\\\"operation\\\":\\\"string\\\",\\r\\n\\\"subscription\\\":false,\\r\\n\\\"client_id\\\":\\\"string\\\",\\r\\n\\\"callbackURL\\\":\\\"string\\\",\\r\\n\\\"to\\\":\\\"string\\\",\\r\\n\\\"dn\\\":0,\\r\\n\\\"str_data\\\":\\\"string\\\",\\r\\n\\\"msg_id\\\":\\\"string\\\",\\r\\n\\\"from\\\":\\\"string\\\",\\r\\n\\\"limit\\\":0,\\r\\n\\\"offset\\\":0,\\r\\n\\\"type\\\":0,\\r\\n\\\"parent_msg_id\\\":\\\"string\\\"\\r\\n}\\r\\n\")\n   .asString();   \n"
                },
                {
                  "lang": "NodeJs",
                  "source": "var request = require('request');\nvar options = {\n  'method': 'POST',\n  'url': 'http://172.16.30.171:9000/agentapi/v1.0/mfs/mfs_agent_command',\n  'headers': {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\"agent_id\":0,\"tenant_id\":0,\"ixn_id\":0,\"result\":0,\"timestamp\":0,\"op_type\":\"string\",\"operation\":\"string\",\"subscription\":false,\"client_id\":\"string\",\"callbackURL\":\"string\",\"to\":\"string\",\"dn\":0,\"str_data\":\"string\",\"msg_id\":\"string\",\"from\":\"string\",\"limit\":0,\"offset\":0,\"type\":0,\"parent_msg_id\":\"string\"})\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n"
                },
                {
                  "lang": "wget",
                  "source": "wget --no-check-certificate --quiet \\\n--method POST \\\n--timeout=0 \\\n--header 'Content-Type: application/json' \\\n--body-data 'body-data '{\n\"agent_id\": 0,\n\"tenant_id\": 0,\n\"ixn_id\": 0,\n\"result\": 0,\n\"timestamp\": 0,\n\"op_type\": \"string\",\n\"operation\": \"string\",\n\"subscription\": false,\n\"client_id\": \"string\",\n\"callbackURL\": \"string\",\n\"to\": \"string\",\n\"dn\": 0,\n\"str_data\": \"string\",\n\"msg_id\": \"string\",\n\"from\": \"string\",\n\"limit\": 0,\n\"offset\": 0,\n\"type\": 0,\n\"parent_msg_id\": \"string\"\n}\n' \\\n  'http://172.16.30.171:9000/agentapi/v1.0/mfs/mfs_agent_command'\n"
                }
              ]
            }
          },
          "/mfs/mfs_agent_alert": {
            "post": {
              "description": "Agent's endpoint for alerts pertaining MFS webhook",
              "operationId": "Agent MFS Alert webhook",
              "requestBody": {
                "description": "POST Agent alert information for MFS webhook",
                "required": true,
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/MFSAgentAlertsRequest"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "Agent Performance Response",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/MFSAgentAlertsResponse"
                      }
                    }
                  }
                }
              },
              "x-code-samples": [
                {
                  "lang": "Java",
                  "source": "Unirest.setTimeouts(0, 0);\n HttpResponse<String> response = Unirest.post(\"http://172.16.30.171:9000/agentapi/v1.0/mfs/mfs_agent_alert\")\n   .header(\"Content-Type\", \"application/json\")\n   .body(\"{\\r\\n\\\"agent_id\\\": 0,\\r\\n\\\"tenant_id\\\": 0,\\r\\n\\\"client_id\\\": 0,\\r\\n\\\"ixn_id\\\": 0,\\r\\n\\\"callbackURL\\\": \\\"string\\\",\\r\\n\\\"op_type\\\": \\\"string\\\",\\r\\n\\\"operation\\\": \\\"string\\\",\\r\\n\\\"subscription\\\": \\\"string\\\"\\r\\n}\\r\\n\")\n   .asString();   \n"
                },
                {
                  "lang": "NodeJs",
                  "source": "var request = require('request');\nvar options = {\n  'method': 'POST',\n  'url': 'http://172.16.30.171:9000/agentapi/v1.0/mfs/mfs_agent_alert',\n  'headers': {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\"tenant_id\":0,\"callbackURL\":\"string\",\"op_type\":\"string\",\"operation\":\"string\",\"subscription\":\"string\",\"client_id\":0,\"agent_id\":0,\"ixn_id\":0})\n\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n"
                },
                {
                  "lang": "wget",
                  "source": "wget --no-check-certificate --quiet \\\n--method POST \\\n--timeout=0 \\\n--header 'Content-Type: application/json' \\\n--body-data '{\n\"tenant_id\": 0,\n\"callbackURL\": \"string\",\n\"op_type\": \"string\",\n\"operation\": \"string\",\n\"subscription\": \"string\",\n\"client_id\": 0,\n\"agent_id\": 0,\n\"ixn_id\": 0\n}\n' \\\n  'http://172.16.30.171:9000/agentapi/v1.0/mfs/mfs_agent_alert'\n"
                }
              ]
            }
          },
          "/efs/efs_agent_command": {
            "post": {
              "description": "Agent's endpoint for commands pertaining EFS webhook",
              "operationId": "Agent EFS Command webhook",
              "requestBody": {
                "description": "POST Agent command information for EFS webhook",
                "required": true,
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/EFSAgentCommandsRequest"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "Agent Performance Response",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/EFSAgentCommandsResponse"
                      }
                    }
                  }
                }
              },
              "x-code-samples": [
                {
                  "lang": "Java",
                  "source": "Unirest.setTimeouts(0, 0);\n HttpResponse<String> response = Unirest.post(\"http://172.16.30.171:9000/agentapi/v1.0/efs/efs_agent_command\")\n   .header(\"Content-Type\", \"application/json\")\n   .body(\"{\\r\\n\\\"agent_id\\\": 0,\\r\\n\\\"tenant_id\\\": 0,\\r\\n\\\"client_id\\\": 0,\\r\\n\\\"ixn_id\\\": 0,\\r\\n\\\"callbackURL\\\": \\\"string\\\",\\r\\n\\\"op_type\\\": \\\"string\\\",\\r\\n\\\"operation\\\": \\\"string\\\",\\r\\n\\\"subscription\\\": \\\"string\\\",\\r\\n\\\"station_id\\\": 0\\r\\n}\\r\\n\")\n   .asString();   \n"
                },
                {
                  "lang": "NodeJs",
                  "source": "var request = require('request');\nvar options = {\n  'method': 'POST',\n  'url': 'http://172.16.30.171:9000/agentapi/v1.0/efs/efs_agent_command',\n  'headers': {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\"tenant_id\":0,\"callbackURL\":\"string\",\"op_type\":\"string\",\"operation\":\"string\",\"subscription\":\"string\",\"client_id\":0,\"agent_id\":0,\"ixn_id\":0,\"station_id\":0})\n\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n"
                },
                {
                  "lang": "wget",
                  "source": "wget --no-check-certificate --quiet \\\n--method POST \\\n--timeout=0 \\\n--header 'Content-Type: application/json' \\\n--body-data '{\n\"tenant_id\": 0,\n\"callbackURL\": \"string\",\n\"op_type\": \"string\",\n\"operation\": \"string\",\n\"subscription\": \"string\",\n\"client_id\": 0,\n\"agent_id\": 0,\n\"ixn_id\": 0,\n\"station_id\": 0\n}\n' \\\n  'http://172.16.30.171:9000/agentapi/v1.0/efs/efs_agent_command'\n"
                }
              ]
            }
          },
          "/efs/efs_agent_alert": {
            "post": {
              "description": "Agent's endpoint for alerts pertaining EFS webhook",
              "operationId": "Agent EFS Alert webhook",
              "requestBody": {
                "description": "POST Agent alert information for EFS webhook",
                "required": true,
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/EFSAgentAlertsRequest"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "Agent Performance Response",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/EFSAgentAlertsResponse"
                      }
                    }
                  }
                }
              },
              "x-code-samples": [
                {
                  "lang": "Java",
                  "source": "Unirest.setTimeouts(0, 0);\n HttpResponse<String> response = Unirest.post(\"http://172.16.30.171:9000/agentapi/v1.0/efs/efs_agent_alert\")\n   .header(\"Content-Type\", \"application/json\")\n   .body(\"{\\r\\n\\\"agent_id\\\": 0,\\r\\n\\\"tenant_id\\\": 0,\\r\\n\\\"client_id\\\": 0,\\r\\n\\\"ixn_id\\\": 0,\\r\\n\\\"callbackURL\\\": \\\"string\\\",\\r\\n\\\"op_type\\\": \\\"string\\\",\\r\\n\\\"operation\\\": \\\"string\\\",\\r\\n\\\"subscription\\\": \\\"string\\\"\\r\\n}\\r\\n\")\n   .asString();   \n"
                },
                {
                  "lang": "NodeJs",
                  "source": "var request = require('request');\nvar options = {\n  'method': 'POST',\n  'url': 'http://172.16.30.171:9000/agentapi/v1.0/efs/efs_agent_alert',\n  'headers': {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\"tenant_id\":0,\"callbackURL\":\"string\",\"op_type\":\"string\",\"operation\":\"string\",\"subscription\":\"string\",\"client_id\":0,\"agent_id\":0,\"ixn_id\":0})\n\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n"
                },
                {
                  "lang": "wget",
                  "source": "wget --no-check-certificate --quiet \\\n--method POST \\\n--timeout=0 \\\n--header 'Content-Type: application/json' \\\n--body-data '{\n\"tenant_id\": 0,\n\"callbackURL\": \"string\",\n\"op_type\": \"string\",\n\"operation\": \"string\",\n\"subscription\": \"string\",\n\"client_id\": 0,\n\"agent_id\": 0,\n\"ixn_id\": 0\n}\n' \\\n  'http://172.16.30.171:9000/agentapi/v1.0/efs/efs_agent_alert'\n"
                }
              ]
            }
          },
          "/ams/tfs_agent_command": {
            "post": {
              "description": "\nThe AMS command webhook defines a way to get responses from the AMS by making a RESTful call to Mega Agent API. \nFor this, the client has to provide an HTTP POST Request to the Mega Agent API. \nThe Mega Agent API will then parse the request internally. \nAfter processing, the Mega Agent API will send a response to the client on HTTP via the POST call to the webhook URL that includes the data received from the AMS.\n\nAdditionally, if the client provides a valid WebSocket client ID in the HTTP POST Request, the Mega Agent API will also provide a response over that WebSocket with that client ID in addition to the webhook URL. \nIn order to receive a WebSocket Response, the WebSocket client ID must be valid.\n\n\n## Endpoint\n\nThe Mega Agent API exposed the following endpoint for the Agent AMS command webhook:\n```\n/ams/tfs_agent_command\n```\n\n## How To Use Agent AMS Command Webhook\n\nTo make use of the Agent AMS command webhook, the client has to configure their Web Server to register for command webhooks and provide us the Uniform Resource Locators (URLs) that will point to the endpoint which will serve as callback URLs. To register the URL, the client has to send us the HTTP POST Request. A sample request body is given below:\n\n```\nPOST: HTTP Request\n{\n  \"agent_id\": 100,\n  \"ixn_id\": 101,\n  \"op_type\": \"response\",\n  \"operation\": \"tfs_agent_login\",\n  \"password\": \"123\",\n  \"station_id\": 101,\n  \"tenant_id\": 0,\n  \"client_id\": \"4B9D7C544B5D49F3867E2F8FB4442774\",\n  \"callbackURL\": \"http://<CallBack URL IP>:<Port>/<Webhook>\"\n}\n```\n\n## Agent AMS Commands\n\nIn order to enable the Mega Agent API to capture the HTTP POST requests, sent through client, the following is a list of AMS command webhooks, exposed via the \"/ams/tfs_agent_command\" endpoint, that client will have to integrate at its end with POST method:\n\nFor these AMS command webhooks to work, client must define **op_type = \\\"response\\\"** in this HTTP Request.\n\n**Important Note**\n```\nHere a client refers to User Interface, any other system or service, or third-party software that initiates the HTTP Request.\n```\n\n### Agent Login\n\nThe **\"tfs_agent_login\"** operation allows the client to send this command to AMS. It is used to request agent login by the client. \n\n### Agent Logout\n\nThe **\"tfs_agent_logout\"** operation allows the client to send this command to AMS. It is used to request agent log out by the client. \nwhenever an Agent logs out through the UI.\n\n### Agent On Break\n\nThe **\"tfs_agent_on_break\"** operation allows the client to send this command to AMS. It is used to request agent rest break time between the calls by the client.\n\n### Agent Auto In\n\nThe **\"tfs_agent_auto_in\"** operation allows the client to send this command to AMS. It is used to request attend/accept calls right after agent login by the client. Note that the Agent can auto in only if this facility is available to him at the time of Agent configuration.\n\n### Agent Manual In\n\nThe **\"tfs_agent_manual_in\"** operation allows the client to send this command to AMS. It is used to manually enable the Agent to attend/accept the calls by the client while on break or \"call not accept\" state previously.\n\n### Agent On ACW(After Call Work)\n\nThe **\"tfs_agent_on_ocw\"** operation allows the client to send this command to AMS. It is used to request call wind-up process when the call is about to end by the client.\n\n### Agent Registration\n\nThe **\"tfs_register_agent_id\"** operation allows the client to send this command to AMS. It is used to request \"register all AMS events\" in Mega Agent API for the Agent by the client.\n\n### Force Logout\n\nThe **\"wss_agent_force_logout\"** operation allows the client to send this command to AMS. It is used when for some reason agent cannot logout or a state error occurred. \n\nA sample response body for command is given below:\n\n```\nPOST: HTTP Response\n{\n  \"agent_id\" : 100,\n  \"current_state\" : 3,\n  \"current_state_return_code\" : 1,\n  \"guid\" : \"789123\",\n  \"ixn_id\" : 101,\n  \"op_type\" : \"response\",\n  \"operation\" : \"tfs_agent_login\",\n  \"pending_state\" : 4,\n  \"pending_state_return_code\" : 2,\n  \"station_id\" : 2000,\n  \"tenant_id\" : 0\n}\n```\n\n## AMS Command Webhook Response Status Codes\n\nHTTP response status codes indicate whether a specific HTTP request has been successfully completed. Responses are grouped in five classes:\n\n1. Informational responses (100-199)\n2. Successful responses (200-299)\n3. Redirects (300-399)\n4. Client errors (400-499)\n5. Server errors (500-599)\n\nCurrently, for AMS Command webhooks, we provide response status codes that fall in successful responses, client errors, and server errors. The resource describing the result of the action is transmitted in the message body.\n\n|    | Code  | Description | Actual Message |\n| ---| ----------- | ----------- | -------------- |\n| 1  | 400 (Bad Request) | The TFS could not understand the HTTP Request due to invalid syntax/format | Body is not well formed in Json! |\n| 2  | 400 (Bad Request) | The TFS could not parse and query the JSON Request body due to some internal error | Error parsing JSON for TFS request: operation = \" + \"op_name\" |\n| 3  | 500 (Internal Server Error) | The TFS has encountered a situation it doesn't know how to handle | Error sending Command: operation = \" + \"op_name\" |\n| 4  | 200 (OK) | Everything went well for the command webhook | Command Successfully Sent to Feature Server for TFS request: operation = \" + \"op_name\" |\n",
              "operationId": "AMS Command Webhook",
              "requestBody": {
                "required": true,
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/TFSAgentCommandsRequest"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "Agent Performance Response",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/TFSAgentCommandsResponse"
                      }
                    }
                  }
                }
              },
              "x-code-samples": [
                {
                  "lang": "Java",
                  "source": "Unirest.setTimeouts(0, 0);\n HttpResponse<String> response = Unirest.post(\"http://172.16.30.171:9000/agentapi/v1.0/ams/tfs_agent_command\")\n   .header(\"Content-Type\", \"application/json\")\n   .body(\"{\\r\\n\\\"agent_id\\\": 100,\\r\\n\\\"tenant_id\\\": 0,\\r\\n\\\"client_id\\\": \\\"4B9D7C544B5D49F3867E2F8FB4442774\\\",\\r\\n\\\"ixn_id\\\": 101,\\r\\n\\\"callbackURL\\\": \\\"http://<CallBack URL IP>:<Port>/<Webhook>\\\",\\r\\n\\\"password\\\": \\\"123\\\",\\r\\n\\\"op_type\\\": \\\"response\\\",\\r\\n\\\"operation\\\": \\\"tfs_agent_login\\\",\\r\\n\\\"station_id\\\": 101\\r\\n}\\r\\n\")\n   .asString();   \n"
                },
                {
                  "lang": "NodeJs",
                  "source": "var request = require('request');\nvar options = {\n  'method': 'POST',\n  'url': 'http://172.16.30.171:9000/agentapi/v1.0/ams/tfs_agent_command',\n  'headers': {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\"agent_id\": 100,\"ixn_id\": 101,\"op_type\": \"response\",\"operation\": \"tfs_agent_login\",\"password\": \"123\",\"station_id\": 101,\"tenant_id\": 0,\"client_id\": \"4B9D7C544B5D49F3867E2F8FB4442774\",\"callbackURL\": \"http://<CallBack URL IP>:<Port>/<Webhook>\"})\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n"
                },
                {
                  "lang": "wget",
                  "source": "wget --no-check-certificate --quiet \\\n--method POST \\\n--timeout=0 \\\n--header 'Content-Type: application/json' \\\n--body-data '{\n\"agent_id\": 100,\n\"ixn_id\": 101,\n\"op_type\": \"response\",\n\"operation\": \"tfs_agent_login\",\n\"password\": \"123\",\n\"station_id\": 101,\n\"tenant_id\": 0,\n\"client_id\": \"4B9D7C544B5D49F3867E2F8FB4442774\",\n\"callbackURL\": \"http://<CallBack URL IP>:<Port>/<Webhook>\"\n}\n' \\\n  'http://172.16.30.171:9000/agentapi/v1.0/ams/tfs_agent_command'\n"
                }
              ]
            }
          },
          "/ams/tfs_agent_alert": {
            "post": {
              "description": "\nThe Agent AMS alert webhook defines a way to get events and alerts from TFS via AMS by making RESTful call to Mega Agent API. For this, the client has to provide a HTTP POST Request to the Mega Agent API. The Mega Agent API will then parse the request internally. After processing, the Mega Agent API will send a response to the client on HTTP via the POST call to the webhook URL that includes the data received from the AMS.\n\nAdditionally, if the client provides a valid WebSocket token in the HTTP POST Request, and the client have subscribed to corresponding alerts, the Mega Agent API will also provide this alert over that WebSocket client ID in addition to the webhook URL. In order to receive a WebSocket alert, the WebSocket client ID must be valid and client must also have subscribed to the alerts.\n\n## Endpoint\n\nThe Mega Agent API exposed the following endpoint for the Agent AMS alert webhook:\n\n```\n/ams/tfs_agent_alert\n```\n\n**Important Note**\n```\nThe client will get HTTP Response ONLY if the client has successfully subscribed to an event.\n```\n\n## How To Use Agent AMS Alert Webhook\n\nTo make use of Agent AMS alert webhook, the client has to configure their Web Server to register for alert webhooks and provide us the Uniform Resource Locators (URLs) that will point to the endpoint which will serve as callback URLs. To register the URL, the client has to send us the HTTP POST Request. A sample request body is given below:\n\n```\nPOST: HTTP Request\n{\n  \"client_id\": \"4B9D7C544B5D49F3867E2F8FB4442774\",\n  \"callbackURL\": \"http://<CallBack URL IP>:<Port>/<Webhook>\",\n  \"tenant_id\": 1,\n  \"ixn_id\": 101,\n  \"op_type\": \"alert\",\n  \"subscription\": true,\n  \"operation\": \"tfs_call_merged\",\n  \"agent_id\": 100\n}\n```\n\n## Agent AMS Alert Webhook Response Status Codes\n\nHTTP response status codes indicate whether a specific HTTP request has been successfully completed. Responses are grouped into five classes:\n\n1. Informational responses (100-199)\n2. Successful responses (200-299)\n3. Redirects (300-399)\n4. Client errors (400-499)\n5. Server errors (500-599)\n\nCurrently, for AMS Alert webhooks, we provide response status codes that fall in successful responses, client errors, and server errors. The resource describing the result of the action is transmitted in the message body.\n\n|    | Code  | Description | Actual Message |\n| ---| ----------- | ----------- | -------------- |\n| 1  | 400 (Bad Request) | The TFS could not understand the HTTP Request due to invalid syntax/format | Body is not well formed in Json! |\n| 2  | 400 (Bad Request) | The TFS could not parse and query the JSON Request body due to some internal error | Error parsing JSON for TFS request: operation = \" + \"op_name\" |\n| 3  | 500 (Internal Server Error) | The TFS has encountered a situation it doesn't know how to handle | Error sending Command: operation = \" + \"op_name\" |\n| 4  | 200 (OK) | Everything went well for the command webhook | Command Successfully Sent to Feature Server for TFS request: operation = \" + \"op_name\" |\n\n## AMS Events\nThe AMS events are the events that that the TFS send to AMS whenever a command is executed on the client side. The executed command will trigger an associated event to be send to the AMS.\n\n1. tfs_call_initiated\n2. tfs_call_originated\n3. tfs_call_ringing\n4. tfs_call_connected\n5. tfs_call_terminated\n6. tfs_call_ring_no_answer\n7. tsf_call_merged\n8. tfs_endpoint_not_found\n9. tfs_tcp_disconnection\n10. tfs_call_not_acceptable\n11. tfs_call_held\n12. tfs_call_resume\n\n### Call Initiated\n\nThe TFS triggers the **\"tfs_call_initiated\"** call initiation event and sent to the AMS, whenever the TFS receives an outbound call and routed to an Agent. The TFS will send this event to AMS along with the agent ID to which the call is routed.\n\n### Call Originated\n\nThe TFS triggers the **\"tfs_call_originated\"** call originated event and sent to the AMS, whenever the Agent initiates an inbound call or a conference call from the client-side.\n\n### Call Ringing\n\nThe TFS triggers the **\"tfs_call_ringing\"** call ringing event and sent to the AMS when the call is in the ringing state and the Agent has not yet picked up the call.\n\n### Call Connected\n\nThe TFS triggers the **\"tfs_call_connected\"** call connected event and sent to the AMS when the Agent picked up the ringing call.\n\n### Call Terminated\n\nThe TFS triggers the **\"tfs_call_terminated\"** call terminated event and sent to the AMS when the Agent closes the call.\n\n### Call Ring No Answer\n\nThe TFS triggers the **\"tfs_call_ring_no_answer\"** call ring no answer event and sent to the AMS when the Agent didnt answer the call within a specific time and the call kept on ringing.\n\n### Call Merged\n\nThe TFS triggers the **\"tfs_call_merged\"** call merged event and sent to the AMS when one Agent's call is merged with another Agent. The Agent who first received the call will be able to perform this action for inbound, outbound, and conference calls.\n\n### Endpoint Not Found\n\nThe TFS triggers the **\"tfs_endpoint_not_found\"** endpoint not found event and sent to the AMS when the Agent's information to which the call is routed is incorrect. Mostly you will not get this event, but, if the SHM is corrupt as a whole or some specific part of it is corrupt then you will get this event.\n\n### TCP Disconnection\n\nThe TFS triggers the **\"tfs_tcp_disconnection\"** TCP disconnection event and sent to the AMS when the Agent disconnects due to a lost TCP connection.\n\n### Call Not Acceptable\n\nThe TFS triggers the **\"tfs_call_not_acceptable\"** call not acceptable event and sent to the AMS whenever the received call is not in the format that is not acceptable.\n\n### Call Held\n\nThe TFS triggers the **\"tfs_call_held\"** call held event whenever the call is held from the client-side\n\n### Call Resume\n\nThe TFS triggers the **\"tfs_call_resume\"** call resume event whenever the call is resumed from the client-side\n",
              "operationId": "Agent AMS Alert Webhook",
              "requestBody": {
                "required": true,
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/TFSAgentAlertsRequest"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "Agent Performance Response",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/TFSAgentAlertsResponse"
                      }
                    }
                  }
                }
              },
              "x-code-samples": [
                {
                  "lang": "Java",
                  "source": "Unirest.setTimeouts(0, 0);\n HttpResponse<String> response = Unirest.post(\"http://172.16.30.171:9000/agentapi/v1.0/ams/tfs_agent_alert\")\n   .header(\"Content-Type\", \"application/json\")\n   .body(\"{\\r\\n\\\"agent_id\\\": 100,\\r\\n\\\"tenant_id\\\": 1,\\r\\n\\\"client_id\\\": \\\"4B9D7C544B5D49F3867E2F8FB4442774\\\",\\r\\n\\\"ixn_id\\\": 101,\\r\\n\\\"callbackURL\\\": \\\"http://<CallBack URL IP>:<Port>/<Webhook>\\\",\\r\\n\\\"op_type\\\": \\\"alert\\\",\\r\\n\\\"operation\\\": \\\"tfs_call_merged\\\",\\r\\n\\\"subscription\\\": true\\r\\n}\\r\\n\")\n   .asString();   \n"
                },
                {
                  "lang": "NodeJs",
                  "source": "var request = require('request');\nvar options = {\n  'method': 'POST',\n  'url': 'http://172.16.30.171:9000/agentapi/v1.0/ams/tfs_agent_alert',\n  'headers': {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\"client_id\": \"4B9D7C544B5D49F3867E2F8FB4442774\",\"callbackURL\": \"http://<CallBack URL IP>:<Port>/<Webhook>\",\"tenant_id\": 1,\"ixn_id\": 101,\"op_type\": \"alert\",\"subscription\": true,\"operation\": \"tfs_call_merged\",\"agent_id\": 100})\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n"
                },
                {
                  "lang": "wget",
                  "source": "wget --no-check-certificate --quiet \\\n--method POST \\\n--timeout=0 \\\n--header 'Content-Type: application/json' \\\n--body-data '{\n\"client_id\": \"4B9D7C544B5D49F3867E2F8FB4442774\",\n\"callbackURL\": \"http://<CallBack URL IP>:<Port>/<Webhook>\",\n\"tenant_id\": 1,\n\"ixn_id\": 101,\n\"op_type\": \"alert\",\n\"subscription\": true,\n\"operation\": \"tfs_call_merged\",\n\"agent_id\": 100\n}\n' \\\n  'http://172.16.30.171:9000/agentapi/v1.0/ams/tfs_agent_alert'\n  \n"
                }
              ]
            }
          },
          "/agent/performance/": {
            "post": {
              "description": "This data is being used for reporting on the time stats of an agent based on the date/time provided.\n\n## Endpoint\n\nThe Mega Agent API exposed the following endpoint for the Agent Performance Data from the database (CRM).\n\n- **Use case 1:** When a supervisor needs to get detailed information on Agent time stats.\n- **Use case 2:** When an agent needs to get detailed information on Agent time stats.\n- **Use case 3:** UI can utilize this information to create a visual representation on an agent's performance time stats.\n\n```\n/agent/performance/\n```\n\n**Important Note:**\n\n```\n1. All time durations are in seconds.\n```\n",
              "operationId": "Agent Performance Data (CRM)",
              "requestBody": {
                "description": "Agent information",
                "required": true,
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/AgentPerformanceRequest"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "Agent Performance Response",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/AgentPerformanceResponse"
                      }
                    }
                  }
                }
              },
              "x-code-samples": [
                {
                  "lang": "Java",
                  "source": "Unirest.setTimeouts(0, 0);\n HttpResponse<String> response = Unirest.post(\"http://172.16.30.171:9000/agentapi/v1.0/agent/performance\")\n   .header(\"Content-Type\", \"application/json\")\n   .body(\"{\\r\\n\\\"tenant_id\\\": 0,\\r\\n\\\"acd_id\\\": 0,\\r\\n\\\"ans_agent_id\\\": 0,\\r\\n\\\"start_time\\\": 0\\r\\n}\\r\\n\")\n   .asString();   \n"
                },
                {
                  "lang": "NodeJs",
                  "source": "var request = require('request');\nvar options = {\n  'method': 'POST',\n  'url': 'http://172.16.30.171:9000/agentapi/v1.0/agent/performance',\n  'headers': {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\"tenant_id\":0,\"acd_id\":0,\"ans_agent_id\":0,\"start_time\":0})\n\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n"
                },
                {
                  "lang": "wget",
                  "source": "wget --no-check-certificate --quiet \\\n--method POST \\\n--timeout=0 \\\n--header 'Content-Type: application/json' \\\n--body-data '{\n\"tenant_id\": 0,\n\"acd_id\": 0,\n\"ans_agent_id\": 0,\n\"start_time\": 0\n}\n' \\\n  'http://172.16.30.171:9000/agentapi/v1.0/agent/performance'\n"
                }
              ]
            }
          },
          "/history/calldata": {
            "post": {
              "description": "Retrieve call from CRM Method\n\n## Endpoint\n\nThe Mega Agent API exposes this endpoint for retrieval of data in the table that contains the calls disposition information for every channel.\n\n**Use case:** This data is used for displaying historical disposed interactions.\n\n```\n  /history/calldata\n```\n",
              "operationId": "Call Data (CRM)",
              "requestBody": {
                "description": "Agent information, Any one of [tenant_id,tenant_code,tenant_name] must be provided",
                "required": true,
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/CallDataRequest"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "Call data",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CallDataResponse"
                      }
                    }
                  }
                }
              },
              "x-code-samples": [
                {
                  "lang": "Java",
                  "source": "Unirest.setTimeouts(0, 0);\n HttpResponse<String> response = Unirest.post(\"http://172.16.30.171:9000/agentapi/v1.0/history/calldata\")\n   .header(\"Content-Type\", \"application/json\")\n   .body(\"{\\r\\n\\\"guid\\\": \\\"string\\\",\\r\\n\\\"tenant_id\\\": 0,\\r\\n\\\"tenant_code\\\": \\\"string\\\",\\r\\n\\\"tenant\\\": \\\"string\\\",\\r\\n\\\"acd_id\\\": 0,\\r\\n\\\"ixn_id\\\": 0,\\r\\n\\\"ani\\\": \\\"string\\\",\\r\\n\\\"calltime\\\": 0,\\r\\n\\\"call_channel\\\": \\\"string\\\",\\r\\n\\\"call_notes\\\": \\\"string\\\",\\r\\n\\\"agent_group\\\": 0,\\r\\n\\\"agent_group_string\\\": \\\"string\\\",\\r\\n\\\"call_disposition\\\": \\\"string\\\",\\r\\n\\\"call_followup_flag\\\": \\\"string\\\",\\r\\n\\\"call_followup_date\\\": 0,\\r\\n\\\"ans_agent_id\\\": 0,\\r\\n\\\"ans_agent\\\": \\\"string\\\"\\r\\n}\")\n   .asString();\n"
                },
                {
                  "lang": "NodeJs",
                  "source": "var request = require('request');\nvar options = {\n  'method': 'POST',\n  'url': 'http://172.16.30.171:9000/agentapi/v1.0/history/calldata',\n  'headers': {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\"guid\": \"string\",\"tenant_id\":0,\"tenant_code\":\"string\",\"tenant\":\"string\",\"acd_id\":0,\"ixn_id\":0,\"ani\":\"string\",\"call_time\":0,\"call_channel\":\"string\",\"call_notes\":\"string\",\"agent_group\":0,\"agent_group_string\":\"string\",\"call_disposition\":\"string\",\"call_followup_flag\":\"string\",\"call_followup_date\":0,\"ans_agent_id\":0,\"ans_agent\":\"string\"})\n\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n"
                },
                {
                  "lang": "wget",
                  "source": "wget --no-check-certificate --quiet \\\n  --method POST \\\n  --timeout=0 \\\n  --header 'Content-Type: application/json' \\\n  --body-data '{\n\"tenant_id\": 0,\n\"tenant_code\": \"string\",\n\"tenant\": \"string\",\n\"acd_id\": 0,\n\"ixn_id\": 0,\n\"ani\": \"string\",\n\"call_time\": 0,\n\"call_channel\": \"string\",\n\"call_notes\": \"string\",\n\"agent_group\": 0,\n\"agent_group_string\": \"string\",\n\"call_disposition\": \"string\",\n\"call_followup_flag\": \"string\",\n\"call_followup_date\": 0,\n\"ans_agent_id\": 0,\n\"ans_agent\": \"string\"\n}' \\\n  'http://172.16.30.171:9000/agentapi/v1.0/history/calldata'\n"
                }
              ]
            }
          },
          "/history/updatecalldata": {
            "post": {
              "description": "This is for updating/upserting the call data rescord in CRM Method:\n\n## Endpoint\n\n  This endpoint is used not only for inserting call disposition data but also to update the disposition data. \n\n  - **Use case 1:** Marking an interaction being disposed from the agent's end.\n  - **Use case 2:** Updating an interaction already disposed.\n\n  ```\n  /history/updatecalldata\n  ```\n\n  **Important Note:**\n  ```\n  1. All required parameters must be provided.\n  2. Any one of these could be provided for updating value [tenant_code,tenant,ani,call_time,call_channel,agent_group,agent_group_string,ans_agent,call_disposition,call_followup_flag,call_followup_date,ans_agent_id}\n  ```\n",
              "operationId": "Update call data (CRM)",
              "requestBody": {
                "required": true,
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/UpdateCallDataRequest"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "Update call data response",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/UpdateCallDataResponse"
                      }
                    }
                  }
                }
              },
              "x-code-samples": [
                {
                  "lang": "Java",
                  "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.post(\"http://172.16.30.171:9000/agentapi/v1.0/history/updatecalldata\")\n   .header(\"Content-Type\", \"application/json\")\n   .body(\"{\\r\\n\\\"guid\\\": \\\"string\\\",\\r\\n\\\"tenant_id\\\": 0,\\r\\n\\\"tenant_code\\\": \\\"string\\\",\\r\\n\\\"tenant\\\": \\\"string\\\",\\r\\n\\\"acd_id\\\": 0,\\r\\n\\\"ixn_id\\\": 0,\\r\\n\\\"ani\\\": \\\"string\\\",\\r\\n\\\"call_time\\\": 0,\\r\\n\\\"call_channel\\\": \\\"string\\\",\\r\\n\\\"agent_group\\\": 0,\\r\\n\\\"agent_group_string\\\": \\\"string\\\",\\r\\n\\\"call_disposition\\\": \\\"string\\\",\\r\\n\\\"call_followup_flag\\\": \\\"string\\\",\\r\\n\\\"call_followup_date\\\": 0,\\r\\n\\\"ans_agent_id\\\": 0,\\r\\n\\\"ans_agent\\\": \\\"string\\\"\\r\\n}\")\n   .asString();\n"
                },
                {
                  "lang": "NodeJs",
                  "source": "var request = require('request');\nvar options = {\n  'method': 'POST',\n  'url': 'http://172.16.30.171:9000/agentapi/v1.0/history/updatecalldata',\n  'headers': {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\"guid\":\"string\",\"tenant_id\":0,\"tenant_code\":\"string\",\"tenant\":\"string\",\"acd_id\":0,\"ixn_id\":0,\"ani\":\"string\",\"call_time\":0,\"call_channel\":\"string\",\"agent_group\":0,\"agent_group_string\":\"string\",\"call_disposition\":\"string\",\"call_followup_flag\":\"string\",\"call_followup_date\":0,\"ans_agent_id\":0,\"ans_agent\":\"string\"})\n\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n"
                },
                {
                  "lang": "wget",
                  "source": "wget --no-check-certificate --quiet \\\n  --method POST \\\n  --timeout=0 \\\n  --header 'Content-Type: application/json' \\\n  --body-data '{\n\"guid\": \"string\"\n\"tenant_id\": 0,\n\"tenant_code\": \"string\",\n\"tenant\": \"string\",\n\"acd_id\": 0,\n\"ixn_id\": 0,\n\"ani\": \"string\",\n\"call_time\": 0,\n\"call_channel\": \"string\",\n\"agent_group\": 0,\n\"agent_group_string\": \"string\",\n\"call_disposition\": \"string\",\n\"call_followup_flag\": \"string\",\n\"call_followup_date\": 0,\n\"ans_agent_id\": 0,\n\"ans_agent\": \"string\"\n}' \\\n  'http://172.16.30.171:9000/agentapi/v1.0/history/updatecalldata'\n"
                }
              ]
            }
          },
          "/history/messages": {
            "get": {
              "description": "Fetches whole Messages history data asscoiated with agent ID",
              "operationId": "Messages History Data (CRM)",
              "responses": {
                "200": {
                  "description": "Whole Messages History",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CustomerMessagesHistoryResponse"
                      }
                    }
                  }
                }
              },
              "x-code-samples": [
                {
                  "lang": "Java",
                  "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.get(\"http://172.16.30.171:9000/agentapi/v1.0/history/messages\")\n  .asString();\n"
                },
                {
                  "lang": "NodeJs",
                  "source": "var request = require('request');\nvar options = {\n  'method': 'GET',\n  'url': 'http://172.16.30.171:9000/agentapi/v1.0/history/messages',\n  'headers': {\n  }\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n"
                },
                {
                  "lang": "wget",
                  "source": "wget --no-check-certificate --quiet \\\n--method GET \\\n--timeout=0 \\\n--header '' \\\n'http://172.16.30.171:9000/agentapi/v1.0/history/messages\n"
                }
              ]
            },
            "post": {
              "description": "Fetches all messages associated with an agent id filtered on the fields provided",
              "operationId": "Filter Customer Messages History Data (CRM)",
              "requestBody": {
                "description": "All of [tenant_id,acd_id,ans_agent_id,channel_id,start_time,end_time,limit,offset] must be provided",
                "required": true,
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/CustomerMessagesHistoryRequest"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "Customer Messages History Data",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CustomerMessagesHistoryResponse"
                      }
                    }
                  }
                }
              },
              "x-code-samples": [
                {
                  "lang": "Java",
                  "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.post(\"http://172.16.30.171:9000/agentapi/v1.0/history/messages\")\n  .header(\"Content-Type\", \"application/json\")\n  .body(\"{\\r\\n  \\\"tenant_id\\\": 0,\\r\\n  \\\"acd_id\\\": 0,\\r\\n  \\\"ans_agent_id\\\": 0,\\r\\n  \\\"channel_id\\\": 0,\\r\\n  \\\"start_time\\\": 0,\\r\\n  \\\"end_time\\\": 0,\\r\\n  \\\"limit\\\": 0,\\r\\n  \\\"offset\\\": 0,\\r\\n}\")\n  .asString();\n"
                },
                {
                  "lang": "NodeJs",
                  "source": "var request = require('request');\nvar options = {\n  'method': 'POST',\n  'url': 'http://172.16.30.171:9000/agentapi/v1.0/history/messages',\n  'headers': {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\"tenant_id\":0,\"acd_id\":0,\"ans_agent_id\":0,\"channel_id\":0,\"start_time\":0,\"end_time\":0,\"limit\":0,\"offset\":0})\n\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n"
                },
                {
                  "lang": "wget",
                  "source": "wget --no-check-certificate --quiet \\\n--method POST \\\n--timeout=0 \\\n--header 'Content-Type: application/json' \\\n--body-data '{\n\"tenant_id\": 0,\n\"acd_id\": 0,\n\"ans_agent_id\": 0,\n\"start_time\": 0,\n\"end_time\": 0,\n\"channel_id\": 0,\n\"limit\": 0,\n\"offset\": 0\n  }' \\\n'http://172.16.30.171:9000/agentapi/v1.0/history/messages'\n"
                }
              ]
            }
          },
          "/ixn_messages": {
            "post": {
              "description": "Fetches all messages associated with an Interaction",
              "operationId": "Filter IXN Messages Data",
              "requestBody": {
                "description": "guid must be provided",
                "required": true,
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/IxnMessagesRequest"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "IXN Messages Data",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/IxnMessagesResponse"
                      }
                    }
                  }
                }
              },
              "x-code-samples": [
                {
                  "lang": "Java",
                  "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.post(\"http://172.16.30.171:9000/agentapi/v1.0/ixn_messages\")\n  .header(\"Content-Type\", \"application/json\")\n  .body(\"{\\r\\n  \\\"tenant_id\\\": 0,\\r\\n  \\\"acd_id\\\": 0,\\r\\n  \\\"ans_agent_id\\\": 0,\\r\\n  \\\"channel_id\\\": 0,\\r\\n  \\\"start_time\\\": 0,\\r\\n  \\\"end_time\\\": 0,\\r\\n  \\\"limit\\\": 0,\\r\\n  \\\"offset\\\": 0,\\r\\n  \\\"guid\\\": \\\"string\\\", \\r\\n  \\\"parent_guid\\\": \\\"string\\\"\\r\\n}\")\n  .asString();\n"
                },
                {
                  "lang": "NodeJs",
                  "source": "var request = require('request');\nvar options = {\n  'method': 'POST',\n  'url': 'http://172.16.30.171:9000/agentapi/v1.0/ixn_messages',\n  'headers': {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\"tenant_id\":0,\"acd_id\":0,\"ans_agent_id\":0,\"channel_id\":0,\"start_time\":0,\"end_time\":0,\"limit\":0,\"offset\":0,\"guid\":\"string\",\"parent_guid\":\"string\"})\n\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n"
                },
                {
                  "lang": "wget",
                  "source": "wget --no-check-certificate --quiet \\\n--method POST \\\n--timeout=0 \\\n--header 'Content-Type: application/json' \\\n--body-data '{\n\"tenant_id\": 0,\n\"acd_id\": 0,\n\"ans_agent_id\": 0,\n\"start_time\": 0,\n\"end_time\": 0,\n\"channel_id\": 0,\n\"limit\": 0,\n\"offset\": 0,\n\"guid\": \"string\",\n\"parent_guid\": \"string\"\n  }' \\\n'http://172.16.30.171:9000/agentapi/v1.0/ixn_messages'\n"
                }
              ]
            }
          },
          "/history/customer": {
            "get": {
              "description": "Retrieves Customer whole history data",
              "operationId": "All Customer Interaction History Data (CRM)",
              "responses": {
                "200": {
                  "description": "Whole Data",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CustomerInteractionHistoryResponse"
                      }
                    }
                  }
                }
              },
              "x-code-samples": [
                {
                  "lang": "Java",
                  "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.get(\"http://172.16.30.171:9000/agentapi/v1.0/history/customer\")\n  .asString();\n"
                },
                {
                  "lang": "NodeJs",
                  "source": "var request = require('request');\nvar options = {\n  'method': 'GET',\n  'url': 'http://172.16.30.171:9000/agentapi/v1.0/history/customer',\n  'headers': {\n  }\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n"
                },
                {
                  "lang": "wget",
                  "source": "wget --no-check-certificate --quiet \\\n--method GET \\\n--timeout=0 \\\n--header '' \\\n'http://172.16.30.171:9000/agentapi/v1.0/history/customer\n"
                }
              ]
            },
            "post": {
              "description": "Retrieves Customer history data based on the provided column values",
              "operationId": "Filter Customer Interaction History Data (CRM)",
              "requestBody": {
                "description": "Any one of [tenant_id,tenant_code,tenant_name] must be provided,\n Everything is optional for testing: if empty will behave as GET call",
                "required": true,
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/CustomerInteractionHistoryRequest"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "Customer Interaction History Data",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CustomerInteractionHistoryResponse"
                      }
                    }
                  }
                }
              },
              "x-code-samples": [
                {
                  "lang": "Java",
                  "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.post(\"http://172.16.30.171:9000/agentapi/v1.0/history/customer\")\n  .header(\"Content-Type\", \"application/json\")\n  .body(\"{\\r\\n  \\\"tenant_id\\\": 0,\\r\\n  \\\"tenant_code\\\": \\\"string\\\",\\r\\n  \\\"tenant_name\\\": \\\"string\\\",\\r\\n  \\\"acd_id\\\": 0,\\r\\n  \\\"ani\\\": \\\"string\\\",\\r\\n  \\\"ixn_id\\\": 0,\\r\\n  \\\"ans_agent_id\\\": 0,\\r\\n  \\\"agent_name\\\": \\\"string\\\",\\r\\n  \\\"call_date\\\": 0,\\r\\n  \\\"start_date\\\": 0,\\r\\n  \\\"end_date\\\": 0,\\r\\n  \\\"call_channel\\\": \\\"string\\\",\\r\\n  \\\"agent_group\\\": 0,\\r\\n  \\\"call_followup_flag\\\": \\\"string\\\",\\r\\n  \\\"call_followup_date\\\": 0,\\r\\n  \\\"call_followup_start_date\\\": 0,\\r\\n  \\\"call_followup_end_date\\\": 0,\\r\\n  \\\"call_type\\\": 0,\\r\\n  \\\"limit\\\": 0,\\r\\n  \\\"offset\\\": 0\\r\\n}\")\n  .asString();\n"
                },
                {
                  "lang": "NodeJs",
                  "source": "var request = require('request');\nvar options = {\n  'method': 'POST',\n  'url': 'http://172.16.30.171:9000/agentapi/v1.0/history/customer',\n  'headers': {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\"tenant_id\":0,\"tenant_code\":\"string\",\"tenant_name\":\"string\",\"acd_id\":0,\"ani\":\"string\",\"ixn_id\":0,\"ans_agent_id\":0,\"agent_name\":\"string\",\"call_date\":0,\"start_date\":0,\"end_date\":0,\"call_channel\":\"string\",\"agent_group\":0,\"call_followup_flag\":\"string\",\"call_followup_date\":0,\"call_followup_start_date\":0,\"call_followup_end_date\":0,\"call_type\":0,\"limit\":0,\"offset\":0})\n\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n"
                },
                {
                  "lang": "wget",
                  "source": "wget --no-check-certificate --quiet \\\n--method POST \\\n--timeout=0 \\\n--header 'Content-Type: application/json' \\\n--body-data '{\n\"tenant_id\": 0,\n\"tenant_code\": \"string\",\n\"tenant_name\": \"string\",\n\"acd_id\": 0,\n\"ani\": \"string\",\n\"ixn_id\": 0,\n\"ans_agent_id\": 0,\n\"agent_name\": \"string\",\n\"call_date\": 0,\n\"start_date\": 0,\n\"end_date\": 0,\n\"call_channel\": \"string\",\n\"agent_group\": 0,\n\"call_followup_flag\": \"string\",\n\"call_followup_date\": 0,\n\"call_followup_start_date\": 0,\n\"call_followup_end_date\": 0,\n\"call_type\": 0,\n\"limit\": 0,\n\"offset\": 0\n  }' \\\n'http://172.16.30.171:9000/agentapi/v1.0/history/customer'\n"
                }
              ]
            }
          },
          "/agent/records": {
            "post": {
              "description": "Agent status that are passed as parameteres from shared Memory ",
              "operationId": "Agent Records (SHM)",
              "requestBody": {
                "description": "",
                "required": true,
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/AgentRecordsRequest"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "Agent Followup Records",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/AgentRecordsReponse"
                      }
                    }
                  }
                }
              },
              "x-code-samples": [
                {
                  "lang": "Java",
                  "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.post(\"http://172.16.30.171:9000/agentapi/v1.0/agent/records\")\n  .header(\"Content-Type\", \"application/json\")\n  .body(\"{\\r\\n  \\\"tenant_id\\\": 0,\\r\\n  \\\"acd_id\\\": 0,\\r\\n  \\\"agent_ids\\\": [\\r\\n    0\\r\\n  ],\\r\\n  \\\"limit\\\": 0,\\r\\n  \\\"offset\\\": 0\\r\\n}\")\n  .asString();\n"
                },
                {
                  "lang": "NodeJs",
                  "source": "var request = require('request');\nvar options = {\n  'method': 'POST',\n  'url': 'http://172.16.30.171:9000/agentapi/v1.0/agent/records',\n  'headers': {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\"tenant_id\":0,\"acd_id\":0,\"agent_ids\":[0],\"limit\":0,\"offset\":0})\n\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n"
                },
                {
                  "lang": "wget",
                  "source": "wget --no-check-certificate --quiet \\\n--method POST \\\n--timeout=0 \\\n--header 'Content-Type: application/json' \\\n--body-data '{\n\"tenant_id\": 0,\n\"acd_id\": 0,\n\"agent_ids\": [\n  0\n],\n\"limit\": 0,\n\"offset\": 0\n  }' \\\n'http://172.16.30.171:9000/agentapi/v1.0/agent/records'\n"
                }
              ]
            }
          },
          "/lookupInteraction/{ixn}": {
            "get": {
              "description": "Retrieves interaction data",
              "operationId": "lookupInteraction (SHM)",
              "parameters": [
                {
                  "in": "path",
                  "name": "ixn",
                  "schema": {
                    "type": "integer"
                  },
                  "required": true,
                  "description": "ixn id"
                }
              ],
              "responses": {
                "200": {
                  "description": "Whole Data",
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object"
                      }
                    }
                  }
                }
              },
              "x-code-samples": [
                {
                  "lang": "Java",
                  "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.get(\"http://172.16.30.171:9000/agentapi/v1.0/lookupInteraction/1\")\n  .asString();\n"
                },
                {
                  "lang": "NodeJs",
                  "source": "var request = require('request');\nvar options = {\n  'method': 'GET',\n  'url': 'http://172.16.30.171:9000/agentapi/v1.0/lookupInteraction/1',\n  'headers': {\n  }\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n"
                },
                {
                  "lang": "wget",
                  "source": "wget --no-check-certificate --quiet \\\n--method GET \\\n--timeout=0 \\\n--header '' \\\n'http://172.16.30.171:9000/agentapi/v1.0/lookupInteraction/1\n"
                }
              ]
            }
          },
          "/history/lookup": {
            "post": {
              "description": "Retrieves lookup data as per SP",
              "operationId": "history Lookup",
              "requestBody": {
                "description": "Tenant, acd id, key1, value1 is required",
                "required": true,
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/HistoryLookupRequest"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "returns as the data returned by the Standard Procedure \"SP Name\"",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/HistoryLookupResponse"
                      }
                    }
                  }
                }
              },
              "x-code-samples": [
                {
                  "lang": "Java",
                  "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.post(\"http://172.16.30.171:9000/agentapi/v1.0//history/lookup\")\n  .header(\"Content-Type\", \"application/json\")\n  .body(\"{\\r\\n  \\\"tenant_id\\\": 0,\\r\\n  \\\"acd_id\\\": 0,\\r\\n  \\\"key1\\\": \\\"string\\\",\\r\\n  \\\"val1\\\": \\\"string\\\" \\r\\n}\")\n  .asString();\n"
                },
                {
                  "lang": "NodeJs",
                  "source": "var request = require('request');\nvar options = {\n  'method': 'POST',\n  'url': 'http://172.16.30.171:9000/agentapi/v1.0//history/lookup',\n  'headers': {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\"tenant_id\":0,\"acd_id\":0,\"key1\":\"string\",val1:\"string\"})\n    \n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n"
                },
                {
                  "lang": "wget",
                  "source": "wget --no-check-certificate --quiet \\\n--method POST \\\n--timeout=0 \\\n--header 'Content-Type: application/json' \\\n--body-data '{\n\"tenant_id\": 0,\n\"acd_id\": 0,\n\"key1\": \"string\",\n\"val1\": \"string\"\n  }' \\\n'http://172.16.30.171:9000/agentapi/v1.0//history/lookup'\n"
                }
              ]
            }
          },
          "/history/customeraccount": {
            "post": {
              "description": "Retrieves customer account history data from cust_journey DB view",
              "operationId": "Customer account history",
              "requestBody": {
                "description": "Search parameters are optional",
                "required": true,
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/HistoryCustomerAccountRequest"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "returns as the data queried from cust_journey db view",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/HistoryCustomerAccountResponse"
                      }
                    }
                  }
                }
              },
              "x-code-samples": [
                {
                  "lang": "Java",
                  "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.post(\"http://172.16.30.171:9000/agentapi/v1.0/history/customeraccount\")\n  .header(\"Content-Type\", \"application/json\")\n  .body(\"{\\r\\n  \\\"tenant_id\\\": 0,\\r\\n  \\\"acd_id\\\": 0,\\r\\n  \\\"limit\\\": 0,\\r\\n  \\\"offset\\\": 0,\\r\\n   \\\"ans_agent_id\\\": 0,\\r\\n   \\\"ani\\\": \\\"string\\\", \\r\\n   \\\"call_type\\\": 0, \\r\\n   \\\"guid\\\": \\\"string\\\", \\r\\n   \\\"dn\\\": 0, \\r\\n   \\\"start_time\\\": \\\"string\\\", \\r\\n   \\\"end_time\\\": \\\"string\\\", \\r\\n   \\\"agent_group\\\": 0, \\r\\n   \\\"value\\\": \\\"string\\\" \\r\\n}\")\n  .asString();\n"
                },
                {
                  "lang": "NodeJs",
                  "source": "var request = require('request');\nvar options = {\n  'method': 'POST',\n  'url': 'http://172.16.30.171:9000/agentapi/v1.0/history/customeraccount',\n  'headers': {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\"tenant_id\":0,\"acd_id\":0,\"limit\":0,\"offset\":0,\"ans_agent_id\":0,\"ani\":\"string\",\"call_type\":0,\"guid\":\"string\",\"dn\":0,\"start_time\":\"string\",\"end_time\":\"string\",\"agent_group\":0,\"value\":\"string\"})\n    \n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n"
                },
                {
                  "lang": "wget",
                  "source": "wget --no-check-certificate --quiet \\\n--method POST \\\n--timeout=0 \\\n--header 'Content-Type: application/json' \\\n--body-data '{\n\"tenant_id\": 0,\n\"acd_id\": 0,\n\"limit\": 0,\n\"offset\": 0,\n\"ans_agent_id\": 0,\n\"ani\": \"string\",\n\"call_type\": 0,\n\"guid\": \"string\",\n\"dn\": 0,\n\"start_time\": \"string\",\n\"end_time\": \"string\",\n\"agent_group\": 0,\n\"value\": \"string\"\n  }' \\\n'http://172.16.30.171:9000/agentapi/v1.0/history/customeraccount'\n"
                }
              ]
            }
          },
          "/history/parentixns": {
            "post": {
              "description": "Retrieves parent interaction history data from cust_journey DB view",
              "operationId": "Parent interactions history",
              "requestBody": {
                "description": "Search parameters are optional except accountid_value",
                "required": true,
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/GetParentInteractionsRequest"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "returns as the data queried from cust_journey db view",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/GetParentInteractionsResponse"
                      }
                    }
                  }
                }
              },
              "x-code-samples": [
                {
                  "lang": "Java",
                  "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.post(\"http://172.16.30.171:9000/agentapi/v1.0/history/parentixns\")\n  .header(\"Content-Type\", \"application/json\")\n  .body(\"{\\r\\n  \\\"tenant_id\\\": 0,\\r\\n  \\\"acd_id\\\": 0,\\r\\n  \\\"limit\\\": 0,\\r\\n  \\\"offset\\\": 0,\\r\\n   \\\"accountid_key\\\": \\\"string\\\", \\r\\n   \\\"accountid_value\\\": \\\"string\\\" \\r\\n}\")\n  .asString();\n"
                },
                {
                  "lang": "NodeJs",
                  "source": "var request = require('request');\nvar options = {\n  'method': 'POST',\n  'url': 'http://172.16.30.171:9000/agentapi/v1.0/history/parentixns',\n  'headers': {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\"tenant_id\":0,\"acd_id\":0,\"limit\":0,\"offset\":0,\"accountid_key\":\"string\",\"accountid_value\":\"string\"})\n    \n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n"
                },
                {
                  "lang": "wget",
                  "source": "wget --no-check-certificate --quiet \\\n--method POST \\\n--timeout=0 \\\n--header 'Content-Type: application/json' \\\n--body-data '{\n\"tenant_id\": 0,\n\"acd_id\": 0,\n\"limit\": 0,\n\"offset\": 0,\n\"accountid_key\": \"string\",\n\"accountid_value\": \"string\"\n  }' \\\n'http://172.16.30.171:9000/agentapi/v1.0/history/parentixns'\n"
                }
              ]
            }
          },
          "/history/childixns": {
            "post": {
              "description": "Get all child interactions and messages for given parent guid",
              "operationId": "Child interactions history",
              "requestBody": {
                "description": "Search parameter is required",
                "required": true,
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/GetChildInteractionsRequest"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "Returns list of records for child interaction messages and ixn data for each",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/GetChildInteractionsResponse"
                      }
                    }
                  }
                }
              },
              "x-code-samples": [
                {
                  "lang": "Java",
                  "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.post(\"http://172.16.30.171:9000/agentapi/v1.0/history/childixns\")\n  .header(\"Content-Type\", \"application/json\")\n  .body(\"{\\r\\n  \\\"parent_guid\\\": \\\"string\\\" \\r\\n}\")\n  .asString();\n"
                },
                {
                  "lang": "NodeJs",
                  "source": "var request = require('request');\nvar options = {\n  'method': 'POST',\n  'url': 'http://172.16.30.171:9000/agentapi/v1.0/history/childixns',\n  'headers': {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\"parent_guid\":\"string\"})\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n"
                },
                {
                  "lang": "wget",
                  "source": "wget --no-check-certificate --quiet \\\n--method POST \\\n--timeout=0 \\\n--header 'Content-Type: application/json' \\\n--body-data '{\n    \"parent_guid\": \"string\"\n }' \\\n'http://172.16.30.171:9000/agentapi/v1.0/history/childixns'\n"
                }
              ]
            }
          },
          "/agentstate": {
            "post": {
              "description": "Returns agent state on SHM",
              "operationId": "Agent state",
              "requestBody": {
                "description": "Agent, tenant and acd id is required",
                "required": true,
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/AgentStateRequest"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "Agent state",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/AgentStateResponse"
                      }
                    }
                  }
                }
              },
              "x-code-samples": [
                {
                  "lang": "Java",
                  "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.post(\"http://172.16.30.171:9000/agentapi/v1.0/agentstate\")\n  .header(\"Content-Type\", \"application/json\")\n  .body(\"{\\r\\n  \\\"tenant_id\\\": 0,\\r\\n  \\\"acd_id\\\": 0,\\r\\n  \\\"agent_id\\\": 0,\\r\\n}\")\n  .asString();\n"
                },
                {
                  "lang": "NodeJs",
                  "source": "var request = require('request');\nvar options = {\n  'method': 'POST',\n  'url': 'http://172.16.30.171:9000/agentapi/v1.0/agentstate',\n  'headers': {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\"tenant_id\":0,\"acd_id\":0,\"agent_id\":0})\n    \n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n"
                },
                {
                  "lang": "wget",
                  "source": "wget --no-check-certificate --quiet \\\n--method POST \\\n--timeout=0 \\\n--header 'Content-Type: application/json' \\\n--body-data '{\n\"tenant_id\": 0,\n\"acd_id\": 0,\n\"agent_id\": 0\n  }' \\\n'http://172.16.30.171:9000/agentapi/v1.0/agentstate' \n"
                }
              ]
            }
          },
          "/ixn": {
            "post": {
              "description": "Updates ixn information",
              "operationId": "IXN",
              "requestBody": {
                "description": "ID, tenant and parent_id",
                "required": true,
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/InteractionRequest"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "Agent state",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/InteractionResponse"
                      }
                    }
                  }
                }
              },
              "x-code-samples": [
                {
                  "lang": "Java",
                  "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.post(\"http://172.16.30.171:9000/agentapi/v1.0/ixn\")\n  .header(\"Content-Type\", \"application/json\")\n  .body(\"{\\r\\n    \\\"id\\\": 1,\\r\\n    \\\"parent_id\\\": 2,\\r\\n    \\\"tenant_id\\\": 0,\\r\\n    \\\"IXN_ACD_ATTRIBUTES\\\": [\\r\\n        {\\r\\n            \\\"key\\\": \\\"Key1\\\",\\r\\n            \\\"value\\\": \\\"Value1\\\"\\r\\n        }\\r\\n    ]\\r\\n}\")\n  .asString();\n"
                },
                {
                  "lang": "NodeJs",
                  "source": "var request = require('request');\nvar options = {\n  'method': 'POST',\n  'url': 'http://172.16.30.171:9000/agentapi/v1.0/ixn',\n  'headers': {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\"id\":1,\"parent_id\":2,\"tenant_id\":0,\"IXN_ACD_ATTRIBUTES\":[{\"key\":\"Key1\",\"value\":\"Value1\"}]})\n\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n"
                },
                {
                  "lang": "wget",
                  "source": "wget --no-check-certificate --quiet \\\n  --method POST \\\n  --timeout=0 \\\n  --header 'Content-Type: application/json' \\\n  --body-data '{\n    \"id\": 1,\n    \"parent_id\": 2,\n    \"tenant_id\": 0,\n    \"IXN_ACD_ATTRIBUTES\": [\n        {\n            \"key\": \"Key1\",\n            \"value\": \"Value1\"\n        }\n    ]\n}' \\\n  'http://172.16.30.171:9000/agentapi/v1.0/ixn'\n"
                }
              ]
            }
          },
          "/setparentguid/{ixn_id}": {
            "post": {
              "description": "Sets / Updates ixn parent guid",
              "operationId": "Set IXN Parent GUID (SHM)",
              "parameters": [
                {
                  "in": "path",
                  "name": "ixn_id",
                  "schema": {
                    "type": "integer"
                  },
                  "required": true,
                  "description": "ixn id"
                }
              ],
              "requestBody": {
                "description": "parent_guid",
                "required": true,
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/SetParentGUIDRequest"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "INX Object from SHM",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/SetParentGUIDResponse"
                      }
                    }
                  }
                }
              },
              "x-code-samples": [
                {
                  "lang": "Java",
                  "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.post(\"http://172.16.30.171:9000/agentapi/v1.0/setparentguid/{ixn_id}\")\n  .header(\"Content-Type\", \"application/json\")\n  .body(\"{\\r\\n    \\\"parent_guid\\\": \\\"string\\\"   \\r\\n}\")\n  .asString();\n"
                },
                {
                  "lang": "NodeJs",
                  "source": "var request = require('request');\nvar options = {\n  'method': 'POST',\n  'url': 'http://172.16.30.171:9000/agentapi/v1.0/setparentguid/{ixn_id}',\n  'headers': {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\"parent_guid\":\"string\"})\n\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n"
                },
                {
                  "lang": "wget",
                  "source": "wget --no-check-certificate --quiet \\\n  --method POST \\\n  --timeout=0 \\\n  --header 'Content-Type: application/json' \\\n  --body-data '{\n    \"parent_guid\": \"string\"\n}' \\\n  'http://172.16.30.171:9000/agentapi/v1.0/setparentguid/{ixn_id}'  \n"
                }
              ]
            }
          },
          "/getIxnData": {
            "post": {
              "description": "Gets ixn information",
              "operationId": "GetIxnData",
              "requestBody": {
                "description": "tenant_id, acd_id, ixn_id",
                "required": true,
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/getIxnData"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "Agent state",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/getIxnData"
                      }
                    }
                  }
                }
              },
              "x-code-samples": [
                {
                  "lang": "Java",
                  "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.post(\"http://172.16.30.171:9000/agentapi/v1.0/getIxnData\")\n  .header(\"Content-Type\", \"application/json\")\n  .body(\"{\\r\\n    \\\"tenant_id\\\": 1,\\r\\n    \\\"acd_id\\\": 2,\\r\\n    \\\"ixn_id\\\": 0}\")\n  .asString();\n"
                },
                {
                  "lang": "NodeJs",
                  "source": "var request = require('request');\nvar options = {\n  'method': 'POST',\n  'url': 'http://172.16.30.171:9000/agentapi/v1.0/getIxnData',\n  'headers': {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\"tenant_id\":1,\"acd_id\":2,\"ixn_id\":0})\n\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n"
                },
                {
                  "lang": "wget",
                  "source": "wget --no-check-certificate --quiet \\\n  --method POST \\\n  --timeout=0 \\\n  --header 'Content-Type: application/json' \\\n  --body-data '{\n    \"tenant_id\": 1,\n    \"acd_id\": 2,\n    \"ixn_id\": 0\n}' \\\n  'http://172.16.30.171:9000/agentapi/v1.0/getIxnData'  \n"
                }
              ]
            }
          },
          "/getassignedStation": {
            "post": {
              "description": "Check if the agent is logged in SHM, against some station id ",
              "operationId": "Assigned Station (SHM)",
              "requestBody": {
                "description": "",
                "required": true,
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/getAssignedStationRequest"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "Returns Assigned Station id",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/getAssignedStationReponse"
                      }
                    }
                  }
                }
              },
              "x-code-samples": [
                {
                  "lang": "Java",
                  "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.post(\"http://172.16.30.171:9000/agentapi/v1.0/getassignedStation\")\n  .header(\"Content-Type\", \"application/json\")\n  .body(\"{\\r\\n  \\\"tenant_id\\\": 0,\\r\\n  \\\"acd_id\\\": 0,\\r\\n  \\\"agent_id\\\": 0,\\r\\n}\")\n  .asString();\n"
                },
                {
                  "lang": "NodeJs",
                  "source": "var request = require('request');\nvar options = {\n  'method': 'POST',\n  'url': 'http://172.16.30.171:9000/agentapi/v1.0/getassignedStation',\n  'headers': {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\"tenant_id\":0,\"acd_id\":0,\"agent_id\":0})\n    \n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n"
                },
                {
                  "lang": "wget",
                  "source": "wget --no-check-certificate --quiet \\\n--method POST \\\n--timeout=0 \\\n--header 'Content-Type: application/json' \\\n--body-data '{\n\"tenant_id\": 0,\n\"acd_id\": 0,\n\"agent_id\": 0\n  }' \\\n'http://172.16.30.171:9000/agentapi/v1.0/getassignedStation'\n"
                }
              ]
            }
          },
          "/isstationinuse": {
            "post": {
              "description": "Check if the station is free in SHM or not ",
              "operationId": "Station In Use (SHM)",
              "requestBody": {
                "description": "",
                "required": true,
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/isstationinuseRequest"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "Returns if Station In Use or Not",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/isstationinuseReponse"
                      }
                    }
                  }
                }
              },
              "x-code-samples": [
                {
                  "lang": "Java",
                  "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.post(\"http://172.16.30.171:9000/agentapi/v1.0/isstationinuse\")\n  .header(\"Content-Type\", \"application/json\")\n  .body(\"{\\r\\n  \\\"tenant_id\\\": 0,\\r\\n  \\\"acd_id\\\": 0,\\r\\n  \\\"station_id\\\": 0,\\r\\n}\")\n  .asString();\n"
                },
                {
                  "lang": "NodeJs",
                  "source": "var request = require('request');\nvar options = {\n  'method': 'POST',\n  'url': 'http://172.16.30.171:9000/agentapi/v1.0/isstationinuse',\n  'headers': {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\"tenant_id\":0,\"acd_id\":0,\"station_id\":0})\n    \n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n"
                },
                {
                  "lang": "wget",
                  "source": "wget --no-check-certificate --quiet \\\n--method POST \\\n--timeout=0 \\\n--header 'Content-Type: application/json' \\\n--body-data '{\n\"tenant_id\": 0,\n\"acd_id\": 0,\n\"station_id\": 0\n  }' \\\n'http://172.16.30.171:9000/agentapi/v1.0/isstationinuse'\n"
                }
              ]
            }
          },
          "/getNextAvailableStation": {
            "post": {
              "description": "Check if next available station is not occupied ",
              "operationId": "Next Available Station (SHM)",
              "requestBody": {
                "description": "",
                "required": true,
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/getNextAvailableStationRequest"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "Returns next available station that is not occupied",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/getNextAvailableStationReponse"
                      }
                    }
                  }
                }
              },
              "x-code-samples": [
                {
                  "lang": "Java",
                  "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.post(\"http://172.16.30.171:9000/agentapi/v1.0/getNextAvailableStation\")\n  .header(\"Content-Type\", \"application/json\")\n  .body(\"{\\r\\n  \\\"tenant_id\\\": 0,\\r\\n  \\\"acd_id\\\": 0,\\r\\n}\")\n  .asString();\n"
                },
                {
                  "lang": "NodeJs",
                  "source": "var request = require('request');\nvar options = {\n  'method': 'POST',\n  'url': 'http://172.16.30.171:9000/agentapi/v1.0/getNextAvailableStation',\n  'headers': {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\"tenant_id\":0,\"acd_id\":0})\n    \n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n"
                },
                {
                  "lang": "wget",
                  "source": "wget --no-check-certificate --quiet \\\n--method POST \\\n--timeout=0 \\\n--header 'Content-Type: application/json' \\\n--body-data '{\n\"tenant_id\": 0,\n\"acd_id\": 0,\n  }' \\\n'http://172.16.30.171:9000/agentapi/v1.0/getNextAvailableStation'\n"
                }
              ]
            }
          },
          "/echi_records": {
            "get": {
              "description": "Retrieves ECHI table records",
              "operationId": "All ECHI table records (CRM)",
              "responses": {
                "200": {
                  "description": "Whole Data",
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/ECHIRecordItem"
                        }
                      }
                    }
                  }
                }
              },
              "x-code-samples": [
                {
                  "lang": "Java",
                  "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.get(\"http://172.16.30.171:9000/agentapi/v1.0/echi_records\")\n  .asString();\n"
                },
                {
                  "lang": "NodeJs",
                  "source": "var request = require('request');\nvar options = {\n  'method': 'GET',\n  'url': 'http://172.16.30.171:9000/agentapi/v1.0/echi_records',\n  'headers': {\n  }\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n"
                },
                {
                  "lang": "wget",
                  "source": "wget --no-check-certificate --quiet \\\n--method GET \\\n--timeout=0 \\\n--header '' \\\n'http://172.16.30.171:9000/agentapi/v1.0/echi_records\n"
                }
              ]
            },
            "post": {
              "description": "Retrieves ECHI table records",
              "operationId": "Filtered ECHI table records (CRM)",
              "requestBody": {
                "description": "tenant_id and acd_id is required",
                "required": true,
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ECHIRequest"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "Customer Interaction History Data",
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/ECHIRecordItem"
                        }
                      }
                    }
                  }
                }
              },
              "x-code-samples": [
                {
                  "lang": "Java",
                  "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.get(\"172.16.30.171:9080/v1.0/echi_records\")\n  .header(\"Content-Type\", \"application/json\")\n  .body(\"{\\r\\n    \\\"tenant_id\\\": 1,\\r\\n    \\\"acd_id\\\": 17,\\r\\n    \\\"segstart\\\":1,\\r\\n    \\\"dispvdn\\\":2,\\r\\n    \\\"dispsplit\\\":\\\"\\\"\\r\\n}\")\n  .asString();\n"
                },
                {
                  "lang": "NodeJs",
                  "source": "var request = require('request');\nvar options = {\n  'method': 'GET',\n  'url': '172.16.30.171:9080/v1.0/echi_records',\n  'headers': {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\"tenant_id\":1,\"acd_id\":17,\"segstart\":1,\"dispvdn\":2,\"dispsplit\":\"\"})\n\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n"
                },
                {
                  "lang": "wget",
                  "source": "wget --no-check-certificate --quiet \\\n  --method GET \\\n  --timeout=0 \\\n  --header 'Content-Type: application/json' \\\n  --body-data '{\n    \"tenant_id\": 1,\n    \"acd_id\": 17,\n    \"segstart\":1,\n    \"dispvdn\":2,\n    \"dispsplit\":\"\"\n  }' \\\n  '172.16.30.171:9080/v1.0/echi_records'\n"
                }
              ]
            }
          },
          "/acdr_records": {
            "get": {
              "description": "Retrieves ACDR table records",
              "operationId": "All ACDR table records (CRM)",
              "responses": {
                "200": {
                  "description": "Whole Data",
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/ACDRRecordItem"
                        }
                      }
                    }
                  }
                }
              },
              "x-code-samples": [
                {
                  "lang": "Java",
                  "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.get(\"http://172.16.30.171:9000/agentapi/v1.0/acdr_records\")\n  .asString();\n"
                },
                {
                  "lang": "NodeJs",
                  "source": "var request = require('request');\nvar options = {\n  'method': 'GET',\n  'url': 'http://172.16.30.171:9000/agentapi/v1.0/acdr_records',\n  'headers': {\n  }\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n"
                },
                {
                  "lang": "wget",
                  "source": "wget --no-check-certificate --quiet \\\n--method GET \\\n--timeout=0 \\\n--header '' \\\n'http://172.16.30.171:9000/agentapi/v1.0/acdr_records\n"
                }
              ]
            },
            "post": {
              "description": "Retrieves ACDR table records",
              "operationId": "Filter ACDR table records (CRM)",
              "requestBody": {
                "description": "tenant_id and acd_id is required",
                "required": true,
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ACDRRequest"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "Customer Interaction History Data",
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/ACDRRecordItem"
                        }
                      }
                    }
                  }
                }
              },
              "x-code-samples": [
                {
                  "lang": "Java",
                  "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.get(\"172.16.30.171:9080/v1.0/acdr_records\")\n  .header(\"Content-Type\", \"application/json\")\n  .body(\"{\\r\\n    \\\"tenant_id\\\": 1,\\r\\n    \\\"acd_id\\\": 17,\\r\\n    \\\"call_type\\\": 1234,\\r\\n    \\\"agent_group\\\": \\\"139\\\",\\r\\n    \\\"disp_time\\\": \\\"2018-02-14T06:01:39\\\"\\r\\n    \\\"start_time\\\":\\\"\\\",\\r\\n    \\\"end_time\\\":\\\"\\\"\\r\\n}\")\n  .asString();\n"
                },
                {
                  "lang": "NodeJs",
                  "source": "var request = require('request');\nvar options = {\n  'method': 'GET',\n  'url': '172.16.30.171:9080/v1.0/acdr_records',\n  'headers': {\n    'Content-Type': 'application/json'\n  },\n  body: \"{\\r\\n    \\\"tenant_id\\\": 1,\\r\\n    \\\"acd_id\\\": 17,\\r\\n    \\\"call_type\\\": 1234,\\r\\n    \\\"agent_group\\\": \\\"139\\\",\\r\\n    \\\"disp_time\\\": \\\"2018-02-14T06:01:39\\\"\\r\\n    \\\"start_time\\\":\\\"\\\",\\r\\n    \\\"end_time\\\":\\\"\\\"\\r\\n}\"\n\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n"
                },
                {
                  "lang": "wget",
                  "source": "wget --no-check-certificate --quiet \\\n  --method GET \\\n  --timeout=0 \\\n  --header 'Content-Type: application/json' \\\n  --body-data '{\n    \"tenant_id\": 1,\n    \"acd_id\": 17,\n    \"call_type\": 1234,\n    \"agent_group\": \"139\",\n    \"disp_time\": \"2018-02-14T06:01:39\"\n    \"start_time\":\"\",\n    \"end_time\":\"\"\n  }' \\\n  '172.16.30.171:9080/v1.0/acdr_records'\n"
                }
              ]
            }
          },
          "/getAccountDetails/{db_column}": {
            "get": {
              "description": "pull account data from account details table. the endpoint will return all matching data.",
              "operationId": "Get Account details",
              "parameters": [
                {
                  "in": "path",
                  "name": "db_column",
                  "schema": {
                    "type": "string"
                  },
                  "required": true,
                  "description": "One of \"accountname\", \"accountcode\",\"lob\",\"domain\""
                }
              ],
              "responses": {
                "200": {
                  "description": "Whole account data",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/AccountDetailsResponse"
                      }
                    }
                  }
                }
              },
              "x-code-samples": [
                {
                  "lang": "Java",
                  "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.get(\"http://172.16.30.171:9000/agentapi/v1.0/getAccountDetails\")\n  .asString();\n"
                },
                {
                  "lang": "NodeJs",
                  "source": "var request = require('request');\nvar options = {\n  'method': 'GET',\n  'url': 'http://172.16.30.171:9000/agentapi/v1.0/getAccountDetails',\n  'headers': {\n  }\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n"
                },
                {
                  "lang": "wget",
                  "source": "wget --no-check-certificate --quiet \\\n--method GET \\\n--timeout=0 \\\n--header '' \\\n'http://172.16.30.171:9000/agentapi/v1.0/getAccountDetails \n"
                }
              ]
            }
          },
          "/aggregateresult": {
            "post": {
              "description": "",
              "operationId": "Aggregate Result (SHM)",
              "requestBody": {
                "description": "",
                "required": true,
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/AggregateRecordsRequest"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "Agent Followup Records",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/AggregateRecordsResponse"
                      }
                    }
                  }
                }
              },
              "x-code-samples": [
                {
                  "lang": "Java",
                  "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.post(\"http://localhost:9080/v1.0/aggregateresults\")\n  .header(\"Content-Type\", \"application/json\")\n  .body(\"{\\r\\n  \\\"tenant_id\\\": 0,\\r\\n  \\\"acd_id\\\": 0,\\r\\n  \\\"ids\\\": [\\r\\n    0\\r\\n  ],\\r\\n  \\\"aggregate_type\\\": 0,\\r\\n  \\\"stat_type\\\": 0,\\r\\n  \\\"channel_type\\\": 0\\r\\n}\")\n  .asString();\n"
                },
                {
                  "lang": "NodeJs",
                  "source": "var request = require('request');\nvar options = {\n  'method': 'POST',\n  'url': 'http://localhost:9080/v1.0/aggregateresults',\n  'headers': {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\"tenant_id\":0,\"acd_id\":0,\"ids\":[0],\"aggregate_type\":0,\"stat_type\":0,\"channel_type\":0})\n\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n"
                },
                {
                  "lang": "wget",
                  "source": "wget --no-check-certificate --quiet \\\n--method POST \\\n--timeout=0 \\\n--header 'Content-Type: application/json' \\\n--body-data '{\n\"tenant_id\": 0,\n\"acd_id\": 0,\n\"ids\": [\n  0\n],\n\"aggregate_type\": 0,\n\"stat_type\": 0,\n\"channel_type\": 0\n  }' \\\n'http://localhost:9080/v1.0/aggregateresults'\n"
                }
              ]
            }
          },
          "/history/channelcount/combine": {
            "post": {
              "description": "Returns an agent's channel count from CDR DB Method",
              "operationId": "Combined History Channel Count Data",
              "requestBody": {
                "description": "Agent information",
                "required": true,
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/CombineHistoryCountRequest"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "Channel Count Response",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CombineHistoryCountResponse"
                      }
                    }
                  }
                }
              },
              "x-code-samples": [
                {
                  "lang": "Java",
                  "source": "Unirest.setTimeouts(0, 0);\n HttpResponse<String> response = Unirest.post(\"http://172.16.30.171:9000/agentapi/v1.0/history/channelcount/combine\")\n   .header(\"Content-Type\", \"application/json\")\n   .body(\"{\\r\\n\\\"tenant_id\\\": 0,\\r\\n\\\"start_time\\\": \\\"string\\\",\\r\\n\\\"end_time\\\": \\\"string\\\",\\r\\n\\\"acd_id\\\": 0,\\r\\n\\\"ans_agent_id\\\": 0,\\r\\n\\\"channel_id\\\": 0,\\r\\n\\\"call_followup_flag\\\": 0\\r\\n}\\r\\n\")\n   .asString();   \n"
                },
                {
                  "lang": "NodeJs",
                  "source": "var request = require('request');\nvar options = {\n  'method': 'POST',\n  'url': 'http://172.16.30.171:9000/agentapi/v1.0/history/channelcount/combine',\n  'headers': {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\"tenant_id\":0,\"start_time\":\"string\",\"end_time\":\"string\",\"acd_id\":0,\"ans_agent_id\":0,\"channel_id\":0,\"call_followup_flag\":0})\n\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n"
                },
                {
                  "lang": "wget",
                  "source": "wget --no-check-certificate --quiet \\\n--method POST \\\n--timeout=0 \\\n--header 'Content-Type: application/json' \\\n--body-data '{\n\"tenant_id\": 0,\n\"start_time\": \"string\",\n\"end_time\": \"string\",\n\"acd_id\": 0,\n\"ans_agent_id\": 0,\n\"channel_id\": 0,\n\"call_followup_flag\": 0\n}\n' \\\n  'http://172.16.30.171:9000/agentapi/v1.0/history/channelcount/combine'\n"
                }
              ]
            }
          },
          "/history/channelcount/customer": {
            "post": {
              "description": "Returns an agent's channel count from CDR DB Method",
              "operationId": "Customer IXN History Channel Count Data",
              "requestBody": {
                "description": "Agent information",
                "required": true,
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/CustomerIXNHistoryCountRequest"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "Channel Count Response",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/CustomerIXNHistoryCountResponse"
                      }
                    }
                  }
                }
              },
              "x-code-samples": [
                {
                  "lang": "Java",
                  "source": "Unirest.setTimeouts(0, 0);\n HttpResponse<String> response = Unirest.post(\"http://172.16.30.171:9000/agentapi/v1.0/history/channelcount/customer\")\n   .header(\"Content-Type\", \"application/json\")\n   .body(\"{\\r\\n\\\"tenant_id\\\": 0,\\r\\n\\\"start_time\\\": \\\"string\\\",\\r\\n\\\"end_time\\\": \\\"string\\\",\\r\\n\\\"acd_id\\\": 0,\\r\\n\\\"ans_agent_id\\\": 0,\\r\\n\\\"call_channel\\\": \\\"string\\\",\\r\\n\\\"call_followup_flag\\\": 0\\r\\n}\\r\\n\")\n   .asString();   \n"
                },
                {
                  "lang": "NodeJs",
                  "source": "var request = require('request');\nvar options = {\n  'method': 'POST',\n  'url': 'http://172.16.30.171:9000/agentapi/v1.0/history/channelcount/customer',\n  'headers': {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\"tenant_id\":0,\"start_time\":\"string\",\"end_time\":\"string\",\"acd_id\":0,\"ans_agent_id\":0,\"call_channel\":\\\"string\\\",\"call_followup_flag\":0})\n\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n"
                },
                {
                  "lang": "wget",
                  "source": "wget --no-check-certificate --quiet \\\n--method POST \\\n--timeout=0 \\\n--header 'Content-Type: application/json' \\\n--body-data '{\n\"tenant_id\": 0,\n\"start_time\": \"string\",\n\"end_time\": \"string\",\n\"acd_id\": 0,\n\"ans_agent_id\": 0,\n\"call_channel\": \"string\",\n\"call_followup_flag\": 0\n}\n' \\\n  'http://172.16.30.171:9000/agentapi/v1.0/history/channelcount/customer'\n"
                }
              ]
            }
          },
          "/ams": {
            "post": {
              "description": "The AMS command WebSocket defines a way to get responses from the AMS by making a RESTful call to Mega Agent API. For this, the client has to provide an HTTP POST Request or JSON Payload to the Mega Agent API. The Mega Agent API will then parse the request internally. After processing, the Mega Agent API will send a response to the client on HTTP via the POST call to the webhook URL that includes the data received from the AMS.\n\nAdditionally, if the client provides a valid WebSocket client ID in the HTTP POST Request, the Mega Agent API will also provide a response over that WebSocket with that client ID in addition to the WebSocket URL. To receive a WebSocket Response, the WebSocket client ID must be valid.\n\n## Command WebSocket Payload\n\nTo make use of the Command WebSocket Payload, the client has to configure their Web Server to register for command WebSocket Payload and provide us the Uniform Resource Locators (URLs). To register the URL, the client has to send us a request. A sample request body is given below:\n\n```\nJSON Payload\n{\n  \"agent_id\": 100,\n  \"ixn_id\": 101,\n  \"op_type\": \"response\",\n  \"operation\": \"tfs_agent_login\",\n  \"password\": \"123\",\n  \"station_id\": 101,\n  \"tenant_id\": 0,\n  \"client_id\": \"4B9D7C544B5D49F3867E2F8FB4442774\",\n}\n```\n\n## Agent AMS Commands\n\nTo enable the Mega Agent API to capture the HTTP POST requests JSON Payload, sent through client, the following is a list of AMS command websocket, exposed via the \"/ams/tfs_agent_command\" endpoint, that client will have to integrate at its end with POST method:\n\nFor these AMS command webocket to work, the client must define **op_type = \"response\"** in this HTTP Request.\n\n**Important Note**\n```\nHere a client refers to User Interface, any other system or service, or third-party software that initiates the HTTP Request.\n```\n\n### Agent Login\n\nThe **\"tfs_agent_login\"** operation allows the client to send this command to AMS. It is used to request agent login by the client.\n\n### Agent Logout\n\nThe **\"tfs_agent_logout\"** operation allows the client to send this command to AMS. It is used to request agent log out by the client. \n\nwhenever an Agent logs out through the UI.\n\n### Agent On Break\n\nThe **\"tfs_agent_on_break\"** operation allows the client to send this command to AMS. It is used to request agent rest break time between the calls by the client.\n\n### Agent Auto In\n\nThe **\"tfs_agent_auto_in\"** operation allows the client to send this command to AMS. It is used to request attend/accept calls right after agent login by the client. Note that the Agent can auto in only if this facility is available to him at the time of Agent configuration.\n\n### Agent Manual In\n\nThe **\"tfs_agent_manual_in\"** operation allows the client to send this command to AMS. It is used to manually enable the Agent to attend/accept the calls by the client while on break or \"call not accept\" state previously.\n\n### Agent On ACW(After Call Work)\n\nThe **\"tfs_agent_on_ocw\"** operation allows the client to send this command to AMS. It is used to request call wind-up process when the call is about to end by the client.\n\n### Agent Registration\n\nThe **\"tfs_register_agent_id\"** operation allows the client to send this command to AMS. It is used to request \"register all AMS events\" in Mega Agent API for the Agent by the client.\n\n### Force Logout\n\nThe **\"wss_agent_force_logout\"** operation allows the client to send this command to AMS. It is used when for some reason agent cannot logout or a state error occurred. \n\nA sample response body for command is given below:\n\n```\nJson Response\n{\n  \"agent_id\" : 100,\n  \"current_state\" : 3,\n  \"current_state_return_code\" : 1,\n  \"guid\" : \"789123\",\n  \"ixn_id\" : 101,\n  \"op_type\" : \"response\",\n  \"operation\" : \"tfs_agent_login\",\n  \"pending_state\" : 4,\n  \"pending_state_return_code\" : 2,\n  \"station_id\" : 2000,\n  \"tenant_id\" : 0\n}\n```\n\n## AMS Command WebSocket Response Status Codes\n\nHTTP response status codes indicate whether a specific HTTP request has been successfully completed. Responses are grouped in five classes:\n\n1. Informational responses (100-199)\n2. Successful responses (200-299)\n3. Redirects (300-399)\n4. Client errors (400-499)\n5. Server errors (500-599)\n\nCurrently, for AMS Command WebSocket, we provide response status codes that fall in successful responses, client errors, and server errors. The resource describing the result of the action is transmitted in the message body.\n\n|    | Code  | Description | Actual Message |\n| ---| ----------- | ----------- | -------------- |\n| 1  | 400 (Bad Request) | The TFS could not understand the HTTP Request due to invalid syntax/format | Body is not well formed in Json! |\n| 2  | 400 (Bad Request) | The TFS could not parse and query the JSON Request body due to some internal error | Error parsing JSON for TFS request: operation = \" + \"op_name\" |\n| 3  | 500 (Internal Server Error) | The TFS has encountered a situation it doesn't know how to handle | Error sending Command: operation = \" + \"op_name\" |\n| 4  | 200 (OK) | Everything went well for the command webhook | Command Successfully Sent to Feature Server for TFS request: operation = \" + \"op_name\" |\n",
              "operationId": "AMS Command WebSocket",
              "requestBody": {
                "description": "Below, you can find detailed information on each attribute within the JSON Payload request body.",
                "required": true,
                "content": {
                  "application/json": {
                    "schema": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/WSAMSRequest"
                        }
                      ]
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "Response types from Websocket in JSON bodies, WSCommandAPIResponse came before all command requests",
                  "content": {
                    "application/json": {
                      "schema": {
                        "oneOf": [
                          {
                            "$ref": "#/components/schemas/WSAMSAlertResponse"
                          },
                          {
                            "$ref": "#/components/schemas/WSAMSCommandResponse"
                          },
                          {
                            "$ref": "#/components/schemas/WSCommandAPIResponse"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "/efs": {
            "post": {
              "description": "'This is an efs Websocket endpoint, connect ws://IP:9080/wsconnect for messages'\nWhen connection is made A UUID is returned as connection id, that is expected to be sent with every consecutive request to Mega Agent API over Web Socket. \n",
              "operationId": "EFS Websocket interface",
              "requestBody": {
                "description": "Request body is JSON format",
                "required": true,
                "content": {
                  "application/json": {
                    "schema": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/WSEFSRequest"
                        }
                      ]
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "Response types from Websocket in JSON bodies, WSCommandAPIResponse came before all command requests",
                  "content": {
                    "application/json": {
                      "schema": {
                        "oneOf": [
                          {
                            "$ref": "#/components/schemas/WSEFSCommandResponse"
                          },
                          {
                            "$ref": "#/components/schemas/WSEFSAlertResponse"
                          },
                          {
                            "$ref": "#/components/schemas/WSCommandAPIResponse"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "/cfs": {
            "post": {
              "description": "'This is an cfs Websocket endpoint, connect ws://IP:9080/wsconnect for messages'\nWhen then connection is made A UUID is returned as connection id, that is expected to be sent with every consecutive request to Mega Agent API over Web Socket. \n",
              "operationId": "CFS Websocket interface",
              "requestBody": {
                "description": "Request body is JSON format",
                "required": true,
                "content": {
                  "application/json": {
                    "schema": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/WSCFSRequest"
                        }
                      ]
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "Response types from Websocket in JSON bodies, WSCommandAPIResponse came before all command requests",
                  "content": {
                    "application/json": {
                      "schema": {
                        "oneOf": [
                          {
                            "$ref": "#/components/schemas/WSCFSCommandResponse"
                          },
                          {
                            "$ref": "#/components/schemas/WSCFSAlertResponse"
                          },
                          {
                            "$ref": "#/components/schemas/WSCommandAPIResponse"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "/WhatsappMfs": {
            "post": {
              "description": "'This is an whatsappMfs Websocket endpoint, connect ws://IP:9080/wsconnect for messages'\nWhen then connection is made A UUID is returned as connection id, that is expected to be sent with every consecutive request to Mega Agent API over Web Socket. \n",
              "operationId": "whatsappMfs Websocket interface",
              "requestBody": {
                "description": "Request body is JSON format",
                "required": true,
                "content": {
                  "application/json": {
                    "schema": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/WSWhatsappMfsRequest"
                        }
                      ]
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "Response types from Websocket in JSON bodies, WSCommandAPIResponse came before all command requests",
                  "content": {
                    "application/json": {
                      "schema": {
                        "oneOf": [
                          {
                            "$ref": "#/components/schemas/WSWhatsappMfsAlertResponse"
                          },
                          {
                            "$ref": "#/components/schemas/WSWhatsappMfsCommandResponse"
                          },
                          {
                            "$ref": "#/components/schemas/WSCommandAPIResponse"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "/SmsMfs": {
            "post": {
              "description": "'This is an smsMfs Websocket endpoint, connect ws://IP:9080/wsconnect for messages'\nWhen then connection is made A UUID is returned as connection id, that is expected to be sent with every consecutive request to Mega Agent API over Web Socket. \n",
              "operationId": "smsMfs Websocket interface",
              "requestBody": {
                "description": "Request body is JSON format",
                "required": true,
                "content": {
                  "application/json": {
                    "schema": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/WSSmsMfsRequest"
                        }
                      ]
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "Response types from Websocket in JSON bodies, WSCommandAPIResponse came before all command requests",
                  "content": {
                    "application/json": {
                      "schema": {
                        "oneOf": [
                          {
                            "$ref": "#/components/schemas/WSSmsMfsAlertResponse"
                          },
                          {
                            "$ref": "#/components/schemas/WSSmsMfsCommandResponse"
                          },
                          {
                            "$ref": "#/components/schemas/WSCommandAPIResponse"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "/MessengerMfs": {
            "post": {
              "description": "'This is an messengerMfs Websocket endpoint, connect ws://IP:9080/wsconnect for messages'\nWhen then connection is made A UUID is returned as connection id, that is expected to be sent with every consecutive request to Mega Agent API over Web Socket. \n",
              "operationId": "messengerMfs Websocket interface",
              "requestBody": {
                "description": "Request body is JSON format",
                "required": true,
                "content": {
                  "application/json": {
                    "schema": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/WSMessengerMfsRequest"
                        }
                      ]
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "description": "Response types from Websocket in JSON bodies, WSCommandAPIResponse came before all command requests",
                  "content": {
                    "application/json": {
                      "schema": {
                        "oneOf": [
                          {
                            "$ref": "#/components/schemas/WSMessengerMfsAlertResponse"
                          },
                          {
                            "$ref": "#/components/schemas/WSMessengerMfsCommandResponse"
                          },
                          {
                            "$ref": "#/components/schemas/WSCommandAPIResponse"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "components": {
          "schemas": {
            "MFSAgentCommandsRequest": {
              "type": "object",
              "properties": {
                "client_id": {
                  "type": "string"
                },
                "callbackURL": {
                  "type": "string"
                },
                "agent_id": {
                  "type": "integer"
                },
                "tenant_id": {
                  "type": "integer"
                },
                "ixn_id": {
                  "type": "integer"
                },
                "op_type": {
                  "type": "string",
                  "description": "response"
                },
                "subscription": {
                  "type": "boolean"
                },
                "operation": {
                  "type": "string",
                  "description": "  One of below: - smfs_apple_agent_initiated_reply - smfs_apple_agent_initiated - smfs_apple_agent_reply - smfs_apple_agent_retrieve_history - smfs_apple_terminate_ixn - smfs_apple_mark_spam - smfs_apple_unmark_spam - smfs_messenger_agent_initiated_reply - smfs_messenger_agent_initiated - smfs_messenger_agent_reply - smfs_messenger_terminate_ixn - smfs_messenger_retrieve_history_request - smfs_messenger_mark_spam - smfs_messenger_unmark_spam - smfs_messenger_register_agent_id - smfs_sms_agent_initiated_reply - smfs_sms_agent_initiated - smfs_sms_agent_reply - smfs_sms_agent_retrieve_history - smfs_sms_terminate_ixn - smfs_sms_mark_spam - smfs_sms_unmark_spam - smfs_whatsapp_agent_initiated_reply - smfs_whatsapp_agent_initiated - smfs_whatsapp_agent_reply - smfs_whatsapp_agent_retrieve_history - smfs_whatsapp_terminate_ixn - smfs_whatsapp_mark_spam - smfs_whatsapp_unmark_spam - smfs_reassign_agent_ixn "
                },
                "to": {
                  "type": "string"
                },
                "dn": {
                  "type": "integer"
                },
                "str_data": {
                  "type": "string"
                },
                "msg_id": {
                  "type": "string"
                },
                "from": {
                  "type": "string"
                },
                "limit": {
                  "type": "integer"
                },
                "offset": {
                  "type": "integer"
                },
                "type": {
                  "type": "integer",
                  "description": " - text = 0 - multimedia = 1 - location = 2 - contact = 3 "
                },
                "parent_msg_id": {
                  "type": "string"
                },
                "result": {
                  "type": "integer",
                  "description": " - success = 0  - failure = 1 "
                },
                "timestamp": {
                  "type": "integer",
                  "format": "int64"
                }
              },
              "required": [
                "client_id",
                "callbackURL",
                "agent_id",
                "ixn_id",
                "operation"
              ]
            },
            "MFSAgentCommandsResponse": {
              "type": "object",
              "properties": {
                "guid": {
                  "type": "string"
                },
                "station_id": {
                  "type": "integer",
                  "format": "int64"
                },
                "tenant_id": {
                  "type": "integer",
                  "format": "int64"
                },
                "ixn_id": {
                  "type": "integer",
                  "format": "int64"
                },
                "op_type": {
                  "type": "string",
                  "description": "response"
                },
                "operation": {
                  "type": "string",
                  "description": "  One of below: - smfs_apple_agent_initiated_reply - smfs_apple_agent_initiated - smfs_apple_agent_reply - smfs_apple_agent_retrieve_history - smfs_apple_terminate_ixn - smfs_apple_mark_spam - smfs_apple_unmark_spam - smfs_messenger_agent_initiated_reply - smfs_messenger_agent_initiated - smfs_messenger_agent_reply - smfs_messenger_terminate_ixn - smfs_messenger_retrieve_history_request - smfs_messenger_mark_spam - smfs_messenger_unmark_spam - smfs_messenger_register_agent_id - smfs_sms_agent_initiated_reply - smfs_sms_agent_initiated - smfs_sms_agent_reply - smfs_sms_agent_retrieve_history - smfs_sms_terminate_ixn - smfs_sms_mark_spam - smfs_sms_unmark_spam - smfs_whatsapp_agent_initiated_reply - smfs_whatsapp_agent_initiated - smfs_whatsapp_agent_reply - smfs_whatsapp_agent_retrieve_history - smfs_whatsapp_terminate_ixn - smfs_whatsapp_mark_spam - smfs_whatsapp_unmark_spam - smfs_reassign_agent_ixn "
                },
                "agent_id": {
                  "type": "integer"
                }
              }
            },
            "MFSAgentAlertsRequest": {
              "type": "object",
              "properties": {
                "client_id": {
                  "type": "string"
                },
                "callbackURL": {
                  "type": "string"
                },
                "tenant_id": {
                  "type": "integer"
                },
                "ixn_id": {
                  "type": "integer"
                },
                "op_type": {
                  "type": "string",
                  "description": "alert"
                },
                "subscription": {
                  "type": "string"
                },
                "operation": {
                  "type": "string",
                  "description": "  One of below: - smfs_apple_customer_initiated - smfs_apple_escalation - smfs_apple_customer_reply - smfs_apple_message_status - smfs_apple_child_initiated_response - smfs_messenger_customer_initiated - smfs_messenger_customer_reply - smfs_messenger_message_status - smfs_messenger_retrieve_history_response - smfs_messenger_child_initiated_response - smfs_sms_customer_initiated - smfs_sms_escalation - smfs_sms_customer_reply - smfs_sms_message_status - smfs_sms_child_initiated_response - smfs_whatsapp_customer_initiated - smfs_whatsapp_escalation - smfs_whatsapp_customer_reply - smfs_whatsapp_message_status - smfs_whatsapp_child_initiated_response - smfs_messenger_escalation "
                },
                "agent_id": {
                  "type": "integer"
                }
              },
              "required": [
                "client_id",
                "callbackURL",
                "agent_id",
                "ixn_id",
                "operation"
              ]
            },
            "MFSAgentAlertsResponse": {
              "type": "object",
              "properties": {
                "agent_group": {
                  "type": "integer",
                  "format": "int64"
                },
                "agent_id": {
                  "type": "integer"
                },
                "call_ani": {
                  "type": "string"
                },
                "call_type": {
                  "type": "integer"
                },
                "call_uui": {
                  "type": "string"
                },
                "channel": {
                  "type": "string"
                },
                "code": {
                  "type": "integer",
                  "description": "http error code"
                },
                "cust_name": {
                  "type": "string"
                },
                "from": {
                  "type": "string"
                },
                "guid": {
                  "type": "integer",
                  "format": "int64"
                },
                "ixn_id": {
                  "type": "integer"
                },
                "op_type": {
                  "type": "string",
                  "description": "alert"
                },
                "operation": {
                  "type": "string",
                  "description": "  One of below: - smfs_apple_customer_initiated - smfs_apple_escalation - smfs_apple_customer_reply - smfs_apple_message_status - smfs_apple_child_initiated_response - smfs_messenger_customer_initiated - smfs_messenger_customer_reply - smfs_messenger_message_status - smfs_messenger_retrieve_history_response - smfs_messenger_child_initiated_response - smfs_sms_customer_initiated - smfs_sms_escalation - smfs_sms_customer_reply - smfs_sms_message_status - smfs_sms_child_initiated_response - smfs_whatsapp_customer_initiated - smfs_whatsapp_escalation - smfs_whatsapp_customer_reply - smfs_whatsapp_message_status - smfs_whatsapp_child_initiated_response - smfs_messenger_escalation "
                },
                "parentGuid": {
                  "type": "string"
                },
                "picUrl": {
                  "type": "string"
                },
                "profileName": {
                  "type": "string"
                },
                "queue_time": {
                  "type": "integer",
                  "format": "int64"
                },
                "tenant_id": {
                  "type": "integer"
                },
                "tfn": {
                  "type": "string"
                },
                "transfer": {
                  "type": "string"
                },
                "attachment": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string"
                      },
                      "url": {
                        "type": "string"
                      },
                      "id": {
                        "type": "integer"
                      }
                    }
                  }
                },
                "msg_id": {
                  "type": "string"
                },
                "parent_msg_id": {
                  "type": "string"
                },
                "str_data": {
                  "type": "string"
                },
                "timestamp": {
                  "type": "integer",
                  "format": "int64"
                },
                "type": {
                  "type": "integer",
                  "description": " - text = 0 - multimedia = 1 - location = 2 - contact = 3 "
                },
                "status": {
                  "type": "integer",
                  "description": " - error = 0 - sent = 1 - delivered = 2 - seen = 3 "
                },
                "source": {
                  "type": "string"
                }
              }
            },
            "EFSAgentCommandsRequest": {
              "type": "object",
              "properties": {
                "client_id": {
                  "type": "string"
                },
                "callbackURL": {
                  "type": "string"
                },
                "tenant_id": {
                  "type": "integer",
                  "format": "int64"
                },
                "ixn_id": {
                  "type": "integer",
                  "format": "int64"
                },
                "op_type": {
                  "type": "string",
                  "description": "response"
                },
                "subscription": {
                  "type": "boolean"
                },
                "station_id": {
                  "type": "integer",
                  "format": "int64"
                },
                "operation": {
                  "type": "string",
                  "description": "  One of below: - efs_email_available_ack - efs_register_agent_id - efs_patch_email_entry - efs_patch_email_attributes - efs_fetch_email - efs_fetch_email_on_guid - efs_fetch_email_on_acd_ixn_id - efs_fetch_raw_email - efs_init_send_response_email - efs_init_send_new_email - efs_send_response_email - efs_reassign_agent - efs_ring_event_response "
                },
                "agent_id": {
                  "type": "integer"
                }
              },
              "required": [
                "client_id",
                "callbackURL",
                "agent_id",
                "ixn_id",
                "operation"
              ]
            },
            "EFSAgentCommandsResponse": {
              "type": "object",
              "properties": {
                "guid": {
                  "type": "string"
                },
                "station_id": {
                  "type": "integer",
                  "format": "int64"
                },
                "tenant_id": {
                  "type": "integer",
                  "format": "int64"
                },
                "ixn_id": {
                  "type": "integer",
                  "format": "int64"
                },
                "op_type": {
                  "type": "string",
                  "description": "response"
                },
                "operation": {
                  "type": "string",
                  "description": "  One of below: - efs_email_available_ack - efs_register_agent_id - efs_patch_email_entry - efs_patch_email_attributes - efs_fetch_email - efs_fetch_email_on_guid - efs_fetch_email_on_acd_ixn_id - efs_fetch_raw_email - efs_init_send_response_email - efs_init_send_new_email - efs_send_response_email - efs_reassign_agent - efs_ring_event_response "
                },
                "agent_id": {
                  "type": "integer"
                }
              }
            },
            "EFSAgentAlertsRequest": {
              "type": "object",
              "properties": {
                "client_id": {
                  "type": "string"
                },
                "callbackURL": {
                  "type": "string"
                },
                "tenant_id": {
                  "type": "integer",
                  "format": "int64"
                },
                "ixn_id": {
                  "type": "integer",
                  "format": "int64"
                },
                "op_type": {
                  "type": "string",
                  "description": "alert"
                },
                "subscription": {
                  "type": "boolean"
                },
                "operation": {
                  "type": "string",
                  "description": "  One of below: - efs_terminate_ixn - efs_agent_reassigned - efs_email_available - efs_ringing_event - efs_error_event - efs_email_sent "
                },
                "agent_id": {
                  "type": "integer"
                }
              },
              "required": [
                "client_id",
                "callbackURL",
                "agent_id",
                "ixn_id",
                "operation"
              ]
            },
            "EFSAgentAlertsResponse": {
              "type": "object",
              "properties": {
                "guid": {
                  "type": "string"
                },
                "station_id": {
                  "type": "integer",
                  "format": "int64"
                },
                "tenant_id": {
                  "type": "integer",
                  "format": "int64"
                },
                "ixn_id": {
                  "type": "integer",
                  "format": "int64"
                },
                "op_type": {
                  "type": "string",
                  "description": "alert"
                },
                "operation": {
                  "type": "string",
                  "description": "  One of below: - efs_terminate_ixn - efs_agent_reassigned - efs_email_available - efs_ringing_event - efs_error_event - efs_email_sent "
                },
                "agent_id": {
                  "type": "integer"
                }
              }
            },
            "TFSAgentCommandsRequest": {
              "type": "object",
              "properties": {
                "client_id": {
                  "type": "string",
                  "description": "A valid client WebSocket token to get a response over the client's WebSocket connection.\n"
                },
                "callbackURL": {
                  "type": "string",
                  "description": "The callback URL with an open IP:PORT, on which, the Mega Agent API will send back the HTTP POST Response for the HTTP POST Request initiated by the client\n"
                },
                "tenant_id": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The client tenant ID\n"
                },
                "ixn_id": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The interaction ID"
                },
                "op_type": {
                  "type": "string",
                  "description": "This must always be \\\"response\\\" in this endpoint. (to be removed later as it is a constant.)\n"
                },
                "password": {
                  "type": "string",
                  "description": "The password of the agent account."
                },
                "station_id": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The ID of the station the agent is currently using/logged in.\nRequired when using the login command.\n"
                },
                "operation": {
                  "type": "string",
                  "description": "Provide any one of the AMS command value given below:\n- tfs_agent_login\n- tfs_agent_logout\n- tfs_agent_on_break\n- tfs_agent_auto_in\n- tfs_agent_manual_in\n- tfs_agent_on_acw\n- tfs_register_agent_id\n- wss_agent_force_logout\n"
                },
                "agent_id": {
                  "type": "integer",
                  "description": "The agent ID generated and returned by the SHM at the time an Agent is configured by the client. \nThis agent ID will not change throughout the lifetime of the tenant ID for that particular Agent\n"
                }
              },
              "required": [
                "callbackURL",
                "tenant_id",
                "op_type",
                "operation",
                "agent_id"
              ]
            },
            "TFSAgentCommandsResponse": {
              "type": "object",
              "properties": {
                "cur_state": {
                  "type": "integer",
                  "enum": [
                    -1,
                    0,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8
                  ],
                  "description": "The current Agent state sent based on the available enums:\n-1=AS_UNKNOWN\n0=AS_Idle\n1=AS_Break\n2=AS_Ring\n3=AS_Talk\n4=AS_Wrap\n5=AS_Other\n6=AS_Hold\n7=AS_Login\n8=AS_Logout\n"
                },
                "current_state_return_code": {
                  "type": "integer",
                  "description": "A code to identify current state change by AMS."
                },
                "guid": {
                  "type": "string",
                  "description": "Universal ID (Globally unique identifier) of an interaction"
                },
                "pending_state": {
                  "type": "integer",
                  "enum": [
                    -1,
                    0,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8
                  ],
                  "description": "The queued state (based on the available enums) for the Agent to be changed in case the Agent is still in the current state.\nAfter the Agent is done with the current state, it will be replaced with this pending state.\n-1=AS_UNKNOWN\n0=AS_Idle\n1=AS_Break\n2=AS_Ring\n3=AS_Talk\n4=AS_Wrap\n5=AS_Other\n6=AS_Hold\n7=AS_Login\n8=AS_Logout\n"
                },
                "pending_state_return_code": {
                  "type": "integer",
                  "description": "A code to identify pending state change by AMS."
                },
                "station_id": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The ID of the station the agent is currently using/logged in"
                },
                "tenant_id": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The client tenant ID"
                },
                "ixn_id": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The interaction ID"
                },
                "op_type": {
                  "type": "string",
                  "description": "indicate that it was a command response type. Will always be \\\"response in this case\\\". \nWill be removed later as it is always a constant in this end point.\n"
                },
                "operation": {
                  "type": "string",
                  "description": "The AMS command that was sent by client in the HTTP POST Request.:\n- tfs_agent_login\n- tfs_agent_logout\n- tfs_agent_on_break\n- tfs_agent_auto_in\n- tfs_agent_manual_in\n- tfs_agent_on_acw\n- tfs_register_agent_id\n- wss_agent_force_logout\n"
                },
                "agent_id": {
                  "type": "integer",
                  "description": "The agent ID generated and returned by the SHM at the time an Agent is configured by the client. \nThis agent ID will not change throughout the lifetime of the tenant ID for that particular Agent.\n"
                }
              }
            },
            "TFSAgentAlertsRequest": {
              "type": "object",
              "properties": {
                "client_id": {
                  "type": "string",
                  "description": "A valid client WebSocket token to get a response over the client's WebSocket connection"
                },
                "callbackURL": {
                  "type": "string",
                  "description": "The callback URL with an open IP:PORT, on which, the Mega Agent API will send back the HTTP POST request with the event data for which the Request was initiated by the client."
                },
                "tenant_id": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The client tenant ID"
                },
                "ixn_id": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The interaction ID"
                },
                "op_type": {
                  "type": "string",
                  "description": "A constant value \\\"alert\\\" for the endpoint. \nLater, this will be removed.\n"
                },
                "subscription": {
                  "type": "boolean",
                  "description": "Possible values:\nTRUE\nFALSE\nIf the value set is TRUE, the client will be registered for the event defined in the operation field. See AMS Events for more information.\nIf the value set is FALSE, the client will be unsubscribed for the event defined in the operation field.\n"
                },
                "operation": {
                  "type": "string",
                  "description": "TFS event value.\nProvide any one of the TFS event value given below:\n- tfs_call_initiated\n- tfs_call_originated\n- tfs_call_ringing\n- tfs_call_connected\n- tfs_call_terminated\n- tfs_call_ring_no_answer\n- tfs_call_merged\n- tfs_endpoint_not_found\n- tfs_tcp_disconnection\n- tfs_call_not_acceptable\n- tfs_call_held\n- tfs_call_resume\n"
                },
                "agent_id": {
                  "type": "integer",
                  "description": "The agent ID generated and returned by the SHM at the time an Agent is configured by the client. \nThis agent ID will not change throughout the lifetime of the tenant ID for that particular Agent\n"
                }
              },
              "required": [
                "client_id",
                "callbackURL",
                "ixn_id",
                "operation",
                "agent_id"
              ]
            },
            "TFSAgentAlertsResponse": {
              "type": "object",
              "properties": {
                "agent_group": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The skill group to which the Agent belongs to.\n"
                },
                "agent_id": {
                  "type": "integer",
                  "description": "The agent ID generated and returned by the SHM at the time an Agent is configured by the client. \nThis agent ID will not change throughout the lifetime of the tenant ID for that particular Agent\n"
                },
                "call_ani": {
                  "type": "string",
                  "description": "The customer calling id.\n"
                },
                "call_type": {
                  "type": "integer",
                  "description": "Enum.\nThe call type information.\n"
                },
                "call_uui": {
                  "type": "string",
                  "description": "The call identification information."
                },
                "current_state": {
                  "type": "integer",
                  "enum": [
                    -1,
                    0,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8
                  ],
                  "description": "The current Agent state sent based on the available enums:\n-1=AS_UNKNOWN\n0=AS_Idle\n1=AS_Break\n2=AS_Ring\n3=AS_Talk\n4=AS_Wrap\n5=AS_Other\n6=AS_Hold\n7=AS_Login\n8=AS_Logout\n"
                },
                "current_state_return_code": {
                  "type": "integer",
                  "description": "A code to identify current state change by AMS."
                },
                "cust_name": {
                  "type": "string",
                  "description": "The customer name provided by the Agent at the time of call disposition. \nThis value will be available only if the Agent has provided this information.\n"
                },
                "guid": {
                  "type": "string",
                  "description": "Universal ID (Globally unique identifier) of an interaction"
                },
                "ixn_id": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The interaction ID"
                },
                "op_type": {
                  "type": "string",
                  "description": "A constant value \\\"alert\\\" for the endpoint. Later, this will be removed.\n"
                },
                "operation": {
                  "type": "string",
                  "description": "TFS event value. Provide any one of the TFS event value given below:\n- tfs_call_initiated\n- tfs_call_originated\n- tfs_call_ringing\n- tfs_call_connected\n- tfs_call_terminated\n- tfs_call_ring_no_answer\n- tfs_call_merged\n- tfs_endpoint_not_found\n- tfs_tcp_disconnection\n- tfs_call_not_acceptable\n- tfs_call_held\n- tfs_call_resume          \n"
                },
                "pending_state": {
                  "type": "integer",
                  "enum": [
                    -1,
                    0,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8
                  ],
                  "description": "The queued state (based on the available enums) for the Agent to be changed in case the Agent is still in the current state.\nAfter the Agent is done with the current state, it will be replaced with this pending state.\n-1=AS_UNKNOWN\n0=AS_Idle\n1=AS_Break\n2=AS_Ring\n3=AS_Talk\n4=AS_Wrap\n5=AS_Other\n6=AS_Hold\n7=AS_Login\n8=AS_Logout \n"
                },
                "pending_state_return_code": {
                  "type": "integer",
                  "description": "A code to identify pending state change by AMS."
                },
                "queue_time": {
                  "type": "integer",
                  "description": "UNIX time\nThe wait time a call spend in the queue till the agent picked it up\n"
                },
                "station_id": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The ID of the station the Agent is currently using/logged in\nRequired when using the login command\n"
                },
                "tenant_id": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The client tenant ID"
                },
                "tfn": {
                  "type": "string",
                  "description": "The client number from where the call is initiated."
                },
                "transfer": {
                  "type": "string",
                  "description": "The call transfer information provided by TFS."
                }
              }
            },
            "AgentPerformanceRequest": {
              "type": "object",
              "properties": {
                "tenant_id": {
                  "type": "integer",
                  "description": "The client tenant ID",
                  "format": "int64"
                },
                "acd_id": {
                  "type": "integer",
                  "description": "Not used at this time"
                },
                "ans_agent_id": {
                  "type": "integer",
                  "description": "Agent ID"
                },
                "start_time": {
                  "$ref": "#/components/schemas/DateOrLong",
                  "description": "Range start time to filter agent performance"
                }
              },
              "required": [
                "tenant_id",
                "acd_id",
                "ans_agent_id"
              ]
            },
            "AgentPerformanceResponse": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "This is HTTP response code, one of the followings: 200, 400, 404, 500"
                },
                "message": {
                  "type": "string",
                  "description": "This is a string response message includes: Response code recevied from external database connection service:{code}"
                },
                "response": {
                  "type": "array",
                  "description": "Array of performance data, described in response object definition.",
                  "items": {
                    "$ref": "#/components/schemas/AgentPerformanceResponseItem"
                  }
                }
              }
            },
            "AgentPerformanceResponseItem": {
              "type": "object",
              "properties": {
                "staff_time": {
                  "type": "integer",
                  "description": "The total time that agent consumed"
                },
                "break_time": {
                  "type": "integer",
                  "description": "The time at or during which a break is taken by an Agent"
                },
                "avail_time": {
                  "type": "integer",
                  "description": "The time that agent was available on station"
                },
                "talk_time": {
                  "type": "integer",
                  "description": "The time taken by an Agent during a voice or chat"
                },
                "wrap_time": {
                  "type": "integer",
                  "description": "The time spent by Agents doing after-call work (ACW) once they have concluded an interaction"
                },
                "calls_handled": {
                  "type": "integer",
                  "description": "The time taken by an Agent to handle calls in a particular amount of time"
                },
                "average_handled_time": {
                  "type": "integer",
                  "description": "The average duration of the entire customer call transaction, from the time the customer initiates the call to ending the call"
                }
              }
            },
            "CallDataRequest": {
              "type": "object",
              "description": "Below, you can find detailed information on each attribute within the HTTP request body.",
              "properties": {
                "tenant_id": {
                  "type": "integer",
                  "description": "The ID of the tenant (Not used at this time)",
                  "format": "int64"
                },
                "tenant_code": {
                  "type": "string",
                  "description": "Not used at this time"
                },
                "tenant": {
                  "type": "string",
                  "description": "Not used at this time"
                },
                "acd_id": {
                  "type": "integer",
                  "description": "Not used at this time"
                },
                "ixn_id": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The interaction ID"
                },
                "guid": {
                  "type": "string",
                  "description": "Interaction GUID"
                },
                "ani": {
                  "type": "string",
                  "description": "Client number information"
                },
                "start_time": {
                  "$ref": "#/components/schemas/DateOrLong",
                  "description": "Range start for the call time"
                },
                "end_time": {
                  "$ref": "#/components/schemas/DateOrLong",
                  "description": "Range end for the call time"
                },
                "call_channel": {
                  "type": "string",
                  "description": "Channel information"
                },
                "call_notes": {
                  "type": "string"
                },
                "agent_group": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Agent skill group information"
                },
                "call_followup_flag": {
                  "type": "string",
                  "description": "Call follow up information."
                },
                "call_followup_date": {
                  "$ref": "#/components/schemas/DateOrLong",
                  "description": "Call followup date."
                },
                "ans_agent_id": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Agent ID"
                }
              },
              "required": [
                "tenant_id",
                "acd_id"
              ]
            },
            "CallDataResponse": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "This is HTTP response code, one of the followings: 200, 206, 400, 404, 500"
                },
                "message": {
                  "type": "string",
                  "description": "This is a string response message includes: Response code recevied from external database connection service:{code}"
                }
              }
            },
            "UpdateCallDataRequest": {
              "type": "object",
              "properties": {
                "guid": {
                  "type": "string",
                  "description": "Universal ID (Globally unique identifier) of an interaction"
                },
                "tenant_id": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The client tenant ID"
                },
                "tenant_code": {
                  "type": "string",
                  "description": "Not used at this time"
                },
                "tenant": {
                  "type": "string",
                  "description": "Not used at this time"
                },
                "acd_id": {
                  "type": "integer",
                  "description": "Not used at this time"
                },
                "ixn_id": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The interaction ID"
                },
                "ani": {
                  "type": "string",
                  "description": "The number from which a call is made"
                },
                "call_time": {
                  "$ref": "#/components/schemas/DateOrLong",
                  "description": "The time at which a call is made"
                },
                "call_channel": {
                  "type": "string",
                  "description": "Defines the channel of the call e.g. call, sms, email"
                },
                "agent_group": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Defines the skill number/code"
                },
                "agent_group_string": {
                  "type": "string",
                  "description": "Agent group info"
                },
                "ans_agent": {
                  "type": "string",
                  "description": "Agent name"
                },
                "call_disposition": {
                  "type": "string",
                  "description": "The call ending notes at the end of the call provided by the agent"
                },
                "call_followup_flag": {
                  "type": "string",
                  "description": "A flag used to identify followup"
                },
                "call_followup_date": {
                  "$ref": "#/components/schemas/DateOrLong",
                  "description": "Defines the follow-up date"
                },
                "ans_agent_id": {
                  "type": "integer",
                  "format": "int64",
                  "description": ""
                }
              },
              "required": [
                "guid",
                "tenant_id",
                "acd_id",
                "ixn_id",
                "ans_agent_id"
              ]
            },
            "UpdateCallDataResponse": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "This is HTTP response code, one of the followings: 201, 204, 400, 404, 409, 500"
                },
                "message": {
                  "type": "string",
                  "description": "This is a string response message that includes: Response code received from external database connection service:{code}"
                },
                "response": {
                  "type": "object",
                  "description": "Any response sent by the database service will be returned"
                }
              }
            },
            "CustomerInteractionHistoryRequest": {
              "type": "object",
              "description": "Any one of [tenant_id,tenant_code,tenant_name] must be provided",
              "properties": {
                "tenant_id": {
                  "type": "integer",
                  "format": "int64"
                },
                "tenant_code": {
                  "type": "string"
                },
                "tenant_name": {
                  "type": "string"
                },
                "acd_id": {
                  "type": "integer",
                  "description": "compulsary"
                },
                "ani": {
                  "type": "string",
                  "description": "compulsary"
                },
                "ixn_id": {
                  "type": "integer",
                  "format": "int64",
                  "description": "optional"
                },
                "ans_agent_id": {
                  "type": "integer",
                  "format": "int64",
                  "description": "optional"
                },
                "agent_name": {
                  "type": "string",
                  "description": "optional"
                },
                "call_date": {
                  "$ref": "#/components/schemas/DateOrLong",
                  "description": "either provide call_date or start_date and/or end_date"
                },
                "start_date": {
                  "$ref": "#/components/schemas/DateOrLong",
                  "description": "either provide call_date or start_date and/or end_date"
                },
                "end_date": {
                  "$ref": "#/components/schemas/DateOrLong",
                  "description": "either provide call_date or start_date and/or end_date"
                },
                "call_channel": {
                  "type": "string"
                },
                "agent_group": {
                  "type": "integer",
                  "format": "int64"
                },
                "call_followup_flag": {
                  "type": "string"
                },
                "call_followup_date": {
                  "$ref": "#/components/schemas/DateOrLong",
                  "description": " either provide call_followup_date or call_followup_start_date and/or call_followup_end_date"
                },
                "call_followup_start_date": {
                  "$ref": "#/components/schemas/DateOrLong",
                  "description": " either provide call_followup_date or call_followup_start_date and/or call_followup_end_date"
                },
                "call_followup_end_date": {
                  "$ref": "#/components/schemas/DateOrLong",
                  "description": " either provide call_followup_date or call_followup_start_date and/or call_followup_end_date"
                },
                "call_type": {
                  "type": "integer",
                  "format": "int64"
                },
                "limit": {
                  "type": "integer"
                },
                "offset": {
                  "type": "integer"
                }
              },
              "required": [
                "acd_id",
                "ani"
              ]
            },
            "CustomerInteractionHistoryResponse": {
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer",
                  "description": "count of all records present"
                },
                "history": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomerInteractionHistoryResponseItem"
                  }
                }
              }
            },
            "CustomerInteractionHistoryResponseItem": {
              "type": "object",
              "properties": {
                "tenant_id": {
                  "type": "integer",
                  "format": "int64"
                },
                "tenant_code": {
                  "type": "string"
                },
                "tenant": {
                  "type": "string"
                },
                "acd_id": {
                  "type": "integer"
                },
                "ani": {
                  "type": "string"
                },
                "ixn_id": {
                  "type": "integer",
                  "format": "int64"
                },
                "call_time": {
                  "$ref": "#/components/schemas/DateOrLong"
                },
                "call_channel": {
                  "type": "string"
                },
                "agent_group": {
                  "type": "integer",
                  "format": "int64"
                },
                "agent_group_string": {
                  "type": "string"
                },
                "call_disposition": {
                  "type": "string"
                },
                "call_followup_flag": {
                  "type": "string"
                },
                "call_followup_date": {
                  "$ref": "#/components/schemas/DateOrLong"
                },
                "ans_agent_id": {
                  "type": "integer",
                  "format": "int64"
                },
                "ans_agent": {
                  "type": "string"
                }
              }
            },
            "CustomerMessagesHistoryRequest": {
              "type": "object",
              "description": "Any one of [tenant_id,tenant_code,tenant_name] must be provided",
              "properties": {
                "tenant_id": {
                  "type": "integer",
                  "format": "int64"
                },
                "acd_id": {
                  "type": "integer",
                  "description": "compulsary"
                },
                "ans_agent_id": {
                  "type": "integer",
                  "format": "int64",
                  "description": "optional"
                },
                "channel_id": {
                  "type": "integer",
                  "description": "compulsary"
                },
                "start_time": {
                  "$ref": "#/components/schemas/DateOrLong",
                  "description": "either provide call_date or start_date and/or end_date"
                },
                "end_time": {
                  "$ref": "#/components/schemas/DateOrLong",
                  "description": "either provide call_date or start_date and/or end_date"
                },
                "limit": {
                  "type": "integer",
                  "description": "compulsary"
                },
                "offset": {
                  "type": "integer",
                  "description": "compulsary"
                }
              },
              "required": [
                "acd_id",
                "channel_id",
                "limit",
                "offset"
              ]
            },
            "CustomerMessagesHistoryResponse": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "http error code"
                },
                "message": {
                  "type": "string",
                  "description": "This is string error message"
                },
                "response": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomerMessagesHistoryResponseItem"
                  }
                }
              }
            },
            "IxnMessagesRequest": {
              "type": "object",
              "description": "guid must be provided",
              "properties": {
                "tenant_id": {
                  "type": "integer",
                  "format": "int64",
                  "description": "optional"
                },
                "acd_id": {
                  "type": "integer",
                  "description": "optional"
                },
                "ans_agent_id": {
                  "type": "integer",
                  "format": "int64",
                  "description": "optional"
                },
                "start_time": {
                  "$ref": "#/components/schemas/DateOrLong",
                  "description": "either provide call_date or start_date and/or end_date"
                },
                "end_time": {
                  "$ref": "#/components/schemas/DateOrLong",
                  "description": "either provide call_date or start_date and/or end_date"
                },
                "limit": {
                  "type": "integer",
                  "description": "optional"
                },
                "offset": {
                  "type": "integer",
                  "description": "optional"
                },
                "guid": {
                  "type": "string",
                  "description": "compulsory"
                }
              },
              "required": [
                "guid"
              ]
            },
            "IxnMessagesResponse": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "http error code"
                },
                "message": {
                  "type": "string",
                  "description": "This is string error message"
                },
                "response": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IxnMessagesResponseItem"
                  }
                }
              }
            },
            "CustomerMessagesHistoryResponseItem": {
              "type": "object",
              "properties": {
                "channel_id": {
                  "type": "integer",
                  "format": "int64"
                },
                "timestamp": {
                  "$ref": "#/components/schemas/DateOrLong"
                },
                "payload": {
                  "type": "string"
                },
                "subject": {
                  "type": "string"
                },
                "message_attribute": {
                  "type": "object"
                },
                "parent_msg_id": {
                  "type": "string"
                },
                "attached_media": {
                  "type": "string"
                },
                "msg_from": {
                  "type": "string"
                },
                "msg_to": {
                  "type": "string"
                },
                "tenant_id": {
                  "type": "integer",
                  "format": "int64"
                },
                "content_type": {
                  "type": "integer",
                  "format": "int64"
                },
                "event_type": {
                  "type": "integer",
                  "format": "int64"
                },
                "guid": {
                  "type": "string"
                },
                "msg_id": {
                  "type": "string"
                },
                "call_time": {
                  "$ref": "#/components/schemas/DateOrLong"
                },
                "call_channel": {
                  "type": "string"
                },
                "ans_agent_id": {
                  "type": "integer",
                  "format": "int64"
                },
                "c_tenantid": {
                  "type": "integer",
                  "format": "int64"
                },
                "acd_id": {
                  "type": "integer",
                  "format": "int64"
                },
                "ixn_id": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            },
            "IxnMessagesResponseItem": {
              "type": "object",
              "properties": {
                "tenant_id": {
                  "type": "integer",
                  "format": "int64"
                },
                "guid": {
                  "type": "string"
                },
                "msg_id": {
                  "type": "integer",
                  "format": "int64"
                },
                "timestamp": {
                  "$ref": "#/components/schemas/DateOrLong"
                },
                "content_type": {
                  "type": "integer",
                  "format": "int64"
                },
                "event_type": {
                  "type": "integer",
                  "format": "int64"
                },
                "msg_from": {
                  "type": "string"
                },
                "msg_to": {
                  "type": "string"
                },
                "attached_media": {
                  "type": "string"
                },
                "payload": {
                  "type": "string"
                },
                "subject": {
                  "type": "string"
                },
                "message_attribute": {
                  "type": "object"
                },
                "parent_msg_id": {
                  "type": "string"
                },
                "tacdr_guid": {
                  "type": "string"
                },
                "ixn_id": {
                  "type": "integer",
                  "format": "int64"
                },
                "acd_uid": {
                  "type": "string"
                },
                "acd_segment_id": {
                  "type": "string"
                },
                "acd_ixn_id": {
                  "type": "string"
                },
                "ani": {
                  "type": "string"
                },
                "dn": {
                  "type": "integer",
                  "format": "int64"
                },
                "skill": {
                  "type": "integer",
                  "format": "int64"
                },
                "call_type": {
                  "type": "integer",
                  "format": "int64"
                },
                "agent_group": {
                  "type": "integer",
                  "format": "int64"
                },
                "call_time": {
                  "$ref": "#/components/schemas/DateOrLong"
                },
                "ring_time": {
                  "$ref": "#/components/schemas/DateOrLong"
                },
                "answ_time": {
                  "$ref": "#/components/schemas/DateOrLong"
                },
                "disp_time": {
                  "$ref": "#/components/schemas/DateOrLong"
                },
                "terminated_time": {
                  "$ref": "#/components/schemas/DateOrLong"
                },
                "ans_agent": {
                  "type": "string"
                },
                "ans_agent_id": {
                  "type": "integer",
                  "format": "int64"
                },
                "agent_station": {
                  "type": "string"
                },
                "routed_agent_group": {
                  "type": "integer",
                  "format": "int64"
                },
                "parent_id": {
                  "type": "integer",
                  "format": "int64"
                },
                "called_number": {
                  "type": "string"
                },
                "first_queue_dn": {
                  "type": "integer",
                  "format": "int64"
                },
                "acd_attached_data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "ACDAttributes": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "ACDSS_EWT": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "count": {
                        "type": "string"
                      }
                    }
                  }
                },
                "queued_skill_list": {
                  "type": "string"
                },
                "ans_agent_wait_time": {
                  "type": "integer",
                  "format": "int64"
                },
                "lob_id": {
                  "type": "integer",
                  "format": "int64"
                },
                "wrap_start_time": {
                  "$ref": "#/components/schemas/DateOrLong"
                },
                "wrap_end_time": {
                  "$ref": "#/components/schemas/DateOrLong"
                },
                "collected_digits": {
                  "type": "string"
                },
                "queue_time": {
                  "type": "integer",
                  "format": "int64"
                },
                "call_type_string": {
                  "type": "string"
                },
                "agent_group_string": {
                  "type": "string"
                },
                "tacdr_tenant_id": {
                  "type": "integer",
                  "format": "int64"
                },
                "acd_id": {
                  "type": "integer",
                  "format": "int64"
                },
                "parent_guid": {
                  "type": "string"
                },
                "channel_type": {
                  "type": "string"
                }
              }
            },
            "AgentRecordsRequest": {
              "type": "object",
              "properties": {
                "tenant_id": {
                  "type": "integer",
                  "format": "int64"
                },
                "acd_id": {
                  "type": "integer",
                  "format": "int64"
                },
                "agent_ids": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "int64"
                  }
                },
                "limit": {
                  "type": "integer"
                },
                "offset": {
                  "type": "integer"
                }
              },
              "required": [
                "tenant_id",
                "acd_id",
                "agent_ids"
              ]
            },
            "AgentRecordsReponse": {
              "type": "object",
              "properties": {
                "agent_record": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "agent_id": {
                        "type": "string",
                        "description": "Agent id"
                      },
                      "agent_station": {
                        "type": "string",
                        "description": "station_adress"
                      },
                      "agent_status": {
                        "type": "integer",
                        "enum": [
                          0,
                          1,
                          2,
                          3,
                          4,
                          5,
                          6
                        ],
                        "description": "AS_LOGGEDOUT = 0,AS_LOGGEDIN = 1,AS_IDLE = 2,AS_ONBREAK = 3 \nAS_ASSIGNED = 4,AS_TALKING = 5,AS_WRAP = 6"
                      }
                    }
                  }
                }
              }
            },
            "getAssignedStationRequest": {
              "type": "object",
              "properties": {
                "tenant_id": {
                  "type": "integer",
                  "format": "int64"
                },
                "acd_id": {
                  "type": "integer",
                  "format": "int64"
                },
                "agent_id": {
                  "type": "integer",
                  "format": "int64"
                }
              },
              "required": [
                "tenant_id",
                "acd_id",
                "agent_id"
              ]
            },
            "getAssignedStationReponse": {
              "type": "object",
              "properties": {
                "station_id": {
                  "type": "integer",
                  "description": "station id for requested agent id"
                }
              }
            },
            "isstationinuseRequest": {
              "type": "object",
              "properties": {
                "tenant_id": {
                  "type": "integer",
                  "format": "int64"
                },
                "acd_id": {
                  "type": "integer",
                  "format": "int64"
                },
                "station_id": {
                  "type": "integer",
                  "format": "int64"
                }
              },
              "required": [
                "tenant_id",
                "acd_id",
                "station_id"
              ]
            },
            "isstationinuseReponse": {
              "type": "object",
              "properties": {
                "in_use": {
                  "type": "boolean",
                  "description": "station id in use or not"
                }
              }
            },
            "getNextAvailableStationRequest": {
              "type": "object",
              "properties": {
                "tenant_id": {
                  "type": "integer",
                  "format": "int64"
                },
                "acd_id": {
                  "type": "integer",
                  "format": "int64"
                }
              },
              "required": [
                "tenant_id",
                "acd_id"
              ]
            },
            "getNextAvailableStationReponse": {
              "type": "object",
              "properties": {
                "station_id": {
                  "type": "integer",
                  "format": "int64",
                  "description": "station id for next available station"
                }
              }
            },
            "HistoryLookupRequest": {
              "type": "object",
              "properties": {
                "tenant_id": {
                  "type": "integer",
                  "format": "int64"
                },
                "acd_id": {
                  "type": "integer",
                  "format": "int64"
                },
                "key1": {
                  "type": "string"
                },
                "val1": {
                  "type": "string"
                }
              }
            },
            "HistoryLookupResponse": {
              "type": "object",
              "properties": {
                "guid": {
                  "type": "string"
                },
                "ixn_id": {
                  "type": "integer"
                },
                "acd_uid": {
                  "type": "string"
                },
                "acd_segment_id": {
                  "type": "string"
                },
                "acd_ixn_id": {
                  "type": "string"
                },
                "ani": {
                  "type": "string"
                },
                "dn": {
                  "type": "integer"
                },
                "skill": {
                  "type": "integer"
                },
                "call_type": {
                  "type": "integer"
                },
                "agent_group": {
                  "type": "integer"
                },
                "call_time": {
                  "type": "string",
                  "format": "datetime"
                },
                "ring_time": {
                  "type": "string",
                  "format": "datetime"
                },
                "answ_time": {
                  "type": "string",
                  "format": "datetime"
                },
                "disp_time": {
                  "type": "string",
                  "format": "datetime"
                },
                "terminated_time": {
                  "type": "string",
                  "format": "datetime"
                },
                "ans_agent": {
                  "type": "string"
                },
                "ans_agent_id": {
                  "type": "integer"
                },
                "agent_station": {
                  "type": "string"
                },
                "routed_agent_group": {
                  "type": "integer"
                },
                "parent_id": {
                  "type": "integer"
                },
                "called_number": {
                  "type": "string"
                },
                "first_queue_dn": {
                  "type": "integer"
                },
                "acd_attached_data": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "ACDAttributes": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "ACDSS_EWT": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "count": {
                        "type": "integer"
                      }
                    }
                  }
                },
                "queued_skill_list": {
                  "type": "string"
                },
                "ans_agent_wait_time": {
                  "type": "integer"
                },
                "lob_id": {
                  "type": "integer"
                },
                "wrap_start_time": {
                  "type": "string",
                  "format": "datetime"
                },
                "wrap_end_time": {
                  "type": "string",
                  "format": "datetime"
                },
                "collected_digits": {
                  "type": "string"
                },
                "queue_time": {
                  "type": "integer"
                },
                "call_type_string": {
                  "type": "string"
                },
                "agent_group_string": {
                  "type": "string",
                  "format": "datetime"
                },
                "call_channel": {
                  "type": "string"
                },
                "call_disposition": {
                  "type": "string"
                },
                "call_notes": {
                  "type": "string"
                },
                "call_followup_date": {
                  "type": "string",
                  "format": "datetime"
                },
                "call_followup_flag": {
                  "type": "integer"
                },
                "tenant_code": {
                  "type": "string"
                }
              }
            },
            "HistoryCustomerAccountRequest": {
              "type": "object",
              "properties": {
                "tenant_id": {
                  "type": "integer",
                  "format": "int64"
                },
                "acd_id": {
                  "type": "integer",
                  "format": "int64"
                },
                "limit": {
                  "type": "integer",
                  "format": "int64"
                },
                "offset": {
                  "type": "integer",
                  "format": "int64"
                },
                "ans_agent_id": {
                  "type": "integer",
                  "format": "int64"
                },
                "ani": {
                  "type": "string"
                },
                "call_type": {
                  "type": "integer",
                  "format": "int64"
                },
                "guid": {
                  "type": "string"
                },
                "dn": {
                  "type": "integer",
                  "format": "int64"
                },
                "start_time": {
                  "$ref": "#/components/schemas/DateOrLong"
                },
                "end_time": {
                  "$ref": "#/components/schemas/DateOrLong"
                },
                "agent_group": {
                  "type": "integer",
                  "format": "int64"
                },
                "value": {
                  "type": "string"
                }
              }
            },
            "HistoryCustomerAccountResponse": {
              "type": "object",
              "properties": {
                "ixn_guid": {
                  "type": "string"
                },
                "key": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                },
                "guid": {
                  "type": "string"
                },
                "ixn_id": {
                  "type": "integer"
                },
                "acd_uid": {
                  "type": "string"
                },
                "acd_segment_id": {
                  "type": "string"
                },
                "acd_ixn_id": {
                  "type": "string"
                },
                "ani": {
                  "type": "string"
                },
                "dn": {
                  "type": "integer"
                },
                "skill": {
                  "type": "integer"
                },
                "call_type": {
                  "type": "integer"
                },
                "agent_group": {
                  "type": "integer"
                },
                "call_time": {
                  "type": "string",
                  "format": "datetime"
                },
                "ring_time": {
                  "type": "string",
                  "format": "datetime"
                },
                "answ_time": {
                  "type": "string",
                  "format": "datetime"
                },
                "disp_time": {
                  "type": "string",
                  "format": "datetime"
                },
                "terminated_time": {
                  "type": "string",
                  "format": "datetime"
                },
                "ans_agent": {
                  "type": "string"
                },
                "ans_agent_id": {
                  "type": "integer"
                },
                "agent_station": {
                  "type": "string"
                },
                "routed_agent_group": {
                  "type": "integer"
                },
                "parent_id": {
                  "type": "integer"
                },
                "called_number": {
                  "type": "string"
                },
                "first_queue_dn": {
                  "type": "integer"
                },
                "acd_attached_data": {
                  "type": "object",
                  "properties": {
                    "ACDAttachedData": {
                      "type": "string"
                    },
                    "ACDAttributes": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "ACDSS_EWT": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "count": {
                      "type": "string"
                    }
                  }
                },
                "queued_skill_list": {
                  "type": "string"
                },
                "ans_agent_wait_time": {
                  "type": "integer"
                },
                "lob_id": {
                  "type": "integer"
                },
                "wrap_start_time": {
                  "type": "string",
                  "format": "datetime"
                },
                "wrap_end_time": {
                  "type": "string",
                  "format": "datetime"
                },
                "collected_digits": {
                  "type": "string"
                },
                "queue_time": {
                  "type": "integer"
                },
                "call_type_string": {
                  "type": "string"
                },
                "agent_group_string": {
                  "type": "string",
                  "format": "datetime"
                },
                "call_channel": {
                  "type": "string"
                },
                "call_disposition": {
                  "type": "string"
                },
                "call_notes": {
                  "type": "string"
                },
                "call_followup_date": {
                  "type": "string",
                  "format": "datetime"
                },
                "call_followup_flag": {
                  "type": "integer"
                },
                "tenant_code": {
                  "type": "string"
                }
              }
            },
            "GetParentInteractionsRequest": {
              "type": "object",
              "properties": {
                "tenant_id": {
                  "type": "integer",
                  "format": "int64"
                },
                "acd_id": {
                  "type": "integer",
                  "format": "int64"
                },
                "limit": {
                  "type": "integer",
                  "format": "int64"
                },
                "offset": {
                  "type": "integer",
                  "format": "int64"
                },
                "accountid_key": {
                  "type": "string",
                  "description": "accountid key (ex: mega.accountid)"
                },
                "accountid_value": {
                  "type": "string",
                  "description": "accountid value"
                }
              }
            },
            "GetParentInteractionsResponse": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "http response code"
                },
                "message": {
                  "type": "string",
                  "description": "This is string message for operation result"
                },
                "response": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "ixn_guid": {
                        "type": "string"
                      },
                      "key": {
                        "type": "string"
                      },
                      "value": {
                        "type": "string"
                      },
                      "guid": {
                        "type": "string"
                      },
                      "ixn_id": {
                        "type": "integer"
                      },
                      "acd_uid": {
                        "type": "string"
                      },
                      "acd_segment_id": {
                        "type": "string"
                      },
                      "acd_ixn_id": {
                        "type": "string"
                      },
                      "ani": {
                        "type": "string"
                      },
                      "dn": {
                        "type": "integer"
                      },
                      "skill": {
                        "type": "integer"
                      },
                      "call_type": {
                        "type": "integer"
                      },
                      "agent_group": {
                        "type": "integer"
                      },
                      "call_time": {
                        "type": "string",
                        "format": "datetime"
                      },
                      "ring_time": {
                        "type": "string",
                        "format": "datetime"
                      },
                      "answ_time": {
                        "type": "string",
                        "format": "datetime"
                      },
                      "disp_time": {
                        "type": "string",
                        "format": "datetime"
                      },
                      "terminated_time": {
                        "type": "string",
                        "format": "datetime"
                      },
                      "ans_agent": {
                        "type": "string"
                      },
                      "ans_agent_id": {
                        "type": "integer"
                      },
                      "agent_station": {
                        "type": "string"
                      },
                      "routed_agent_group": {
                        "type": "integer"
                      },
                      "parent_id": {
                        "type": "integer"
                      },
                      "called_number": {
                        "type": "string"
                      },
                      "first_queue_dn": {
                        "type": "integer"
                      },
                      "acd_attached_data": {
                        "type": "object",
                        "properties": {
                          "ACDAttachedData": {
                            "type": "string"
                          },
                          "ACDAttributes": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "ACDSS_EWT": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "count": {
                            "type": "string"
                          }
                        }
                      },
                      "queued_skill_list": {
                        "type": "string"
                      },
                      "ans_agent_wait_time": {
                        "type": "integer"
                      },
                      "lob_id": {
                        "type": "integer"
                      },
                      "wrap_start_time": {
                        "type": "string",
                        "format": "datetime"
                      },
                      "wrap_end_time": {
                        "type": "string",
                        "format": "datetime"
                      },
                      "collected_digits": {
                        "type": "string"
                      },
                      "queue_time": {
                        "type": "integer"
                      },
                      "call_type_string": {
                        "type": "string"
                      },
                      "agent_group_string": {
                        "type": "string",
                        "format": "datetime"
                      },
                      "call_channel": {
                        "type": "string"
                      },
                      "call_disposition": {
                        "type": "string"
                      },
                      "call_notes": {
                        "type": "string"
                      },
                      "call_followup_date": {
                        "type": "string",
                        "format": "datetime"
                      },
                      "call_followup_flag": {
                        "type": "integer"
                      },
                      "tenant_code": {
                        "type": "string"
                      },
                      "parent_guid": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "GetChildInteractionsRequest": {
              "type": "object",
              "properties": {
                "parent_guid": {
                  "type": "string",
                  "description": "Parent GUID to get all child interactions and message history"
                }
              }
            },
            "GetChildInteractionsResponse": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "http response code"
                },
                "message": {
                  "type": "string",
                  "description": "This is string message for operation result"
                },
                "response": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "tenant_id": {
                        "type": "integer",
                        "format": "int64"
                      },
                      "msg_id": {
                        "type": "string"
                      },
                      "guid": {
                        "type": "string"
                      },
                      "timestamp": {
                        "$ref": "#/components/schemas/DateOrLong"
                      },
                      "event_type": {
                        "type": "integer",
                        "format": "int64"
                      },
                      "content_type": {
                        "type": "integer",
                        "format": "int64"
                      },
                      "msg_to": {
                        "type": "string"
                      },
                      "msg_from": {
                        "type": "string"
                      },
                      "attached_media": {
                        "type": "string"
                      },
                      "payload": {
                        "type": "string"
                      },
                      "subject": {
                        "type": "string"
                      },
                      "parent_msg_id": {
                        "type": "string"
                      },
                      "channel_id": {
                        "type": "integer",
                        "format": "int64"
                      },
                      "message_attribute": {
                        "type": "object"
                      },
                      "c_guid": {
                        "type": "string"
                      },
                      "c_tenant_id": {
                        "type": "integer",
                        "format": "int64"
                      },
                      "c_acd_id": {
                        "type": "integer",
                        "format": "int64"
                      },
                      "c_ixn_id": {
                        "type": "integer",
                        "format": "int64"
                      },
                      "c_acd_uid": {
                        "type": "string"
                      },
                      "c_acd_segment_id": {
                        "type": "string"
                      },
                      "c_acd_ixn_id": {
                        "type": "string"
                      },
                      "c_ani": {
                        "type": "string"
                      },
                      "c_dn": {
                        "type": "integer"
                      },
                      "c_skill": {
                        "type": "integer"
                      },
                      "c_call_type": {
                        "type": "integer"
                      },
                      "c_agent_group": {
                        "type": "integer"
                      },
                      "c_call_time": {
                        "type": "string",
                        "format": "datetime"
                      },
                      "c_ring_time": {
                        "type": "string",
                        "format": "datetime"
                      },
                      "c_answ_time": {
                        "type": "string",
                        "format": "datetime"
                      },
                      "c_disp_time": {
                        "type": "string",
                        "format": "datetime"
                      },
                      "c_terminated_time": {
                        "type": "string",
                        "format": "datetime"
                      },
                      "c_ans_agent": {
                        "type": "string"
                      },
                      "c_ans_agent_id": {
                        "type": "integer"
                      },
                      "c_agent_station": {
                        "type": "string"
                      },
                      "c_routed_agent_group": {
                        "type": "integer"
                      },
                      "c_parent_id": {
                        "type": "integer"
                      },
                      "c_called_number": {
                        "type": "string"
                      },
                      "c_first_queue_dn": {
                        "type": "integer"
                      },
                      "c_acd_attached_data": {
                        "type": "object",
                        "properties": {
                          "ACDAttachedData": {
                            "type": "string"
                          },
                          "ACDAttributes": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "ACDSS_EWT": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "count": {
                            "type": "string"
                          }
                        }
                      },
                      "c_queued_skill_list": {
                        "type": "string"
                      },
                      "c_ans_agent_wait_time": {
                        "type": "integer"
                      },
                      "c_lob_id": {
                        "type": "integer"
                      },
                      "c_wrap_start_time": {
                        "type": "string",
                        "format": "datetime"
                      },
                      "c_wrap_end_time": {
                        "type": "string",
                        "format": "datetime"
                      },
                      "c_collected_digits": {
                        "type": "string"
                      },
                      "c_queue_time": {
                        "type": "integer"
                      },
                      "c_call_type_string": {
                        "type": "string"
                      },
                      "c_agent_group_string": {
                        "type": "string",
                        "format": "datetime"
                      },
                      "c_call_channel": {
                        "type": "string"
                      },
                      "c_call_disposition": {
                        "type": "string"
                      },
                      "c_call_notes": {
                        "type": "string"
                      },
                      "c_call_followup_date": {
                        "type": "string",
                        "format": "datetime"
                      },
                      "c_call_followup_flag": {
                        "type": "integer"
                      },
                      "c_tenant_code": {
                        "type": "string"
                      },
                      "c_parent_guid": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "AggregateRecordsRequest": {
              "type": "object",
              "properties": {
                "tenant_id": {
                  "type": "integer",
                  "format": "int64"
                },
                "acd_id": {
                  "type": "integer",
                  "format": "int64"
                },
                "ids": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  }
                },
                "aggregate_type": {
                  "type": "integer"
                },
                "stat_type": {
                  "type": "integer"
                },
                "channel_type": {
                  "type": "integer",
                  "description": "optional"
                }
              }
            },
            "ECHIRequest": {
              "type": "object",
              "properties": {
                "tenant_id": {
                  "type": "integer",
                  "format": "int64"
                },
                "acd_id": {
                  "type": "integer",
                  "format": "int64"
                },
                "segstart": {
                  "type": "integer"
                },
                "dispvdn": {
                  "type": "string"
                },
                "dispsplit": {
                  "type": "integer"
                },
                "limit": {
                  "type": "integer"
                },
                "offset": {
                  "type": "integer"
                }
              },
              "required": [
                "acd_id",
                "tenant_id"
              ]
            },
            "ACDRRecordItem": {
              "type": "object",
              "properties": {
                "tenant_id": {
                  "type": "integer"
                },
                "agent_group": {
                  "type": "integer"
                },
                "ans_agent_wait_time": {
                  "type": "integer"
                },
                "call_type": {
                  "type": "integer"
                },
                "dn": {
                  "type": "integer"
                },
                "first_queue_dn": {
                  "type": "integer"
                },
                "ixn_id": {
                  "type": "integer"
                },
                "lob_id": {
                  "type": "integer"
                },
                "parent_id": {
                  "type": "integer"
                },
                "queue_time": {
                  "type": "integer"
                },
                "routed_agent_group": {
                  "type": "integer"
                },
                "skill": {
                  "type": "integer"
                },
                "vht_ewt": {
                  "type": "integer"
                },
                "answ_time-disp_time": {
                  "type": "string",
                  "format": "datetime"
                },
                "call_time": {
                  "type": "string",
                  "format": "datetime"
                },
                "data_creation_time": {
                  "type": "string",
                  "format": "datetime"
                },
                "db_insertion_time": {
                  "type": "string",
                  "format": "datetime"
                },
                "disp_time": {
                  "type": "string",
                  "format": "datetime"
                },
                "ring_time-answ_time": {
                  "type": "string",
                  "format": "datetime"
                },
                "terminated_time": {
                  "type": "string",
                  "format": "datetime"
                },
                "vht_dequeued_time": {
                  "type": "string",
                  "format": "datetime"
                },
                "vht_queued_time": {
                  "type": "string",
                  "format": "datetime"
                },
                "wait_threshold": {
                  "type": "string",
                  "format": "datetime"
                },
                "wrap_start_time-wrap_end_time": {
                  "type": "string",
                  "format": "datetime"
                },
                "acd_id": {
                  "type": "integer"
                },
                "agent_priority": {
                  "type": "integer"
                },
                "acd_attached_data": {
                  "type": "integer"
                },
                "queued_skill_list": {
                  "type": "integer"
                },
                "queued_skill_list (third index)": {
                  "type": "integer"
                },
                "target_expression": {
                  "type": "integer"
                },
                "abandon": {
                  "type": "integer"
                },
                "acd_error_code": {
                  "type": "integer"
                },
                "acd_routing_status": {
                  "type": "integer"
                },
                "batched_flag": {
                  "type": "integer"
                },
                "benchmark": {
                  "type": "integer"
                },
                "channel_type": {
                  "type": "integer"
                },
                "default_route_reason": {
                  "type": "integer"
                },
                "is_vht_call": {
                  "type": "integer"
                },
                "is_vht_callback_call": {
                  "type": "integer"
                },
                "is_vht_outrange_call": {
                  "type": "integer"
                },
                "ixn_state": {
                  "type": "integer"
                },
                "routing_status": {
                  "type": "integer"
                },
                "terminated_reason": {
                  "type": "integer"
                },
                "tx_conf_type": {
                  "type": "integer"
                },
                "collected_digits": {
                  "type": "string"
                },
                "sla_blown_reason": {
                  "type": "string"
                },
                "vdn_history (2nd Index )": {
                  "type": "string"
                },
                "vdn_history (3rd Index )": {
                  "type": "string"
                },
                "vdn_history (4th Index )": {
                  "type": "string"
                },
                "vdn_history (5th Index )": {
                  "type": "string"
                },
                "vdn_history (6th Index )": {
                  "type": "string"
                },
                "vdn_history (7th Index )": {
                  "type": "string"
                },
                "vdn_history (8th Index )": {
                  "type": "string"
                },
                "vdn_history (9th Index )": {
                  "type": "string"
                },
                "agent_group_string": {
                  "type": "string"
                },
                "agent_station": {
                  "type": "string"
                },
                "call_type_string": {
                  "type": "string"
                },
                "called_number": {
                  "type": "string"
                },
                "tenant": {
                  "type": "string"
                },
                "guid": {
                  "type": "string"
                },
                "ans_agent": {
                  "type": "string"
                },
                "assigned_agent": {
                  "type": "string"
                },
                "ani": {
                  "type": "string"
                },
                "acd_ixn_id": {
                  "type": "string"
                },
                "acd_segment_id": {
                  "type": "string"
                },
                "acd_uid": {
                  "type": "string"
                }
              }
            },
            "ECHIRecordItem": {
              "type": "object",
              "properties": {
                "tenant_id": {
                  "type": "integer",
                  "format": "int64"
                },
                "acd_id": {
                  "type": "integer",
                  "format": "int64"
                },
                "callid": {
                  "type": "integer"
                },
                "acwtime": {
                  "type": "integer"
                },
                "ansholdtime": {
                  "type": "integer"
                },
                "consulttime": {
                  "type": "integer"
                },
                "disptime": {
                  "type": "integer"
                },
                "duration": {
                  "type": "integer"
                },
                "segstart": {
                  "type": "integer"
                },
                "segstart_utc": {
                  "type": "integer"
                },
                "segstop": {
                  "type": "integer"
                },
                "segstop_utc": {
                  "type": "integer"
                },
                "talktime": {
                  "type": "integer"
                },
                "netintime": {
                  "type": "integer"
                },
                "origholdtime": {
                  "type": "integer"
                },
                "queuetime": {
                  "type": "integer"
                },
                "ringtime": {
                  "type": "integer"
                },
                "tenant": {
                  "type": "integer"
                },
                "ecd_num": {
                  "type": "integer"
                },
                "dispivector": {
                  "type": "integer"
                },
                "dispsplit": {
                  "type": "integer"
                },
                "firstvector": {
                  "type": "integer"
                },
                "split1": {
                  "type": "integer"
                },
                "split2": {
                  "type": "integer"
                },
                "split3": {
                  "type": "integer"
                },
                "tkgrp": {
                  "type": "integer"
                },
                "eq_locid": {
                  "type": "integer"
                },
                "orig_locid": {
                  "type": "integer"
                },
                "ans_locid": {
                  "type": "integer"
                },
                "obs_locid": {
                  "type": "integer"
                },
                "uui_len": {
                  "type": "integer",
                  "format": "int16"
                },
                "assist": {
                  "type": "boolean"
                },
                "audio": {
                  "type": "boolean"
                },
                "conference": {
                  "type": "boolean"
                },
                "da_queued": {
                  "type": "boolean"
                },
                "holdabn": {
                  "type": "boolean"
                },
                "malicious": {
                  "type": "boolean"
                },
                "observingcall": {
                  "type": "boolean"
                },
                "transferred": {
                  "type": "boolean"
                },
                "agt_released": {
                  "type": "boolean"
                },
                "acd": {
                  "type": "integer"
                },
                "call_disp": {
                  "type": "integer"
                },
                "disppriority": {
                  "type": "integer"
                },
                "held": {
                  "type": "integer"
                },
                "segment": {
                  "type": "integer"
                },
                "ansreason": {
                  "type": "integer"
                },
                "origreason": {
                  "type": "integer"
                },
                "dispsklevel": {
                  "type": "integer"
                },
                "event1": {
                  "type": "integer"
                },
                "event2": {
                  "type": "integer"
                },
                "event3": {
                  "type": "integer"
                },
                "event4": {
                  "type": "integer"
                },
                "event5": {
                  "type": "integer"
                },
                "event6": {
                  "type": "integer"
                },
                "event7": {
                  "type": "integer"
                },
                "event8": {
                  "type": "integer"
                },
                "event9": {
                  "type": "integer"
                },
                "ecd_control": {
                  "type": "integer"
                },
                "ecd_info": {
                  "type": "integer"
                },
                "ucid": {
                  "type": "string"
                },
                "dispvdn": {
                  "type": "string"
                },
                "eqloc": {
                  "type": "string"
                },
                "firstvdn": {
                  "type": "string"
                },
                "origlogin": {
                  "type": "string"
                },
                "anslogin": {
                  "type": "string"
                },
                "lastobserver": {
                  "type": "string"
                },
                "dialed_num": {
                  "type": "string"
                },
                "calling_pty": {
                  "type": "string"
                },
                "lastdigits": {
                  "type": "string"
                },
                "lastcwc": {
                  "type": "string"
                },
                "calling_ii": {
                  "type": "string"
                },
                "cwc1": {
                  "type": "string"
                },
                "cwc2": {
                  "type": "string"
                },
                "cwc3": {
                  "type": "string"
                },
                "cwc4": {
                  "type": "string"
                },
                "cwc5": {
                  "type": "string"
                },
                "vdn2": {
                  "type": "string"
                },
                "vdn3": {
                  "type": "string"
                },
                "vdn4": {
                  "type": "string"
                },
                "vdn5": {
                  "type": "string"
                },
                "vdn6": {
                  "type": "string"
                },
                "vdn7": {
                  "type": "string"
                },
                "vdn8": {
                  "type": "string"
                },
                "vdn9": {
                  "type": "string"
                },
                "asai_uui": {
                  "type": "string"
                },
                "interruptdel": {
                  "type": "integer"
                },
                "agentsurplus": {
                  "type": "integer"
                },
                "agentskilllevel": {
                  "type": "integer"
                },
                "prefskilllevel": {
                  "type": "integer"
                },
                "icrresent": {
                  "type": "integer"
                },
                "icrpullreason": {
                  "type": "integer"
                },
                "orig_attrib_id": {
                  "type": "string"
                },
                "ans_attrib_id": {
                  "type": "string"
                },
                "obs_attrib_id": {
                  "type": "string"
                },
                "ecd_str": {
                  "type": "string"
                }
              }
            },
            "AccountDetailsResponse": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "http error code"
                },
                "message": {
                  "type": "string",
                  "description": "This is string error message"
                },
                "response": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "tenantId": {
                        "type": "integer",
                        "format": "int64"
                      },
                      "acdId": {
                        "type": "integer",
                        "format": "int64"
                      },
                      "accountId": {
                        "type": "integer",
                        "format": "int64"
                      },
                      "Lob": {
                        "type": "string"
                      },
                      "accountCode": {
                        "type": "string"
                      },
                      "accountName": {
                        "type": "string"
                      },
                      "region": {
                        "type": "string"
                      },
                      "country": {
                        "type": "string"
                      },
                      "ani": {
                        "type": "string"
                      },
                      "domain": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "ACDRRequest": {
              "type": "object",
              "properties": {
                "tenant_id": {
                  "type": "integer",
                  "format": "int64"
                },
                "acd_id": {
                  "type": "integer",
                  "format": "int64"
                },
                "disp_time": {
                  "type": "string",
                  "format": "datetime"
                },
                "start_time": {
                  "type": "string",
                  "format": "datetime"
                },
                "end_time": {
                  "type": "string",
                  "format": "datetime"
                },
                "limit": {
                  "type": "integer"
                },
                "offset": {
                  "type": "integer"
                }
              },
              "required": [
                "acd_id",
                "tenant_id"
              ]
            },
            "AggregateRecordsResponse": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "http error code"
                },
                "message": {
                  "type": "string",
                  "description": "This is string error message"
                },
                "response": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AggregateRecordsResponseItem"
                  }
                }
              }
            },
            "AggregateRecordsResponseItem": {
              "type": "object",
              "properties": {
                "agent_group_id": {
                  "type": "integer"
                },
                "agent_group_name": {
                  "type": "string"
                },
                "agent_group_exp": {
                  "type": "string"
                },
                "num_of_call_in_queue": {
                  "type": "integer"
                },
                "longest_waiting_call": {
                  "type": "integer"
                },
                "available_agents": {
                  "type": "integer"
                },
                "logged_in_agents": {
                  "type": "integer"
                },
                "tenant_name": {
                  "type": "string"
                },
                "most_idle_agent_in_sec": {
                  "type": "integer"
                }
              }
            },
            "InteractionRequest": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "tenant_id": {
                  "type": "string"
                },
                "parent_id": {
                  "type": "string"
                },
                "ixn_acd_attributes": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "key": {
                        "type": "string"
                      },
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "InteractionResponse": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "http error code"
                },
                "message": {
                  "type": "string",
                  "description": "This is string error message"
                },
                "response": {
                  "type": "object",
                  "properties": {
                    "parent_id": {
                      "type": "string"
                    },
                    "ixn_acd_attributes": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "key": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "SetParentGUIDRequest": {
              "type": "object",
              "properties": {
                "tenant_id": {
                  "type": "integer"
                },
                "acd_id": {
                  "type": "integer"
                },
                "parent_guid": {
                  "type": "string"
                }
              }
            },
            "SetParentGUIDResponse": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "http response code"
                },
                "message": {
                  "type": "string",
                  "description": "This is response code message string"
                },
                "response": {
                  "type": "object",
                  "description": "IXN object"
                }
              }
            },
            "getIxnData": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "http error code"
                },
                "message": {
                  "type": "string",
                  "description": "This is string error message"
                },
                "response": {
                  "type": "object",
                  "properties": {
                    "guid": {
                      "type": "string"
                    },
                    "call_ani": {
                      "type": "string"
                    },
                    "call_type": {
                      "type": "integer"
                    },
                    "agent_group": {
                      "type": "integer"
                    },
                    "cust_name": {
                      "type": "string"
                    },
                    "queue_time": {
                      "type": "integer"
                    },
                    "call_uui": {
                      "type": "string"
                    },
                    "tfn": {
                      "type": "string"
                    },
                    "transfer": {
                      "type": "string"
                    },
                    "ixn_acd_attributes": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "key": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "AgentStateRequest": {
              "type": "object",
              "properties": {
                "tenant_id": {
                  "type": "integer"
                },
                "acd_id": {
                  "type": "integer"
                },
                "agent_id": {
                  "type": "integer"
                }
              }
            },
            "AgentStateResponse": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "http error code"
                },
                "message": {
                  "type": "string",
                  "description": "This is string error message"
                },
                "response": {
                  "type": "object",
                  "properties": {
                    "station_id": {
                      "type": "integer"
                    },
                    "current_state": {
                      "type": "integer"
                    },
                    "pending_state": {
                      "type": "integer"
                    },
                    "ixn_info": {
                      "type": "object",
                      "properties": {
                        "voice_ixns": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "ixn": {
                                "type": "integer"
                              },
                              "guid": {
                                "type": "string"
                              },
                              "child_ixns": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "guid": {
                                      "type": "integer"
                                    },
                                    "channel_type": {
                                      "type": "integer"
                                    },
                                    "ixn_id": {
                                      "type": "integer"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "facebook_ixns": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "ixn": {
                                "type": "integer"
                              },
                              "guid": {
                                "type": "string"
                              },
                              "child_ixns": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "guid": {
                                      "type": "integer"
                                    },
                                    "channel_type": {
                                      "type": "integer"
                                    },
                                    "ixn_id": {
                                      "type": "integer"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "whatsapp_ixns": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "ixn": {
                                "type": "integer"
                              },
                              "guid": {
                                "type": "string"
                              },
                              "child_ixns": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "guid": {
                                      "type": "integer"
                                    },
                                    "channel_type": {
                                      "type": "integer"
                                    },
                                    "ixn_id": {
                                      "type": "integer"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "chat_ixns": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "ixn": {
                                "type": "integer"
                              },
                              "guid": {
                                "type": "string"
                              },
                              "child_ixns": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "guid": {
                                      "type": "integer"
                                    },
                                    "channel_type": {
                                      "type": "integer"
                                    },
                                    "ixn_id": {
                                      "type": "integer"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "email_ixns": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "ixn": {
                                "type": "integer"
                              },
                              "guid": {
                                "type": "string"
                              },
                              "child_ixns": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "guid": {
                                      "type": "integer"
                                    },
                                    "channel_type": {
                                      "type": "integer"
                                    },
                                    "ixn_id": {
                                      "type": "integer"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "CombineHistoryCountRequest": {
              "type": "object",
              "properties": {
                "tenant_id": {
                  "type": "integer",
                  "description": "Tenant ID"
                },
                "channel_id": {
                  "type": "integer",
                  "description": "Channel ID to get related count"
                },
                "call_followup_flag": {
                  "type": "integer",
                  "description": "Call Followup Flag"
                },
                "acd_id": {
                  "type": "integer",
                  "description": "ACD ID"
                },
                "ans_agent_id": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Agent ID"
                },
                "start_time": {
                  "$ref": "#/components/schemas/DateOrLong"
                },
                "end_time": {
                  "$ref": "#/components/schemas/DateOrLong"
                }
              },
              "required": [
                "tenant_id",
                "acd_id",
                "ans_agent_id",
                "start_time",
                "end_time",
                "call_followup_flag",
                "channel_id"
              ]
            },
            "CombineHistoryCountResponse": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "http return code"
                },
                "message": {
                  "type": "string",
                  "description": "This is string message for code explanation"
                },
                "response": {
                  "type": "integer",
                  "description": "Count for requested channel"
                }
              }
            },
            "CustomerIXNHistoryCountRequest": {
              "type": "object",
              "properties": {
                "tenant_id": {
                  "type": "integer",
                  "description": "Tenant ID"
                },
                "call_channel": {
                  "type": "string",
                  "description": "Channel name"
                },
                "call_followup_flag": {
                  "type": "integer",
                  "description": "Call Followup Flag"
                },
                "acd_id": {
                  "type": "integer",
                  "description": "ACD ID as integer"
                },
                "ans_agent_id": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Agent ID"
                },
                "start_time": {
                  "$ref": "#/components/schemas/DateOrLong"
                },
                "end_time": {
                  "$ref": "#/components/schemas/DateOrLong"
                }
              },
              "required": [
                "tenant_id",
                "acd_id",
                "ans_agent_id",
                "start_time",
                "end_time",
                "call_channel",
                "call_followup_flag"
              ]
            },
            "CustomerIXNHistoryCountResponse": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "http return code"
                },
                "message": {
                  "type": "string",
                  "description": "This is string message for code explanation"
                },
                "response": {
                  "type": "integer",
                  "description": "Count for requested channel"
                }
              }
            },
            "WSEFSRequest": {
              "type": "object",
              "properties": {
                "client_id": {
                  "type": "string"
                },
                "tenant_id": {
                  "type": "integer"
                },
                "op_type": {
                  "type": "string",
                  "enum": [
                    "response",
                    "alert"
                  ],
                  "description": "One of the types"
                },
                "subscription": {
                  "type": "boolean"
                },
                "operation": {
                  "type": "string",
                  "enum": [
                    "efs_register_agent_id",
                    "efs_send_response_email",
                    "efs_fetch_email",
                    "efs_fetch_email_on_guid",
                    "efs_fetch_email_on_acd_ixn_id",
                    "efs_fetch_raw_email",
                    "efs_patch_email_entry",
                    "efs_patch_email_attributes",
                    "efs_init_send_new_email",
                    "efs_email_available_ack",
                    "efs_init_send_response_email",
                    "efs_email_sent",
                    "efs_email_available",
                    "efs_error_event",
                    "efs_terminate_ixn",
                    "efs_reassign_agent",
                    "efs_agent_reassigned",
                    "efs_ringing_event",
                    "efs_ring_event_response"
                  ],
                  "description": "efs_register_agent_id = 20000, efs_send_response_email = 20020, efs_fetch_email = 20030, efs_fetch_email_on_guid = 20040, efs_fetch_email_on_acd_ixn_id = 20050, efs_patch_email_entry = 20060, efs_patch_email_attributes = 20070, efs_fetch_raw_email = 20080, efs_init_send_new_email = 1, efs_email_available_ack = 2, efs_init_send_response_email = 3, efs_email_sent = 6, efs_email_available = 7, efs_error_event = 7, efs_terminate_ixn = 11, efs_reassign_agent = 12, efs_agent_reassigned = 13, efs_ringing_event = 14, efs_ring_event_response = 15"
                },
                "agent_id": {
                  "type": "integer"
                },
                "ixn_id": {
                  "type": "integer"
                },
                "result": {
                  "type": "integer"
                },
                "dest_address": {
                  "type": "string"
                },
                "original_email_id": {
                  "type": "integer"
                },
                "email_data": {
                  "type": "object",
                  "properties": {
                    "subject": {
                      "type": "string"
                    },
                    "email": {
                      "type": "string"
                    },
                    "email_id": {
                      "type": "string"
                    },
                    "server_address": {
                      "type": "string"
                    },
                    "far_end_address": {
                      "type": "string"
                    },
                    "email_event": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "WSAMSRequest": {
              "type": "object",
              "properties": {
                "client_id": {
                  "type": "string",
                  "description": "A valid client WebSocket token to get a response over the client's WebSocket connection."
                },
                "tenant_id": {
                  "type": "integer",
                  "description": "The client tenant ID"
                },
                "ixn_id": {
                  "type": "integer",
                  "description": "The interaction ID"
                },
                "op_type": {
                  "type": "string",
                  "description": "One of the given values:\n\n- response\n- alert\n"
                },
                "password": {
                  "type": "string",
                  "description": "The password of the agent account."
                },
                "station_id": {
                  "type": "integer",
                  "description": "The ID of the station the agent is currently using/logged in. Required when using the login command."
                },
                "operation": {
                  "type": "string",
                  "description": "\nProvide any one of the AMS command value given below:\n\n- tfs_agent_login\n- tfs_agent_logout\n- tfs_agent_on_break\n- tfs_agent_auto_in\n- tfs_agent_manual_in\n- tfs_agent_on_acw\n- tfs_call_initiated\n- tfs_call_originated\n- tfs_call_ringing\n- tfs_call_connected\n- tfs_call_terminated\n- tfs_call_ring_no_answer\n- tfs_call_merged\n- tfs_endpoint_not_found\n- tfs_tcp_disconnection\n- tfs_call_not_acceptable\n- tfs_call_held\n- tfs_call_resume\n- wss_agent_force_logout\n- tfs_register_agent_id\n"
                },
                "agent_id": {
                  "type": "integer",
                  "description": "The agent ID is generated and returned by the SHM when an Agent is configured by the client. This agent ID will not change throughout the lifetime of the tenant ID for that particular Agent"
                },
                "subscription": {
                  "type": "boolean"
                },
                "cur_state": {
                  "type": "integer",
                  "enum": [
                    -1,
                    0,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8
                  ],
                  "description": "- AS_UNKNOWN = -1\n- AS_Idle = 0\n- AS_Break = 1\n- AS_Ring = 2\n- AS_Talk = 3 \n- AS_Wrap = 4\n- AS_Other = 5\n- AS_Hold = 6\n- AS_Login = 7\n- AS_Logout = 8  \n"
                },
                "sip_ip": {
                  "type": "string"
                }
              }
            },
            "WSCFSRequest": {
              "type": "object",
              "properties": {
                "client_id": {
                  "type": "string"
                },
                "tenant_id": {
                  "type": "integer"
                },
                "op_type": {
                  "type": "string",
                  "description": "  One of below: - response - alert "
                },
                "subscription": {
                  "type": "boolean"
                },
                "operation": {
                  "type": "string",
                  "description": "  One of below: - cfs_customer_initiated_chat - cfs_terminate_chat_ixn - cfs_customer_initiated_chat_reply - cfs_terminate_chat_ixn_agent - cfs_ringing_event - cfs_ringing_event_response - cfs_register_agent_id "
                },
                "agent_id": {
                  "type": "integer"
                },
                "agent_name": {
                  "type": "string"
                },
                "ixn_id": {
                  "type": "integer"
                },
                "customer_id": {
                  "type": "integer"
                },
                "message": {
                  "type": "string"
                },
                "reason": {
                  "type": "integer",
                  "enum": [
                    0,
                    1,
                    2
                  ],
                  "description": "Resolved = 0, Mark_Spam = 1, Reassign = 2"
                },
                "result": {
                  "type": "integer",
                  "enum": [
                    0,
                    1
                  ],
                  "description": "0 = Accept, 1 = Reject\n"
                }
              }
            },
            "WSWhatsappMfsRequest": {
              "type": "object",
              "properties": {
                "client_id": {
                  "type": "string"
                },
                "tenant_id": {
                  "type": "integer"
                },
                "op_type": {
                  "type": "string",
                  "description": "  One of below: - response - alert "
                },
                "subscription": {
                  "type": "boolean"
                },
                "operation": {
                  "type": "string",
                  "description": "  One of below: - smfs_whatsapp_agent_initiated_reply - smfs_whatsapp_agent_reply - smfs_whatsapp_agent_retrieve_history - smfs_terminate_ixn - smfs_whatsapp_mark_spam - smfs_whatsapp_unmark_spam - smfs_whatsapp_customer_initiated - smfs_whatsapp_escalation - smfs_whatsapp_customer_reply - smfs_whatsapp_message_status # - smfs_whatsapp_message_sent # - smfs_whatsapp_message_delivered # - smfs_whatsapp_sending_error "
                },
                "agent_id": {
                  "type": "integer"
                },
                "ixn_id": {
                  "type": "integer"
                },
                "str_data": {
                  "type": "string"
                },
                "msg_id": {
                  "type": "string"
                },
                "from": {
                  "type": "string"
                },
                "limit": {
                  "type": "integer"
                },
                "offset": {
                  "type": "integer"
                },
                "type": {
                  "type": "string"
                },
                "reason": {
                  "type": "integer",
                  "enum": [
                    0,
                    1,
                    2
                  ],
                  "description": "text = 0, image = 1, file = 2"
                }
              }
            },
            "WSSmsMfsRequest": {
              "type": "object",
              "properties": {
                "client_id": {
                  "type": "string"
                },
                "tenant_id": {
                  "type": "integer"
                },
                "op_type": {
                  "type": "string",
                  "description": "  One of below: - response - alert "
                },
                "subscription": {
                  "type": "boolean"
                },
                "operation": {
                  "type": "string",
                  "description": "  One of below: - smfs_sms_agent_initiated_reply - smfs_sms_agent_reply - smfs_sms_agent_retrieve_history - smfs_terminate_ixn - smfs_sms_mark_spam - smfs_sms_unmark_spam - smfs_sms_customer_initiated - smfs_sms_escalation - smfs_sms_customer_reply - smfs_sms_message_sent - smfs_sms_message_delivered - smfs_sms_sending_error "
                },
                "agent_id": {
                  "type": "integer"
                },
                "ixn_id": {
                  "type": "integer"
                },
                "str_data": {
                  "type": "string"
                },
                "msg_id": {
                  "type": "string"
                },
                "from": {
                  "type": "string"
                },
                "limit": {
                  "type": "integer"
                },
                "offset": {
                  "type": "integer"
                },
                "type": {
                  "type": "string"
                },
                "reason": {
                  "type": "integer",
                  "enum": [
                    0,
                    1,
                    2
                  ],
                  "description": "text = 0, image = 1, file = 2"
                }
              }
            },
            "WSMessengerMfsRequest": {
              "type": "object",
              "properties": {
                "client_id": {
                  "type": "string"
                },
                "tenant_id": {
                  "type": "integer"
                },
                "op_type": {
                  "type": "string",
                  "description": "  One of below: - response - alert "
                },
                "subscription": {
                  "type": "boolean"
                },
                "operation": {
                  "type": "string",
                  "description": "  One of below: - smfs_messenger_agent_initiated_reply - smfs_messenger_agent_reply - smfs_messenger_agent_retrieve_history - smfs_terminate_ixn - smfs_messenger_mark_spam - smfs_messenger_unmark_spam - smfs_messenger_customer_initiated - smfs_messenger_customer_reply - smfs_messenger_message_sent - smfs_messenger_message_delivered - smfs_messenger_sending_error - smfs_messenger_escalation "
                },
                "agent_id": {
                  "type": "integer"
                },
                "ixn_id": {
                  "type": "integer"
                },
                "str_data": {
                  "type": "string"
                },
                "msg_id": {
                  "type": "string"
                },
                "from": {
                  "type": "string"
                },
                "limit": {
                  "type": "integer"
                },
                "offset": {
                  "type": "integer"
                },
                "type": {
                  "type": "string"
                },
                "reason": {
                  "type": "integer",
                  "enum": [
                    0,
                    1,
                    2
                  ],
                  "description": "text = 0, image = 1, file = 2"
                }
              }
            },
            "WSCommandAPIResponse": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "description": "error code in http error code"
                },
                "message": {
                  "type": "string",
                  "description": "some details on error which extent is possible. Or success message that \"Command successfully sent to AMS, please wait for response.\""
                }
              }
            },
            "WSAMSCommandResponse": {
              "type": "object",
              "properties": {
                "agent_id": {
                  "type": "integer"
                },
                "ixn_id": {
                  "type": "integer"
                },
                "current_state": {
                  "type": "integer"
                },
                "current_state_return_code": {
                  "type": "integer"
                },
                "pending_state": {
                  "type": "integer"
                },
                "pending_state_return_code": {
                  "type": "integer"
                },
                "operation": {
                  "type": "string",
                  "description": "  One of below: - tfs_agent_login - tfs_agent_logout - tfs_agent_on_break - tfs_agent_auto_in - tfs_agent_manual_in - tfs_agent_on_acw - tfs_call_initiated - tfs_call_originated - tfs_call_ringing - tfs_call_connected - tfs_call_terminated - tfs_call_ring_no_answer - tfs_call_merged - tfs_endpoint_not_found - tfs_tcp_disconnection - tfs_call_not_acceptable - tfs_call_held - tfs_call_resume - wss_agent_force_logout - tfs_register_agent_id "
                },
                "op_type": {
                  "type": "string",
                  "description": "command"
                }
              }
            },
            "WSAMSAlertResponse": {
              "type": "object",
              "properties": {
                "agent_id": {
                  "type": "integer"
                },
                "ixn_id": {
                  "type": "integer"
                },
                "current_state": {
                  "type": "integer"
                },
                "current_state_return_code": {
                  "type": "integer"
                },
                "pending_state": {
                  "type": "integer"
                },
                "pending_state_return_code": {
                  "type": "integer"
                },
                "operation": {
                  "type": "string"
                },
                "op_type": {
                  "type": "string",
                  "description": "alert"
                },
                "call_ani": {
                  "type": "string"
                },
                "call_type": {
                  "type": "integer"
                },
                "agent_group": {
                  "type": "integer"
                },
                "cust_name": {
                  "type": "string"
                },
                "queue_time": {
                  "type": "number",
                  "format": "int64"
                },
                "call_uui": {
                  "type": "string"
                },
                "tfn": {
                  "type": "string"
                },
                "transfer": {
                  "type": "string"
                },
                "ixn_attribute1_name": {
                  "type": "string"
                },
                "ixn_attribute2_name": {
                  "type": "string"
                }
              }
            },
            "WSEFSAlertResponse": {
              "type": "object",
              "properties": {
                "agent_id": {
                  "type": "integer"
                },
                "original_email_id": {
                  "type": "integer"
                },
                "ixn_id": {
                  "type": "integer"
                },
                "tenant_id": {
                  "type": "integer"
                },
                "email_event": {
                  "type": "string"
                },
                "operation": {
                  "type": "string"
                },
                "op_type": {
                  "type": "string",
                  "description": "alert"
                },
                "channel_type": {
                  "type": "string"
                },
                "ixn_attribute1_name": {
                  "type": "string"
                },
                "ixn_attribute2_name": {
                  "type": "string"
                }
              }
            },
            "WSEFSCommandResponse": {
              "type": "object",
              "properties": {
                "client_id": {
                  "type": "string"
                },
                "agent_id": {
                  "type": "integer"
                },
                "ixn_id": {
                  "type": "integer"
                },
                "op_type": {
                  "type": "string",
                  "description": "command"
                },
                "operation": {
                  "type": "string",
                  "enum": [
                    "efs_register_agent_id",
                    "efs_send_response_email",
                    "efs_fetch_email",
                    "efs_fetch_email_on_guid",
                    "efs_fetch_email_on_acd_ixn_id",
                    "efs_patch_email_entry",
                    "efs_patch_email_attributes",
                    "efs_init_send_new_email",
                    "efs_email_available_ack",
                    "efs_init_send_response_email",
                    "efs_email_sent",
                    "efs_email_available",
                    "efs_error_event",
                    "efs_terminate_ixn",
                    "efs_reassign_agent",
                    "efs_agent_reassigned",
                    "efs_ringing_event",
                    "efs_ring_event_response"
                  ],
                  "description": "efs_register_agent_id = 20000, efs_send_response_email = 20020, efs_fetch_email = 20030, efs_fetch_email_on_guid = 20040, efs_fetch_email_on_acd_ixn_id = 20050, efs_patch_email_entry = 20060, efs_patch_email_attributes = 20070, efs_init_send_new_email = 1, efs_email_available_ack = 2, efs_init_send_response_email = 3, efs_email_sent = 6, efs_email_available = 7, efs_error_event = 7, efs_terminate_ixn = 11, efs_reassign_agent = 12, efs_agent_reassigned = 13, efs_ringing_event = 14, efs_ring_event_response = 15"
                },
                "email_data": {
                  "type": "object",
                  "properties": {
                    "subject": {
                      "type": "string"
                    },
                    "email": {
                      "type": "string"
                    },
                    "email_id": {
                      "type": "string"
                    },
                    "far_end_address": {
                      "type": "string"
                    },
                    "server_address": {
                      "type": "string"
                    },
                    "email_type": {
                      "type": "string"
                    },
                    "email_event": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "WSCFSAlertResponse": {
              "type": "object",
              "properties": {
                "agent_id": {
                  "type": "integer"
                },
                "ixn_id": {
                  "type": "integer"
                },
                "tenant_id": {
                  "type": "integer"
                },
                "client_id": {
                  "type": "string"
                },
                "customer_name": {
                  "type": "string"
                },
                "customer_id": {
                  "type": "string"
                },
                "operation": {
                  "type": "string"
                },
                "op_type": {
                  "type": "string",
                  "description": "alert"
                },
                "message": {
                  "type": "string"
                },
                "message_ts": {
                  "type": "integer",
                  "format": "int64"
                },
                "reason": {
                  "type": "integer",
                  "enum": [
                    1,
                    2
                  ],
                  "description": "Inactivity = 1, Disconnect = 2"
                }
              }
            },
            "WSWhatsappMfsAlertResponse": {
              "type": "object",
              "properties": {
                "agent_id": {
                  "type": "integer"
                },
                "ixn_id": {
                  "type": "integer"
                },
                "tenant_id": {
                  "type": "integer"
                },
                "client_id": {
                  "type": "string"
                },
                "agent_name": {
                  "type": "string"
                },
                "from": {
                  "type": "string"
                },
                "source": {
                  "type": "string"
                },
                "str_data": {
                  "type": "string"
                },
                "request_time": {
                  "type": "integer"
                },
                "operation": {
                  "type": "string"
                },
                "op_type": {
                  "type": "string",
                  "description": "alert"
                },
                "msg": {
                  "type": "string"
                },
                "msg_id": {
                  "type": "string"
                },
                "type": {
                  "type": "integer",
                  "enum": [
                    0,
                    1,
                    2
                  ],
                  "description": "text = 0, image = 1, file = 2"
                }
              }
            },
            "WSSmsMfsAlertResponse": {
              "type": "object",
              "properties": {
                "agent_id": {
                  "type": "integer"
                },
                "ixn_id": {
                  "type": "integer"
                },
                "tenant_id": {
                  "type": "integer"
                },
                "client_id": {
                  "type": "string"
                },
                "agent_name": {
                  "type": "string"
                },
                "from": {
                  "type": "string"
                },
                "source": {
                  "type": "string"
                },
                "str_data": {
                  "type": "string"
                },
                "request_time": {
                  "type": "integer"
                },
                "operation": {
                  "type": "string"
                },
                "op_type": {
                  "type": "string",
                  "description": "alert"
                },
                "msg": {
                  "type": "string"
                },
                "msg_id": {
                  "type": "string"
                },
                "type": {
                  "type": "integer",
                  "enum": [
                    0,
                    1,
                    2
                  ],
                  "description": "text = 0, image = 1, file = 2"
                }
              }
            },
            "WSMessengerMfsAlertResponse": {
              "type": "object",
              "properties": {
                "agent_id": {
                  "type": "integer"
                },
                "ixn_id": {
                  "type": "integer"
                },
                "tenant_id": {
                  "type": "integer"
                },
                "client_id": {
                  "type": "string"
                },
                "agent_name": {
                  "type": "string"
                },
                "from": {
                  "type": "string"
                },
                "source": {
                  "type": "string"
                },
                "str_data": {
                  "type": "string"
                },
                "request_time": {
                  "type": "integer"
                },
                "operation": {
                  "type": "string"
                },
                "op_type": {
                  "type": "string",
                  "description": "alert"
                },
                "msg": {
                  "type": "string"
                },
                "msg_id": {
                  "type": "string"
                },
                "type": {
                  "type": "integer",
                  "enum": [
                    0,
                    1,
                    2
                  ],
                  "description": "text = 0, image = 1, file = 2"
                }
              }
            },
            "WSCFSCommandResponse": {
              "type": "object",
              "properties": {
                "client_id": {
                  "type": "string"
                },
                "tenant_id": {
                  "type": "integer"
                },
                "op_type": {
                  "type": "string",
                  "description": "command"
                },
                "subscription": {
                  "type": "boolean"
                },
                "operation": {
                  "type": "string",
                  "description": "  One of below: - cfs_customer_initiated_chat - cfs_terminate_chat_ixn - cfs_customer_initiated_chat_reply - cfs_terminate_chat_ixn_agent - cfs_ringing_event - cfs_ringing_event_response - cfs_register_agent_id "
                }
              }
            },
            "WSWhatsappMfsCommandResponse": {
              "type": "object",
              "properties": {
                "client_id": {
                  "type": "string"
                },
                "tenant_id": {
                  "type": "integer"
                },
                "op_type": {
                  "type": "string",
                  "description": "command"
                },
                "subscription": {
                  "type": "boolean"
                },
                "operation": {
                  "type": "string",
                  "description": "  One of below: - smfs_whatsapp_agent_initiated_reply - smfs_whatsapp_agent_reply - smfs_whatsapp_agent_retrieve_history - smfs_terminate_ixn - smfs_whatsapp_mark_spam - smfs_whatsapp_unmark_spam - smfs_whatsapp_customer_initiated - smfs_whatsapp_escalation - smfs_whatsapp_customer_reply - smfs_whatsapp_message_status "
                }
              }
            },
            "WSSmsMfsCommandResponse": {
              "type": "object",
              "properties": {
                "client_id": {
                  "type": "string"
                },
                "tenant_id": {
                  "type": "integer"
                },
                "op_type": {
                  "type": "string",
                  "description": "command"
                },
                "subscription": {
                  "type": "boolean"
                },
                "operation": {
                  "type": "string",
                  "description": "  One of below: - smfs_sms_agent_initiated_reply - smfs_sms_agent_reply - smfs_sms_agent_retrieve_history - smfs_terminate_ixn - smfs_sms_mark_spam - smfs_sms_unmark_spam - smfs_sms_customer_initiated - smfs_sms_escalation - smfs_sms_customer_reply - smfs_sms_message_status "
                }
              }
            },
            "WSMessengerMfsCommandResponse": {
              "type": "object",
              "properties": {
                "client_id": {
                  "type": "string"
                },
                "tenant_id": {
                  "type": "integer"
                },
                "op_type": {
                  "type": "string",
                  "description": "command"
                },
                "subscription": {
                  "type": "boolean"
                },
                "operation": {
                  "type": "string",
                  "description": "  One of below: - smfs_messenger_agent_initiated_reply - smfs_messenger_agent_reply - smfs_messenger_agent_retrieve_history - smfs_terminate_ixn - smfs_messenger_mark_spam - smfs_messenger_unmark_spam - smfs_messenger_customer_initiated - smfs_messenger_customer_reply - smfs_messenger_message_status - smfs_messenger_escalation "
                }
              }
            },
            "DateOrLong": {
              "oneOf": [
                {
                  "type": "integer",
                  "format": "int64",
                  "description": "miliseconds"
                },
                {
                  "type": "string",
                  "format": "yyyy:mm:ddThh:mm:ss",
                  "description": "UTC string"
                }
              ]
            },
            "Error": {
              "type": "object",
              "required": [
                "code",
                "message"
              ],
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32"
                },
                "message": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    {
      "label": "Mega Voice",
      "value": "Mega-Voice",
      "Specs": {
        "swagger": "2.0",
        "info": {
          "description": "MegaACD Configuration Server REST API",
          "version": "2.20.0",
          "title": "MegaACD Configuration Server"
        },
        "basePath": "/",
        "tags": [],
        "schemes": [
          "http"
        ],
        "paths": {
          "/tenants": {
            "get": {
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Tenant"
                    }
                  }
                }
              },
              "tags": [
                "Tenants"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "post": {
              "parameters": [
                {
                  "name": "CreateTenantDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/CreateTenantDto"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Tenant"
                  }
                },
                "400": {
                  "description": "Invalid request"
                }
              },
              "tags": [
                "Tenants"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/pods": {
            "get": {
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Tenant"
                    }
                  }
                }
              },
              "tags": [
                "Tenants"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{id}/logo": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "id",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "string"
                  }
                },
                "400": {
                  "description": "Tenant not Found"
                }
              },
              "tags": [
                "Tenants"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "post": {
              "parameters": [
                {
                  "name": "TenantFileDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/TenantFileDto"
                  }
                },
                {
                  "type": "string",
                  "name": "id",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Tenant"
                  }
                },
                "404": {
                  "description": ""
                }
              },
              "tags": [
                "Tenants"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{id}": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "id",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Tenant"
                  }
                },
                "400": {
                  "description": "Tenant not Found"
                }
              },
              "tags": [
                "Tenants"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "delete": {
              "parameters": [
                {
                  "type": "string",
                  "name": "id",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Deleted"
                },
                "400": {
                  "description": "Tenant not Found"
                }
              },
              "tags": [
                "Tenants"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "put": {
              "parameters": [
                {
                  "type": "string",
                  "name": "id",
                  "required": true,
                  "in": "path"
                },
                {
                  "name": "UpdateTenantDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/UpdateTenantDto"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Tenant"
                  }
                },
                "400": {
                  "description": "Invalid request"
                }
              },
              "tags": [
                "Tenants"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{id}/activate": {
            "post": {
              "parameters": [
                {
                  "type": "string",
                  "name": "id",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Tenant"
                  }
                },
                "404": {
                  "description": ""
                }
              },
              "tags": [
                "Tenants"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{id}/deactivate": {
            "post": {
              "parameters": [
                {
                  "type": "string",
                  "name": "id",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Tenant"
                  }
                },
                "404": {
                  "description": ""
                }
              },
              "tags": [
                "Tenants"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{id}/admin-account": {
            "post": {
              "parameters": [
                {
                  "name": "CreateAdminAccountDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/CreateAdminAccountDto"
                  }
                },
                {
                  "type": "string",
                  "name": "id",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Tenant"
                  }
                },
                "404": {
                  "description": ""
                }
              },
              "tags": [
                "Tenants"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/bulk": {
            "delete": {
              "parameters": [
                {
                  "name": "BulkDeleteEntityDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/BulkDeleteEntityDto"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "Deleted"
                },
                "400": {
                  "description": "Tenant not Found"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Tenants"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{id}/mega-boxes": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "id",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Tenant"
                    }
                  }
                }
              },
              "tags": [
                "Tenants"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{id}/tenantInfo": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "id",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Tenant"
                    }
                  }
                }
              },
              "tags": [
                "Tenants"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/megabox": {
            "get": {
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Megabox"
                    }
                  }
                }
              },
              "tags": [
                "MegaBox"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "post": {
              "parameters": [
                {
                  "name": "CreateMegaBoxDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/CreateMegaBoxDto"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Megabox"
                  }
                }
              },
              "tags": [
                "MegaBox"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/megabox/{id}": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "id",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Megabox"
                  }
                }
              },
              "tags": [
                "MegaBox"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "put": {
              "parameters": [
                {
                  "type": "string",
                  "name": "id",
                  "required": true,
                  "in": "path"
                },
                {
                  "name": "UpdateMegaBoxDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/UpdateMegaBoxDto"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Megabox"
                  }
                },
                "400": {
                  "description": "Invalid request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "MegaBox"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "delete": {
              "parameters": [
                {
                  "type": "string",
                  "name": "id",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Deleted"
                }
              },
              "tags": [
                "MegaBox"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/megabox/bulk": {
            "delete": {
              "parameters": [
                {
                  "name": "BulkDeleteEntityDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/BulkDeleteEntityDto"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "Deleted"
                }
              },
              "tags": [
                "MegaBox"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/lookup/json-schema/type/{type}": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "type",
                  "required": true,
                  "in": "path",
                  "enum": [
                    "DialPlanScheme",
                    "EmployeePermission",
                    "StationType",
                    "ButtonFeatures",
                    "Features",
                    "GlobalConfigurations",
                    "AutoAnswerEmployee",
                    "AutoAnswerStation",
                    "WorkModeOnLogin",
                    "WorkModeOnLoginSystemWide",
                    "ReasonCodeType",
                    "ReasonCodeTypeSystemWide",
                    "CallingRestrictionCOR",
                    "DeviceDataItems",
                    "CORPermissions",
                    "VUStatsAgents",
                    "VUStatsSplit"
                  ]
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Lookup"
                    }
                  }
                }
              },
              "tags": [
                "Lookups"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/lookup": {
            "get": {
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Lookup"
                    }
                  }
                }
              },
              "tags": [
                "Lookups"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/lookup/type/{type}": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "type",
                  "required": true,
                  "in": "path",
                  "enum": [
                    "DialPlanScheme",
                    "EmployeePermission",
                    "StationType",
                    "ButtonFeatures",
                    "Features",
                    "GlobalConfigurations",
                    "AutoAnswerEmployee",
                    "AutoAnswerStation",
                    "WorkModeOnLogin",
                    "WorkModeOnLoginSystemWide",
                    "ReasonCodeType",
                    "ReasonCodeTypeSystemWide",
                    "CallingRestrictionCOR",
                    "DeviceDataItems",
                    "CORPermissions",
                    "VUStatsAgents",
                    "VUStatsSplit"
                  ]
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Lookup"
                    }
                  }
                }
              },
              "tags": [
                "Lookups"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/acd-engines": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": false,
                  "in": "query",
                  "description": "The ID of the tenant for which all AcdEngines are to be returned"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/AcdEngine"
                    }
                  }
                }
              },
              "tags": [
                "ACD Engines"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "post": {
              "parameters": [
                {
                  "name": "CreateAcdEngineDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/CreateAcdEngineDto"
                  }
                }
              ],
              "responses": {
                "201": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/AcdEngine"
                  }
                }
              },
              "tags": [
                "ACD Engines"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/acd-engines/{id}": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "id",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/AcdEngine"
                  }
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "ACD Engines"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "put": {
              "parameters": [
                {
                  "type": "string",
                  "name": "id",
                  "required": true,
                  "in": "path"
                },
                {
                  "name": "UpdateAcdEngineDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/UpdateAcdEngineDto"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/AcdEngine"
                  }
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "ACD Engines"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "delete": {
              "parameters": [
                {
                  "type": "string",
                  "name": "id",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Deleted"
                }
              },
              "tags": [
                "ACD Engines"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/acd-engines/bulk": {
            "delete": {
              "parameters": [
                {
                  "name": "BulkDeleteEntityDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/BulkDeleteEntityDto"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "Deleted"
                }
              },
              "tags": [
                "ACD Engines"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/switch-etl/agentgroups": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "acdId",
                  "required": true,
                  "in": "query"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/CreateEmployeeGroupDto"
                    }
                  }
                },
                "404": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/ErrorResponse"
                  }
                }
              },
              "tags": [
                "Switch ETL"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/switch-etl/calltypes": {
            "get": {
              "parameters": [
                {
                  "name": "acdId",
                  "required": false,
                  "in": "query",
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "collectionFormat": "multi"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/MegaBrowserCallTypeDto"
                    }
                  }
                },
                "404": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/ErrorResponse"
                  }
                }
              },
              "tags": [
                "Switch ETL"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/switch-etl/agentgroup/{agid}": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "agid",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "acdId",
                  "required": true,
                  "in": "query"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/CreateEmployeeGroupDto"
                  }
                },
                "404": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/ErrorResponse"
                  }
                }
              },
              "tags": [
                "Switch ETL"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/switch-etl/vectors": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "acdId",
                  "required": true,
                  "in": "query"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/VectorDto"
                    }
                  }
                },
                "404": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/ErrorResponse"
                  }
                }
              },
              "tags": [
                "Switch ETL"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/switch-etl/vector/{vectorNumber}": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "vectorNumber",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "acdId",
                  "required": true,
                  "in": "query"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/VectorDto"
                  }
                },
                "404": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/ErrorResponse"
                  }
                }
              },
              "tags": [
                "Switch ETL"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/switch-etl/agents": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "acdId",
                  "required": true,
                  "in": "query"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/CreateEmployeeDto"
                    }
                  }
                },
                "404": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/ErrorResponse"
                  }
                }
              },
              "tags": [
                "Switch ETL"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/switch-etl/servicehours": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "acdId",
                  "required": true,
                  "in": "query"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/CreateServiceHour"
                    }
                  }
                },
                "404": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/ErrorResponse"
                  }
                }
              },
              "tags": [
                "Switch ETL"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/switch-etl/holidays": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "acdId",
                  "required": true,
                  "in": "query"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/CreateHolidayDto"
                    }
                  }
                },
                "404": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/ErrorResponse"
                  }
                }
              },
              "tags": [
                "Switch ETL"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/switch-etl/vector-variables": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "acdId",
                  "required": true,
                  "in": "query"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/CreateVectorVariablesDto"
                    }
                  }
                },
                "404": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/ErrorResponse"
                  }
                }
              },
              "tags": [
                "Switch ETL"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/switch-etl/loadagentstomega": {
            "get": {
              "parameters": [
                {
                  "type": "array",
                  "name": "acdIds",
                  "required": true,
                  "in": "query",
                  "description": "The ACD IDs for which all Agents are to be loaded to Mega",
                  "items": {
                    "type": "string"
                  },
                  "collectionFormat": "multi"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Employee"
                    }
                  }
                },
                "404": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/ErrorResponse"
                  }
                }
              },
              "tags": [
                "Switch ETL"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/switch-etl/loadstationstomega": {
            "get": {
              "parameters": [
                {
                  "type": "array",
                  "name": "acdIds",
                  "required": true,
                  "in": "query",
                  "description": "The ACD IDs for which all Stations are to be loaded to Mega",
                  "items": {
                    "type": "string"
                  },
                  "collectionFormat": "multi"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Station"
                    }
                  }
                },
                "404": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/ErrorResponse"
                  }
                }
              },
              "tags": [
                "Switch ETL"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/switch-etl/loadservicehourstomega": {
            "get": {
              "parameters": [
                {
                  "type": "array",
                  "name": "acdIds",
                  "required": true,
                  "in": "query",
                  "description": "The ACD IDs for which all Service Hours are to be loaded to Mega",
                  "items": {
                    "type": "string"
                  },
                  "collectionFormat": "multi"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/ServiceHour"
                    }
                  }
                },
                "404": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/ErrorResponse"
                  }
                }
              },
              "tags": [
                "Switch ETL"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/switch-etl/loadholidaystomega": {
            "get": {
              "parameters": [
                {
                  "type": "array",
                  "name": "acdIds",
                  "required": true,
                  "in": "query",
                  "description": "The ACD IDs for which all Holidays are to be loaded to Mega",
                  "items": {
                    "type": "string"
                  },
                  "collectionFormat": "multi"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Holiday"
                    }
                  }
                },
                "404": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/ErrorResponse"
                  }
                }
              },
              "tags": [
                "Switch ETL"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/switch-etl/loadcallflowstomega": {
            "post": {
              "parameters": [
                {
                  "name": "MultipleCallflowTransformDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/MultipleCallflowTransformDto"
                  }
                }
              ],
              "responses": {
                "201": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/CallflowReturnDto"
                    }
                  }
                }
              },
              "tags": [
                "Switch ETL"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/employees/all": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Employee"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Employees"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/employees": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "headers": {
                    "x-page-count": {
                      "schema": {
                        "type": "number"
                      },
                      "required": false
                    }
                  },
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Employee"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Employees"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "post": {
              "parameters": [
                {
                  "name": "CreateEmployeeDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/CreateEmployeeDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "201": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Employee"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Employees"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/employees/export": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "201": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/ImportEmployeeDto"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Employees"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/employees/{employeeNumber}": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "employeeNumber",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Employee"
                  }
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Employees"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "put": {
              "parameters": [
                {
                  "name": "UpdateEmployeeDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/UpdateEmployeeDto"
                  }
                },
                {
                  "type": "string",
                  "name": "employeeNumber",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Employee"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Employees"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "delete": {
              "parameters": [
                {
                  "type": "string",
                  "name": "employeeNumber",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Agent deleted successfully"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Employees"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/employees/{sipId}/get": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "sipId",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": ""
                }
              },
              "tags": [
                "Employees"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/employees/{employeeNumber}/profile-picture-content": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "employeeNumber",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": ""
                }
              },
              "tags": [
                "Employees"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/employees/{employeeNumber}/profile-picture": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "employeeNumber",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": ""
                }
              },
              "tags": [
                "Employees"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "post": {
              "parameters": [
                {
                  "name": "EmployeeProfilePictureDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/EmployeeProfilePictureDto"
                  }
                },
                {
                  "type": "string",
                  "name": "employeeNumber",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Employee"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Employees"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/employees/find": {
            "post": {
              "parameters": [
                {
                  "name": "EntityFilterDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/EntityFilterDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Employee"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Employees"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/employees/bulk": {
            "post": {
              "parameters": [
                {
                  "name": "BulkCreateEmployeeDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/BulkCreateEmployeeDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "201": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Employee"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Employees"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "put": {
              "parameters": [
                {
                  "name": "BulkUpdateEmployeeDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/BulkUpdateEmployeeDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "201": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Employee"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Employees"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "delete": {
              "parameters": [
                {
                  "name": "BulkDeleteEntityDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/BulkDeleteEntityDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Agent deleted successfully"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Employees"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/employees/import": {
            "post": {
              "parameters": [
                {
                  "name": "ImportEmployeeDtoType",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/ImportEmployeeDtoType"
                  }
                },
                {
                  "type": "string",
                  "name": "importId",
                  "required": true,
                  "in": "query"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "201": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Employee"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Employees"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/employees/{employeeNumber}/profile": {
            "put": {
              "parameters": [
                {
                  "name": "UpdateEmployeeProfileDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/UpdateEmployeeProfileDto"
                  }
                },
                {
                  "type": "string",
                  "name": "employeeNumber",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Employee"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Employees"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/employees/changePin": {
            "post": {
              "parameters": [
                {
                  "name": "ChangePinDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/ChangePinDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "boolean"
                  }
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Employees"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/dialplan-analysis": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/DialPlanAnalysis"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Dial Plan Analysis"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "post": {
              "parameters": [
                {
                  "name": "CreateDialPlanAnalysisDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/CreateDialPlanAnalysisDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "201": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/DialPlanAnalysis"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Dial Plan Analysis"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/dialplan-analysis/resolve": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/DialPlanAnalysisResolveDto"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Dial Plan Analysis"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/dialplan-analysis/{id}": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "id",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/DialPlanAnalysis"
                  }
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Dial Plan Analysis"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "put": {
              "parameters": [
                {
                  "name": "UpdateDialPlanAnalysisDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/UpdateDialPlanAnalysisDto"
                  }
                },
                {
                  "type": "string",
                  "name": "id",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/DialPlanAnalysis"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Dial Plan Analysis"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "delete": {
              "parameters": [
                {
                  "type": "string",
                  "name": "id",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Dial Plan Analysis deleted successfully"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Dial Plan Analysis"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/dialplan-analysis/find": {
            "post": {
              "parameters": [
                {
                  "name": "EntityFilterDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/EntityFilterDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/DialPlanAnalysis"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Dial Plan Analysis"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/dialplan-analysis/bulk": {
            "post": {
              "parameters": [
                {
                  "name": "BulkCreateDialPlanAnalysisDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/BulkCreateDialPlanAnalysisDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "201": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/DialPlanAnalysis"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Dial Plan Analysis"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "put": {
              "parameters": [
                {
                  "name": "BulkUpdateDialPlanAnalysisDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/BulkUpdateDialPlanAnalysisDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "201": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/DialPlanAnalysis"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Dial Plan Analysis"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "delete": {
              "parameters": [
                {
                  "name": "BulkDeleteEntityDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/BulkDeleteEntityDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Dial Plan Analysis deleted successfully"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Dial Plan Analysis"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/location": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "headers": {
                    "x-page-count": {
                      "schema": {
                        "type": "number"
                      },
                      "required": false
                    }
                  },
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Location"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Network Locations"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "post": {
              "parameters": [
                {
                  "name": "CreateLocationDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/CreateLocationDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "201": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Location"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Network Locations"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/location/{id}": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "id",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Location"
                  }
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Network Locations"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "put": {
              "parameters": [
                {
                  "name": "UpdateLocationDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/UpdateLocationDto"
                  }
                },
                {
                  "type": "string",
                  "name": "id",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Location"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Network Locations"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "delete": {
              "parameters": [
                {
                  "type": "string",
                  "name": "id",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Network Location deleted successfully"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Network Locations"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/location/find": {
            "post": {
              "parameters": [
                {
                  "name": "EntityFilterDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/EntityFilterDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Location"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Network Locations"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/location/change-admn-stn-password/{id}": {
            "put": {
              "parameters": [
                {
                  "name": "ChangeLocationAdminPassword",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/ChangeLocationAdminPassword"
                  }
                },
                {
                  "type": "string",
                  "name": "id",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Network Locations"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/location/bulk": {
            "delete": {
              "parameters": [
                {
                  "name": "BulkDeleteEntityDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/BulkDeleteEntityDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Network Locations deleted successfully"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Network Locations"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/office-location": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/OfficeLocation"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Office Location"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "post": {
              "parameters": [
                {
                  "name": "CreateOfficeLocationDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/CreateOfficeLocationDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "201": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/OfficeLocation"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Office Location"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/office-location/{id}": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "id",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/OfficeLocation"
                  }
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Office Location"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "put": {
              "parameters": [
                {
                  "name": "UpdateOfficeLocationDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/UpdateOfficeLocationDto"
                  }
                },
                {
                  "type": "string",
                  "name": "id",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/OfficeLocation"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Office Location"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "delete": {
              "parameters": [
                {
                  "type": "string",
                  "name": "id",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Office Location deleted successfully"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Office Location"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/office-location/find": {
            "post": {
              "parameters": [
                {
                  "name": "EntityFilterDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/EntityFilterDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/OfficeLocation"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Office Location"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/office-location/bulk": {
            "delete": {
              "parameters": [
                {
                  "name": "BulkDeleteEntityDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/BulkDeleteEntityDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Office Locations deleted successfully"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Office Location"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/media-objects/json-schema": {
            "get": {
              "parameters": [
                {
                  "type": "number",
                  "name": "limit",
                  "required": false,
                  "in": "query"
                },
                {
                  "type": "number",
                  "name": "page",
                  "required": false,
                  "in": "query"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/MediaObject"
                    }
                  }
                }
              },
              "tags": [
                "Media Objects"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/media-objects/json-schemaMO": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/MediaObject"
                    }
                  }
                }
              },
              "tags": [
                "Media Objects"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/media-objects": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "headers": {
                    "x-page-count": {
                      "schema": {
                        "type": "number"
                      },
                      "required": false
                    }
                  },
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/MediaObject"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Media Objects"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "post": {
              "parameters": [
                {
                  "name": "CreateMediaObjectDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/CreateMediaObjectDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "201": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/MediaObject"
                  }
                },
                "404": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/ErrorResponse"
                  }
                }
              },
              "tags": [
                "Media Objects"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/media-objects/{number}": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "number",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/MediaObject"
                  }
                },
                "404": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/ErrorResponse"
                  }
                }
              },
              "tags": [
                "Media Objects"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "put": {
              "parameters": [
                {
                  "name": "UpdateMediaObjectDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/UpdateMediaObjectDto"
                  }
                },
                {
                  "type": "string",
                  "name": "number",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/MediaObject"
                  }
                },
                "404": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/ErrorResponse"
                  }
                }
              },
              "tags": [
                "Media Objects"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "delete": {
              "parameters": [
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "number",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Deleted"
                }
              },
              "tags": [
                "Media Objects"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/media-objects/fileContent/{number}": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "number",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/MediaObject"
                  }
                },
                "404": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/ErrorResponse"
                  }
                }
              },
              "tags": [
                "Media Objects"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/media-objects/usage/{number}": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "number",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/MediaObject"
                  }
                },
                "404": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/ErrorResponse"
                  }
                }
              },
              "tags": [
                "Media Objects"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/media-objects/find": {
            "post": {
              "parameters": [
                {
                  "name": "EntityFilterDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/EntityFilterDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/MediaObject"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Media Objects"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/media-objects/bulk": {
            "delete": {
              "parameters": [
                {
                  "name": "BulkDeleteEntityDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/BulkDeleteEntityDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Media Objects deleted successfully"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Media Objects"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/dialplan-call-type": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/DialPlanCallType"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Dial Plan Call Type"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "post": {
              "parameters": [
                {
                  "name": "CreateDialPlanCallTypeDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/CreateDialPlanCallTypeDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "201": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/DialPlanCallType"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Dial Plan Call Type"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/dialplan-call-type/find": {
            "post": {
              "parameters": [
                {
                  "name": "EntityFilterDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/EntityFilterDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/DialPlanCallType"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Dial Plan Call Type"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/dialplan-call-type/{name}": {
            "put": {
              "parameters": [
                {
                  "name": "UpdateDialPlanCallTypeDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/UpdateDialPlanCallTypeDto"
                  }
                },
                {
                  "type": "string",
                  "name": "name",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/DialPlanCallType"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Dial Plan Call Type"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "delete": {
              "parameters": [
                {
                  "type": "string",
                  "name": "name",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Dial Plan Call Type deleted successfully"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Dial Plan Call Type"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/dialplan-call-type/bulk": {
            "delete": {
              "parameters": [
                {
                  "name": "BulkDeleteEntityDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/BulkDeleteEntityDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Dial Plan Call Type deleted successfully"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Dial Plan Call Type"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "post": {
              "parameters": [
                {
                  "name": "CreateBulkDialPlanCallTypeDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/CreateBulkDialPlanCallTypeDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "201": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/DialPlanCallType"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Dial Plan Call Type"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/sip-server": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/SipServer"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "SIP Server"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "post": {
              "parameters": [
                {
                  "name": "CreateSipServerDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/CreateSipServerDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "201": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/SipServer"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "SIP Server"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/sip-server/export": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "201": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/ImportSipServerDto"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "SIP Server"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/sip-server/{id}": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "id",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/SipServer"
                  }
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "SIP Server"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "put": {
              "parameters": [
                {
                  "name": "UpdateSipServerDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/UpdateSipServerDto"
                  }
                },
                {
                  "type": "string",
                  "name": "id",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/SipServer"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "SIP Server"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "delete": {
              "parameters": [
                {
                  "type": "string",
                  "name": "id",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Sip Server deleted successfully"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "SIP Server"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/sip-server/find": {
            "post": {
              "parameters": [
                {
                  "name": "EntityFilterDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/EntityFilterDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/SipServer"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "SIP Server"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/sip-server/bulk": {
            "post": {
              "parameters": [
                {
                  "name": "BulkCreateSipServerDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/BulkCreateSipServerDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "201": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/SipServer"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "SIP Server"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "put": {
              "parameters": [
                {
                  "name": "BulkUpdateSipServerDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/BulkUpdateSipServerDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "201": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/SipServer"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "SIP Server"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "delete": {
              "parameters": [
                {
                  "name": "BulkDeleteEntityDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/BulkDeleteEntityDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Sip Servers deleted successfully"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "SIP Server"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/sip-server/import": {
            "post": {
              "parameters": [
                {
                  "name": "ImportSipServerDtoType",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/ImportSipServerDtoType"
                  }
                },
                {
                  "type": "string",
                  "name": "importId",
                  "required": true,
                  "in": "query"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "201": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/SipServer"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "SIP Server"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/sip-server/enable/{id}": {
            "put": {
              "parameters": [
                {
                  "name": "ToggleSipServerDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/ToggleSipServerDto"
                  }
                },
                {
                  "type": "string",
                  "name": "id",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/SipServer"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "SIP Server"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/adaptations": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Adaptations"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Adaptations"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "post": {
              "parameters": [
                {
                  "name": "CreateAdaptationsDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/CreateAdaptationsDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "201": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Adaptations"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Adaptations"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/adaptations/{id}": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "id",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Adaptations"
                  }
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Adaptations"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "put": {
              "parameters": [
                {
                  "name": "UpdateAdoptationsDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/UpdateAdoptationsDto"
                  }
                },
                {
                  "type": "string",
                  "name": "id",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Adaptations"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Adaptations"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "delete": {
              "parameters": [
                {
                  "type": "string",
                  "name": "id",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Adaptation deleted successfully"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Adaptations"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/adaptations/find": {
            "post": {
              "parameters": [
                {
                  "name": "EntityFilterDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/EntityFilterDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Adaptations"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Adaptations"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/adaptations/bulk": {
            "delete": {
              "parameters": [
                {
                  "name": "BulkDeleteEntityDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/BulkDeleteEntityDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Adaptation deleted successfully"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Adaptations"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/utils/timezone": {
            "get": {
              "responses": {
                "200": {
                  "description": ""
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Utils"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/utils/entity/{tenantId}/{type}": {
            "delete": {
              "parameters": [
                {
                  "type": "string",
                  "name": "type",
                  "required": true,
                  "in": "path",
                  "enum": [
                    "agent",
                    "agentGroup",
                    "station",
                    "vector",
                    "dn",
                    "mediaObjects",
                    "cor"
                  ]
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Entity data deleted successfully"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Utils"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/utils/tenants/{tenantId}/{number}": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "number",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": ""
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Utils"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/utils/hcccVersion": {
            "get": {
              "responses": {
                "200": {
                  "description": ""
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Utils"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/permission-set-cors/json-schemaCOR": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/COR"
                    }
                  }
                }
              },
              "tags": [
                "Permission Set (CORs)"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/permission-set-cors": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/COR"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Permission Set (CORs)"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "post": {
              "parameters": [
                {
                  "name": "CreateCORDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/CreateCORDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "201": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/COR"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Permission Set (CORs)"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/permission-set-cors/{number}": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "number",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/COR"
                  }
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Permission Set (CORs)"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "put": {
              "parameters": [
                {
                  "name": "UpdateCORDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/UpdateCORDto"
                  }
                },
                {
                  "type": "string",
                  "name": "number",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/COR"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Permission Set (CORs)"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/permission-set-cors/usage/{id}": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "id",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/COR"
                  }
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Permission Set (CORs)"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/permission-set-cors/find": {
            "post": {
              "parameters": [
                {
                  "name": "EntityFilterDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/EntityFilterDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/COR"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Permission Set (CORs)"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/permission-set-cors/numbers": {
            "post": {
              "parameters": [
                {
                  "name": "CorNumberList",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/CorNumberList"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/COR"
                  }
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Permission Set (CORs)"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/permission-set-cors/bulk": {
            "delete": {
              "parameters": [
                {
                  "name": "BulkDeleteEntityDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/BulkDeleteEntityDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Permission Set deleted successfully"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Permission Set (CORs)"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/permission-set-cors/{id}": {
            "delete": {
              "parameters": [
                {
                  "type": "string",
                  "name": "id",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Permission Set deleted successfully"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Permission Set (CORs)"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/employee-groups/json-schema": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/EmployeeGroup"
                    }
                  }
                }
              },
              "tags": [
                "Employee Groups"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/employee-groups/json-schemaAG": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/EmployeeGroup"
                    }
                  }
                }
              },
              "tags": [
                "Employee Groups"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/employee-groups": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "headers": {
                    "x-page-count": {
                      "schema": {
                        "type": "number"
                      },
                      "required": false
                    }
                  },
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/EmployeeGroup"
                    }
                  }
                },
                "400": {
                  "description": "Invalid request"
                },
                "404": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/ErrorResponse"
                  }
                }
              },
              "tags": [
                "Employee Groups"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "post": {
              "parameters": [
                {
                  "name": "CreateEmployeeGroupDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/CreateEmployeeGroupDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "201": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/EmployeeGroup"
                  }
                },
                "400": {
                  "description": "Invalid request"
                },
                "404": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/ErrorResponse"
                  }
                }
              },
              "tags": [
                "Employee Groups"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/employee-groups/export": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "201": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/ImportEmployeeGroupDto"
                    }
                  }
                },
                "400": {
                  "description": "Invalid request"
                },
                "404": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/ErrorResponse"
                  }
                }
              },
              "tags": [
                "Employee Groups"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/employee-groups/{employeeGroupNumber}": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "employeeGroupNumber",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/EmployeeGroup"
                  }
                },
                "404": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/ErrorResponse"
                  }
                }
              },
              "tags": [
                "Employee Groups"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "put": {
              "parameters": [
                {
                  "name": "UpdateEmployeeGroupDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/UpdateEmployeeGroupDto"
                  }
                },
                {
                  "type": "string",
                  "name": "employeeGroupNumber",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/EmployeeGroup"
                  }
                },
                "400": {
                  "description": "Invalid request"
                },
                "404": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/ErrorResponse"
                  }
                }
              },
              "tags": [
                "Employee Groups"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "delete": {
              "parameters": [
                {
                  "type": "string",
                  "name": "employeeGroupNumber",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Skill deleted successfully"
                },
                "404": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/ErrorResponse"
                  }
                }
              },
              "tags": [
                "Employee Groups"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/employee-groups/usage/{employeeGroupNumber}": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "employeeGroupNumber",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/EmployeeGroup"
                  }
                },
                "404": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/ErrorResponse"
                  }
                }
              },
              "tags": [
                "Employee Groups"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/employee-groups/find": {
            "post": {
              "parameters": [
                {
                  "name": "EntityFilterDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/EntityFilterDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/EmployeeGroup"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Employee Groups"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/employee-groups/bulk": {
            "post": {
              "parameters": [
                {
                  "name": "CreateManyEmployeeGroupsDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/CreateManyEmployeeGroupsDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "201": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/EmployeeGroup"
                    }
                  }
                },
                "400": {
                  "description": "Invalid request"
                },
                "404": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/ErrorResponse"
                  }
                }
              },
              "tags": [
                "Employee Groups"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "put": {
              "parameters": [
                {
                  "name": "UpdateManyEmployeeGroupsDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/UpdateManyEmployeeGroupsDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "201": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/EmployeeGroup"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Employee Groups"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "delete": {
              "parameters": [
                {
                  "name": "BulkDeleteEntityDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/BulkDeleteEntityDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Skill deleted successfully"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Employee Groups"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/employee-groups/import": {
            "post": {
              "parameters": [
                {
                  "name": "ImportEmployeeGroupsDtoType",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/ImportEmployeeGroupsDtoType"
                  }
                },
                {
                  "type": "string",
                  "name": "importId",
                  "required": true,
                  "in": "query"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "201": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/EmployeeGroup"
                    }
                  }
                },
                "400": {
                  "description": "Invalid request"
                },
                "404": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/ErrorResponse"
                  }
                }
              },
              "tags": [
                "Employee Groups"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/dns/json-schema": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Dn"
                    }
                  }
                }
              },
              "tags": [
                "DNs"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/dns/json-schemaDN": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Dn"
                    }
                  }
                }
              },
              "tags": [
                "DNs"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/dns": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "headers": {
                    "x-page-count": {
                      "schema": {
                        "type": "number"
                      },
                      "required": false
                    }
                  },
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Dn"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "DNs"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "post": {
              "parameters": [
                {
                  "name": "CreateDnDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/CreateDnDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "201": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Dn"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "DNs"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/dns/export": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "201": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/ImportDnDto"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "DNs"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/dns/{number}": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "number",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Dn"
                  }
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "DNs"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "put": {
              "parameters": [
                {
                  "name": "UpdateDnDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/UpdateDnDto"
                  }
                },
                {
                  "type": "string",
                  "name": "number",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Dn"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "DNs"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "delete": {
              "parameters": [
                {
                  "type": "string",
                  "name": "number",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Dn deleted successfully"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "DNs"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/dns/usage/{number}": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "number",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Dn"
                  }
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "DNs"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/dns/find": {
            "post": {
              "parameters": [
                {
                  "name": "EntityFilterDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/EntityFilterDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Dn"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "DNs"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/dns/bulk": {
            "post": {
              "parameters": [
                {
                  "name": "BulkCreateDnDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/BulkCreateDnDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "201": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Dn"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "DNs"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "put": {
              "parameters": [
                {
                  "name": "BulkUpdateDnDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/BulkUpdateDnDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "201": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Dn"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "DNs"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "delete": {
              "parameters": [
                {
                  "name": "BulkDeleteEntityDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/BulkDeleteEntityDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Dn deleted successfully"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "DNs"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/dns/import": {
            "post": {
              "parameters": [
                {
                  "name": "ImportDnDtoType",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/ImportDnDtoType"
                  }
                },
                {
                  "type": "string",
                  "name": "importId",
                  "required": true,
                  "in": "query"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "201": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Dn"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "DNs"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/attributes": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Attributes"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Attributes"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "post": {
              "parameters": [
                {
                  "name": "CreateAttributesDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/CreateAttributesDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "201": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Attributes"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Attributes"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/attributes/{id}": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "id",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Attributes"
                  }
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Attributes"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "put": {
              "parameters": [
                {
                  "name": "UpdateAttributesDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/UpdateAttributesDto"
                  }
                },
                {
                  "type": "string",
                  "name": "id",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Attributes"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Attributes"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "delete": {
              "parameters": [
                {
                  "type": "string",
                  "name": "id",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Attributes deleted successfully"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Attributes"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/attributes/find": {
            "post": {
              "parameters": [
                {
                  "name": "EntityFilterDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/EntityFilterDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Attributes"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Attributes"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/attributes/bulk": {
            "post": {
              "parameters": [
                {
                  "name": "CreateBulkAttributesDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/CreateBulkAttributesDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "201": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Attributes"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Attributes"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "delete": {
              "parameters": [
                {
                  "name": "BulkDeleteEntityDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/BulkDeleteEntityDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Attributes deleted successfully"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Attributes"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/omni-provider": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/OmniProvider"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Omni Provider"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "post": {
              "parameters": [
                {
                  "name": "CreateOmniProviderDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/CreateOmniProviderDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "201": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/OmniProvider"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Omni Provider"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/omni-provider/{id}": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "id",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/OmniProvider"
                  }
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Omni Provider"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "put": {
              "parameters": [
                {
                  "name": "UpdateOmniProviderDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/UpdateOmniProviderDto"
                  }
                },
                {
                  "type": "string",
                  "name": "id",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/OmniProvider"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Omni Provider"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "delete": {
              "parameters": [
                {
                  "type": "string",
                  "name": "id",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Omni Provider deleted successfully"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Omni Provider"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/omni-provider/find": {
            "post": {
              "parameters": [
                {
                  "name": "EntityFilterDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/EntityFilterDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/OmniProvider"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Omni Provider"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/omni-provider/bulk": {
            "delete": {
              "parameters": [
                {
                  "name": "BulkDeleteEntityDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/BulkDeleteEntityDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Omni Provider deleted successfully"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Omni Provider"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/global-configuration": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "headers": {
                    "x-page-count": {
                      "schema": {
                        "type": "number"
                      },
                      "required": false
                    }
                  },
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GlobalConfiguration"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Global Configurations"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "post": {
              "parameters": [
                {
                  "name": "CreateGlobalConfigurationDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/CreateGlobalConfigurationDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "201": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/GlobalConfiguration"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Global Configurations"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/global-configuration/{id}": {
            "get": {
              "parameters": [
                {
                  "type": "number",
                  "name": "id",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/GlobalConfiguration"
                  }
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Global Configurations"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "put": {
              "parameters": [
                {
                  "name": "UpdateGlobalConfigurationDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/UpdateGlobalConfigurationDto"
                  }
                },
                {
                  "type": "number",
                  "name": "id",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/GlobalConfiguration"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Global Configurations"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "delete": {
              "parameters": [
                {
                  "type": "number",
                  "name": "id",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Global Configuration deleted successfully"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Global Configurations"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/global-configuration/find": {
            "post": {
              "parameters": [
                {
                  "name": "EntityFilterDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/EntityFilterDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/GlobalConfiguration"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Global Configurations"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/global-configuration/bulk": {
            "delete": {
              "parameters": [
                {
                  "name": "BulkDeleteEntityDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/BulkDeleteEntityDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Global Configurations deleted successfully"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Global Configurations"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/auxwork-reason-code/json-schemaRC": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/AuxReasonCode"
                    }
                  }
                }
              },
              "tags": [
                "Aux Work Reason Code Names"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/auxwork-reason-code": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/AuxReasonCode"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Aux Work Reason Code Names"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "post": {
              "parameters": [
                {
                  "name": "CreateAuxReasonCodeDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/CreateAuxReasonCodeDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "201": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/AuxReasonCode"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Aux Work Reason Code Names"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/auxwork-reason-code/{id}": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "id",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/AuxReasonCode"
                  }
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Aux Work Reason Code Names"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "put": {
              "parameters": [
                {
                  "name": "UpdateAuxReasonCodeDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/UpdateAuxReasonCodeDto"
                  }
                },
                {
                  "type": "string",
                  "name": "id",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/AuxReasonCode"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Aux Work Reason Code Names"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "delete": {
              "parameters": [
                {
                  "type": "string",
                  "name": "id",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Aux Work Reason Code deleted successfully"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Aux Work Reason Code Names"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/auxwork-reason-code/find": {
            "post": {
              "parameters": [
                {
                  "name": "EntityFilterDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/EntityFilterDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/AuxReasonCode"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Aux Work Reason Code Names"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/auxwork-reason-code/bulk": {
            "delete": {
              "parameters": [
                {
                  "name": "BulkDeleteEntityDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/BulkDeleteEntityDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Aux Work Reason Codes deleted successfully"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Aux Work Reason Code Names"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/logout-reason-code/json-schemaRC": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/LogoutReasonCode"
                    }
                  }
                }
              },
              "tags": [
                "Logout Reason Code Names"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/logout-reason-code": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/LogoutReasonCode"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Logout Reason Code Names"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "post": {
              "parameters": [
                {
                  "name": "CreateLogoutReasonCodeDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/CreateLogoutReasonCodeDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "201": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/LogoutReasonCode"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Logout Reason Code Names"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/logout-reason-code/{id}": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "id",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/LogoutReasonCode"
                  }
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Logout Reason Code Names"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "put": {
              "parameters": [
                {
                  "name": "UpdateLogoutReasonCodeDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/UpdateLogoutReasonCodeDto"
                  }
                },
                {
                  "type": "string",
                  "name": "id",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/LogoutReasonCode"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Logout Reason Code Names"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "delete": {
              "parameters": [
                {
                  "type": "string",
                  "name": "id",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Logout Reason Code deleted successfully"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Logout Reason Code Names"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/logout-reason-code/find": {
            "post": {
              "parameters": [
                {
                  "name": "EntityFilterDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/EntityFilterDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/LogoutReasonCode"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Logout Reason Code Names"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/logout-reason-code/bulk": {
            "delete": {
              "parameters": [
                {
                  "name": "BulkDeleteEntityDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/BulkDeleteEntityDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Logout Reason Codes deleted successfully"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Logout Reason Code Names"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/capacity-profile": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/CapacityProfile"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Capacity Profile"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "post": {
              "parameters": [
                {
                  "name": "CreateCapacityProfileDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/CreateCapacityProfileDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "201": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/CapacityProfile"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Capacity Profile"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/capacity-profile/{id}": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "id",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/CapacityProfile"
                  }
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Capacity Profile"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "put": {
              "parameters": [
                {
                  "name": "UpdateCapacityProfileDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/UpdateCapacityProfileDto"
                  }
                },
                {
                  "type": "string",
                  "name": "id",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/CapacityProfile"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Capacity Profile"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "delete": {
              "parameters": [
                {
                  "type": "string",
                  "name": "id",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Capacity Profile deleted successfully"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Capacity Profile"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/capacity-profile/find": {
            "post": {
              "parameters": [
                {
                  "name": "EntityFilterDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/EntityFilterDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/CapacityProfile"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Capacity Profile"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/capacity-profile/bulk": {
            "delete": {
              "parameters": [
                {
                  "name": "BulkDeleteEntityDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/BulkDeleteEntityDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Capacity Profiles deleted successfully"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Capacity Profile"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/coveragepathset": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/CoveragePathSet"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Coverage Path Sets"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "post": {
              "parameters": [
                {
                  "name": "CreateCoveragePathSetDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/CreateCoveragePathSetDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "201": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/CoveragePathSet"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Coverage Path Sets"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/coveragepathset/{id}": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "id",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/CoveragePathSet"
                  }
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Coverage Path Sets"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "put": {
              "parameters": [
                {
                  "name": "UpdateCoveragePathSetDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/UpdateCoveragePathSetDto"
                  }
                },
                {
                  "type": "string",
                  "name": "id",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/CoveragePathSet"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Coverage Path Sets"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "delete": {
              "parameters": [
                {
                  "type": "string",
                  "name": "id",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Coverage Path Set deleted successfully"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Coverage Path Sets"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/coveragepathset/usage/{id}": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "id",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/CoveragePathSet"
                  }
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Coverage Path Sets"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/coveragepathset/find": {
            "post": {
              "parameters": [
                {
                  "name": "EntityFilterDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/EntityFilterDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/CoveragePathSet"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Coverage Path Sets"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/coveragepathset/bulk": {
            "post": {
              "parameters": [
                {
                  "name": "BulkCreateCoveragePathSetsDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/BulkCreateCoveragePathSetsDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "201": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/CoveragePathSet"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Coverage Path Sets"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "delete": {
              "parameters": [
                {
                  "name": "BulkDeleteEntityDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/BulkDeleteEntityDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Coverage Path Sets deleted successfully"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Coverage Path Sets"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/voice-mail-server": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/VoiceMailServer"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Voice Mail Server"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "post": {
              "parameters": [
                {
                  "name": "CreateVoiceMailServerDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/CreateVoiceMailServerDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "201": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/VoiceMailServer"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Voice Mail Server"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/voice-mail-server/{id}": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "id",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/VoiceMailServer"
                  }
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Voice Mail Server"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "put": {
              "parameters": [
                {
                  "name": "UpdateVoiceMailServerDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/UpdateVoiceMailServerDto"
                  }
                },
                {
                  "type": "string",
                  "name": "id",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/VoiceMailServer"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Voice Mail Server"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "delete": {
              "parameters": [
                {
                  "type": "string",
                  "name": "id",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Voice Mail Server deleted successfully"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Voice Mail Server"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/voice-mail-server/usage/{id}": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "id",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/VoiceMailServer"
                  }
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Voice Mail Server"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/voice-mail-server/find": {
            "post": {
              "parameters": [
                {
                  "name": "EntityFilterDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/EntityFilterDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/VoiceMailServer"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Voice Mail Server"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/voice-mail-server/bulk": {
            "post": {
              "parameters": [
                {
                  "name": "BulkCreateVoiceMailServerDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/BulkCreateVoiceMailServerDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "201": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/VoiceMailServer"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Voice Mail Server"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "delete": {
              "parameters": [
                {
                  "name": "BulkDeleteEntityDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/BulkDeleteEntityDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Voice Mail Servers deleted successfully"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Voice Mail Server"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/stations": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "headers": {
                    "x-page-count": {
                      "schema": {
                        "type": "number"
                      },
                      "required": false
                    }
                  },
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Station"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Stations"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "post": {
              "parameters": [
                {
                  "name": "CreateStationDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/CreateStationDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "201": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Station"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Stations"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/stations/export": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "201": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/ImportStationDto"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Stations"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/stations/resolve": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/StationResolveDto"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Stations"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/stations/{number}": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "number",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Station"
                  }
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Stations"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "put": {
              "parameters": [
                {
                  "name": "UpdateStationDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/UpdateStationDto"
                  }
                },
                {
                  "type": "string",
                  "name": "number",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Station"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Stations"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "delete": {
              "parameters": [
                {
                  "type": "string",
                  "name": "number",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Endpoint deleted successfully"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Stations"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/stations/usage/{number}": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "number",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Station"
                  }
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Stations"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/stations/find": {
            "post": {
              "parameters": [
                {
                  "name": "EntityFilterDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/EntityFilterDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Station"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Stations"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/stations/bulk": {
            "post": {
              "parameters": [
                {
                  "name": "BulkCreateStationsDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/BulkCreateStationsDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "201": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Station"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Stations"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "put": {
              "parameters": [
                {
                  "name": "BulkUpdateStationsDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/BulkUpdateStationsDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "201": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Station"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Stations"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "delete": {
              "parameters": [
                {
                  "name": "BulkDeleteEntityDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/BulkDeleteEntityDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Endpoints deleted successfully"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Stations"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/stations/import": {
            "post": {
              "parameters": [
                {
                  "name": "ImportStationDtoType",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/ImportStationDtoType"
                  }
                },
                {
                  "type": "string",
                  "name": "importId",
                  "required": true,
                  "in": "query"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "201": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Station"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Stations"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/stations/change-password/{number}": {
            "put": {
              "parameters": [
                {
                  "name": "ChangeStationPasswordDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/ChangeStationPasswordDto"
                  }
                },
                {
                  "type": "string",
                  "name": "number",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Station"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Stations"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/vustats/json-schemaVU": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Vustats"
                    }
                  }
                }
              },
              "tags": [
                "Vustats"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/vustats": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Vustats"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Vustats"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "post": {
              "parameters": [
                {
                  "name": "CreateVustatsDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/CreateVustatsDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "201": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Vustats"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Vustats"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/vustats/{id}": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "id",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Vustats"
                  }
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Vustats"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "put": {
              "parameters": [
                {
                  "name": "UpdateVustatsDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/UpdateVustatsDto"
                  }
                },
                {
                  "type": "string",
                  "name": "id",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Vustats"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Vustats"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "delete": {
              "parameters": [
                {
                  "type": "string",
                  "name": "id",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Vustats deleted successfully"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Vustats"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/vustats/find": {
            "post": {
              "parameters": [
                {
                  "name": "EntityFilterDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/EntityFilterDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Vustats"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Vustats"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/vustats/bulk": {
            "delete": {
              "parameters": [
                {
                  "name": "BulkDeleteEntityDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/BulkDeleteEntityDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Vustats deleted successfully"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Vustats"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/callflows/json-schema": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Callflow"
                    }
                  }
                }
              },
              "tags": [
                "Vector"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/callflows": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "headers": {
                    "x-page-count": {
                      "schema": {
                        "type": "number"
                      },
                      "required": false
                    }
                  },
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Callflow"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Vector"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "post": {
              "parameters": [
                {
                  "name": "CreateCallflowDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/CreateCallflowDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "201": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Callflow"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Vector"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/callflows/export": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "201": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/ImportCallFlowDto"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Vector"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/callflows/{number}": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "number",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Callflow"
                  }
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Vector"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "put": {
              "parameters": [
                {
                  "name": "UpdateCallflowDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/UpdateCallflowDto"
                  }
                },
                {
                  "type": "string",
                  "name": "number",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Callflow"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Vector"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "delete": {
              "parameters": [
                {
                  "type": "string",
                  "name": "number",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Vector deleted successfully"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Vector"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/callflows/usage/{number}": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "number",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Callflow"
                  }
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Vector"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/callflows/find": {
            "post": {
              "parameters": [
                {
                  "name": "EntityFilterDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/EntityFilterDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Callflow"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Vector"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/callflows/bulk": {
            "post": {
              "parameters": [
                {
                  "name": "BulkCreateCallflowDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/BulkCreateCallflowDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "201": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Callflow"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Vector"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "delete": {
              "parameters": [
                {
                  "name": "BulkDeleteEntityDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/BulkDeleteEntityDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Vector deleted successfully"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Vector"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/callflows/import": {
            "post": {
              "parameters": [
                {
                  "name": "ImportCallflowDtoType",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/ImportCallflowDtoType"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "201": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Callflow"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Vector"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/vector-variables": {
            "get": {
              "parameters": [
                {
                  "type": "number",
                  "name": "limit",
                  "required": false,
                  "in": "query"
                },
                {
                  "type": "number",
                  "name": "page",
                  "required": false,
                  "in": "query"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "headers": {
                    "x-page-count": {
                      "schema": {
                        "type": "number"
                      },
                      "required": false
                    }
                  },
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/VectorVariables"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Vector Variables"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/vector-variables/usage/{id}": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "id",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/VectorVariables"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Vector Variables"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/vector-variables/find": {
            "post": {
              "parameters": [
                {
                  "name": "EntityFilterDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/EntityFilterDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/VectorVariables"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Vector Variables"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/vector-variables/bulk": {
            "put": {
              "parameters": [
                {
                  "name": "BulkUpdateVectorVariablesDtoType",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/BulkUpdateVectorVariablesDtoType"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "201": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/VectorVariables"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Vector Variables"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "delete": {
              "parameters": [
                {
                  "name": "BulkDeleteEntityDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/BulkDeleteEntityDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Vector Variables deleted successfully"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Vector Variables"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/vector-variables/{name}": {
            "delete": {
              "parameters": [
                {
                  "type": "string",
                  "name": "name",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Vector Variables deleted successfully"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Vector Variables"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/datasources": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/DataSources"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "DataSource"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "post": {
              "parameters": [
                {
                  "name": "CreateDataSourcesDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/CreateDataSourcesDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "201": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/DataSources"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "DataSource"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/datasources/{id}": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "id",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/DataSources"
                  }
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "DataSource"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "put": {
              "parameters": [
                {
                  "name": "UpdateDataSourcesDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/UpdateDataSourcesDto"
                  }
                },
                {
                  "type": "string",
                  "name": "id",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/DataSources"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "DataSource"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "delete": {
              "parameters": [
                {
                  "type": "string",
                  "name": "id",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Datasource deleted successfully"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "DataSource"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/datasources/find": {
            "post": {
              "parameters": [
                {
                  "name": "EntityFilterDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/EntityFilterDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/DataSources"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "DataSource"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/datasources/bulk": {
            "delete": {
              "parameters": [
                {
                  "name": "BulkDeleteEntityDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/BulkDeleteEntityDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Datasources deleted successfully"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "DataSource"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/datasources/get-columns/{id}": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "id",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/DataSourcesColumnDto"
                    }
                  }
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "DataSource"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/service-hours/tables": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "headers": {
                    "x-page-count": {
                      "schema": {
                        "type": "number"
                      },
                      "required": false
                    }
                  },
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/ServiceHourTableDto"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Service Hour"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/service-hours/{tableId}": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "number",
                  "name": "tableId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "headers": {
                    "x-page-count": {
                      "schema": {
                        "type": "number"
                      },
                      "required": false
                    }
                  },
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/ServiceHour"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Service Hour"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "delete": {
              "parameters": [
                {
                  "type": "number",
                  "name": "tableId",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/SuccessResponse"
                  }
                },
                "404": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/ErrorResponse"
                  }
                }
              },
              "tags": [
                "Service Hour"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/service-hours/usage/{tableId}": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tableId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/ServiceHour"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Service Hour"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/service-hours": {
            "post": {
              "parameters": [
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                },
                {
                  "name": "BulkCreateServiceHourDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/BulkCreateServiceHourDto"
                  }
                }
              ],
              "responses": {
                "201": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/ServiceHour"
                    }
                  }
                },
                "404": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/ErrorResponse"
                  }
                }
              },
              "tags": [
                "Service Hour"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "put": {
              "parameters": [
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                },
                {
                  "name": "BulkUpdateServiceHourDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/BulkUpdateServiceHourDto"
                  }
                }
              ],
              "responses": {
                "201": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/ServiceHour"
                    }
                  }
                },
                "404": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/ErrorResponse"
                  }
                }
              },
              "tags": [
                "Service Hour"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/service-hours/bulk": {
            "delete": {
              "parameters": [
                {
                  "name": "BulkDeleteEntityDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/BulkDeleteEntityDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Service Hours deleted successfully"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Service Hour"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/holiday/tables": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "headers": {
                    "x-page-count": {
                      "schema": {
                        "type": "number"
                      },
                      "required": false
                    }
                  },
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/HolidayTableDto"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Holiday"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/holiday/{tableId}": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "number",
                  "name": "tableId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "headers": {
                    "x-page-count": {
                      "schema": {
                        "type": "number"
                      },
                      "required": false
                    }
                  },
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Holiday"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Holiday"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "delete": {
              "parameters": [
                {
                  "type": "number",
                  "name": "tableId",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/SuccessResponse"
                  }
                },
                "404": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/ErrorResponse"
                  }
                }
              },
              "tags": [
                "Holiday"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/holiday/usage/{tableId}": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tableId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "headers": {
                    "x-page-count": {
                      "schema": {
                        "type": "number"
                      },
                      "required": false
                    }
                  },
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Holiday"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Holiday"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/holiday": {
            "post": {
              "parameters": [
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                },
                {
                  "name": "BulkCreateHolidayDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/BulkCreateHolidayDto"
                  }
                }
              ],
              "responses": {
                "201": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Holiday"
                    }
                  }
                },
                "404": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/ErrorResponse"
                  }
                }
              },
              "tags": [
                "Holiday"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "put": {
              "parameters": [
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                },
                {
                  "name": "BulkUpdateHolidayDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/BulkUpdateHolidayDto"
                  }
                }
              ],
              "responses": {
                "201": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Holiday"
                    }
                  }
                },
                "404": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/ErrorResponse"
                  }
                }
              },
              "tags": [
                "Holiday"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/holiday/bulk": {
            "delete": {
              "parameters": [
                {
                  "name": "BulkDeleteEntityDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/BulkDeleteEntityDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Holidays deleted successfully"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Holiday"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/programs": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "headers": {
                    "x-page-count": {
                      "schema": {
                        "type": "number"
                      },
                      "required": false
                    }
                  },
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Program"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Programs"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "post": {
              "parameters": [
                {
                  "name": "CreateProgramDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/CreateProgramDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "201": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Program"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Programs"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/programs/{id}": {
            "get": {
              "parameters": [
                {
                  "type": "number",
                  "name": "id",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Program"
                  }
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Programs"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "put": {
              "parameters": [
                {
                  "name": "UpdateProgramDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/UpdateProgramDto"
                  }
                },
                {
                  "type": "number",
                  "name": "id",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/Program"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Programs"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "delete": {
              "parameters": [
                {
                  "type": "number",
                  "name": "id",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "LOB deleted successfully"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Programs"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/programs/find": {
            "post": {
              "parameters": [
                {
                  "name": "EntityFilterDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/EntityFilterDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Program"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Programs"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/programs/bulk": {
            "delete": {
              "parameters": [
                {
                  "name": "BulkDeleteEntityDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/BulkDeleteEntityDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Programs deleted successfully"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Programs"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/call-types": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "headers": {
                    "x-page-count": {
                      "schema": {
                        "type": "number"
                      },
                      "required": false
                    }
                  },
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/CallType"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Call Types"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "post": {
              "parameters": [
                {
                  "name": "CreateCallTypeDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/CreateCallTypeDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "201": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/CallType"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Call Types"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/call-types/{number}": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "number",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/CallType"
                  }
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Call Types"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "put": {
              "parameters": [
                {
                  "name": "UpdateCallTypeDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/UpdateCallTypeDto"
                  }
                },
                {
                  "type": "string",
                  "name": "number",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/CallType"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Call Types"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "delete": {
              "parameters": [
                {
                  "type": "string",
                  "name": "number",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Call Type deleted successfully"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Call Types"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/call-types/find": {
            "post": {
              "parameters": [
                {
                  "name": "EntityFilterDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/EntityFilterDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/CallType"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Call Types"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/call-types/megabrowserbulk": {
            "post": {
              "parameters": [
                {
                  "name": "BulkMegaBrowserCallTypeDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/BulkMegaBrowserCallTypeDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "201": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/CallType"
                    }
                  }
                }
              },
              "tags": [
                "Call Types"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/call-types/bulk": {
            "post": {
              "parameters": [
                {
                  "name": "BulkCreateCallTypeDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/BulkCreateCallTypeDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "201": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/CallType"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Call Types"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "put": {
              "parameters": [
                {
                  "name": "BulkUpdateCallTypeDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/BulkUpdateCallTypeDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "201": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/CallType"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Call Types"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "delete": {
              "parameters": [
                {
                  "name": "BulkDeleteEntityDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/BulkDeleteEntityDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Call Types deleted successfully"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Call Types"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/call-types/import": {
            "post": {
              "parameters": [
                {
                  "name": "ImportCallTypeDtoType",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/ImportCallTypeDtoType"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "201": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/CallType"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Call Types"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/hacky-delete/{acdId}": {
            "delete": {
              "parameters": [
                {
                  "type": "string",
                  "name": "acdId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/SuccessResponse"
                  }
                },
                "404": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/ErrorResponse"
                  }
                }
              },
              "tags": [
                "Hacky Delete"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/callflow_commands": {
            "get": {
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/CallflowCommand"
                    }
                  }
                }
              },
              "tags": [
                "Call Flow Commands"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/callflow_functions": {
            "get": {
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/CallflowFunction"
                    }
                  }
                }
              },
              "tags": [
                "Call Flow Functions"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/component-config/{name}": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "name",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/ComponentConfig"
                    }
                  }
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Component Config"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "put": {
              "parameters": [
                {
                  "name": "UpdateComponentConfigDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/UpdateComponentConfigDto"
                  }
                },
                {
                  "type": "string",
                  "name": "name",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/ComponentConfig"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Component Config"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/aes-server": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/AesServer"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "AES Servers"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "post": {
              "parameters": [
                {
                  "name": "CreateAesServerDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/CreateAesServerDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "201": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/AesServer"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "AES Servers"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/aes-server/{id}": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "id",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/AesServer"
                  }
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "AES Servers"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "put": {
              "parameters": [
                {
                  "name": "UpdateAesServerDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/UpdateAesServerDto"
                  }
                },
                {
                  "type": "string",
                  "name": "id",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/AesServer"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "AES Servers"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "delete": {
              "parameters": [
                {
                  "type": "string",
                  "name": "id",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "AES Server deleted successfully"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "AES Servers"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/aes-server/find": {
            "post": {
              "parameters": [
                {
                  "name": "EntityFilterDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/EntityFilterDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/AesServer"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "AES Servers"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/aes-server/bulk": {
            "delete": {
              "parameters": [
                {
                  "name": "BulkDeleteEntityDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/BulkDeleteEntityDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "AES Servers deleted successfully"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "AES Servers"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/aes-server/licensemode": {
            "post": {
              "parameters": [
                {
                  "name": "AddLicenseModeDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/AddLicenseModeDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "201": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/AesServer"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "AES Servers"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/transform-import/import": {
            "post": {
              "parameters": [
                {
                  "name": "TransformImportDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/TransformImportDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "201": {
                  "description": ""
                }
              },
              "tags": [
                "Transform Import"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/transform-import/importV2/{importId}": {
            "post": {
              "parameters": [
                {
                  "name": "TransformImportV2ModifiedDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/TransformImportV2ModifiedDto"
                  }
                },
                {
                  "type": "string",
                  "name": "importId",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "201": {
                  "description": ""
                }
              },
              "tags": [
                "Transform Import"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/transform-import/stats": {
            "post": {
              "parameters": [
                {
                  "name": "ImportStatsDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/ImportStatsDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Array of selected Entity"
                }
              },
              "tags": [
                "Transform Import"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/transform-import/pre-report": {
            "post": {
              "parameters": [
                {
                  "name": "TransformImportPreReportModifiedDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/TransformImportPreReportModifiedDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/PreReportResponseDto"
                  }
                }
              },
              "tags": [
                "Transform Import"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/transform-import/identity/{user}": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "user",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/CreateMigrationIdentityDto"
                  }
                }
              },
              "tags": [
                "Transform Import"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/vector-routing-table": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/VectorRoutingTableDto"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Vector Routing Table"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "post": {
              "parameters": [
                {
                  "name": "CreateVectorRoutingTableDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/CreateVectorRoutingTableDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "201": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/VectorRoutingTableDto"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Vector Routing Table"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/vector-routing-table/{id}": {
            "get": {
              "parameters": [
                {
                  "type": "number",
                  "name": "id",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/VectorRoutingTableDto"
                  }
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Vector Routing Table"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "put": {
              "parameters": [
                {
                  "name": "UpdateVectorRoutingTableDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/UpdateVectorRoutingTableDto"
                  }
                },
                {
                  "type": "number",
                  "name": "id",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/VectorRoutingTableDto"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Vector Routing Table"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "delete": {
              "parameters": [
                {
                  "type": "number",
                  "name": "id",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Vector Routing Table deleted successfully"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Vector Routing Table"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/vector-routing-table/usage/{id}": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "id",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/VectorRoutingTableDto"
                  }
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Vector Routing Table"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/vector-routing-table/find": {
            "post": {
              "parameters": [
                {
                  "name": "EntityFilterDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/EntityFilterDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/VectorRoutingTableDto"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Vector Routing Table"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/vector-routing-table/bulk": {
            "delete": {
              "parameters": [
                {
                  "name": "BulkDeleteEntityDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/BulkDeleteEntityDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Vector Routing Tables deleted successfully"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Vector Routing Table"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/cti-links": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/CtiLinkDto"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "CTI Links"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "post": {
              "parameters": [
                {
                  "name": "CreateCtiLinkDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/CreateCtiLinkDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "201": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/CtiLinkDto"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "CTI Links"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/cti-links/{id}": {
            "get": {
              "parameters": [
                {
                  "type": "number",
                  "name": "id",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/CtiLinkDto"
                  }
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "CTI Links"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/cti-links/usage/{id}": {
            "get": {
              "parameters": [
                {
                  "type": "number",
                  "name": "id",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/CtiLinkDto"
                  }
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "CTI Links"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/cti-links/find": {
            "post": {
              "parameters": [
                {
                  "name": "EntityFilterDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/EntityFilterDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/CtiLinkDto"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "CTI Links"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/cti-links/{number}": {
            "put": {
              "parameters": [
                {
                  "name": "UpdateCtiLinkDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/UpdateCtiLinkDto"
                  }
                },
                {
                  "type": "number",
                  "name": "number",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "201": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/CtiLinkDto"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "CTI Links"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "delete": {
              "parameters": [
                {
                  "type": "number",
                  "name": "number",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "CTI Link deleted successfully"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "CTI Links"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/cti-links/bulk": {
            "delete": {
              "parameters": [
                {
                  "name": "BulkDeleteEntityDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/BulkDeleteEntityDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "CTI Links deleted successfully"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "CTI Links"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/device-data-template": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/DeviceDataTemplate"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Device Data template"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "post": {
              "parameters": [
                {
                  "name": "CreateDeviceDataTemplateDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/CreateDeviceDataTemplateDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "201": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/DeviceDataTemplate"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Device Data template"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/device-data-template/{key}": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "key",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/DeviceDataTemplate"
                  }
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Device Data template"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "put": {
              "parameters": [
                {
                  "name": "UpdateDeviceDataTemplateDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/UpdateDeviceDataTemplateDto"
                  }
                },
                {
                  "type": "string",
                  "name": "key",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/DeviceDataTemplate"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Device Data template"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "delete": {
              "parameters": [
                {
                  "type": "string",
                  "name": "key",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Device Data Template deleted successfully"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Device Data template"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/device-data-template/find": {
            "post": {
              "parameters": [
                {
                  "name": "EntityFilterDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/EntityFilterDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/DeviceDataTemplate"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Device Data template"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/device-data-template/bulk": {
            "delete": {
              "parameters": [
                {
                  "name": "BulkDeleteEntityDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/BulkDeleteEntityDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Device Data Templates deleted successfully"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Device Data template"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/terminal-group": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "headers": {
                    "x-page-count": {
                      "schema": {
                        "type": "number"
                      },
                      "required": false
                    }
                  },
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/TerminalGroup"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Terminal Group"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "post": {
              "parameters": [
                {
                  "name": "CreateTerminalGroupDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/CreateTerminalGroupDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "201": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/TerminalGroup"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Terminal Group"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/terminal-group/{id}": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "id",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/TerminalGroup"
                  }
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Terminal Group"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "put": {
              "parameters": [
                {
                  "name": "UpdateTerminalGroupDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/UpdateTerminalGroupDto"
                  }
                },
                {
                  "type": "string",
                  "name": "id",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/TerminalGroup"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Terminal Group"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "delete": {
              "parameters": [
                {
                  "type": "string",
                  "name": "id",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Terminal Group deleted successfully"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Terminal Group"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/terminal-group/find": {
            "post": {
              "parameters": [
                {
                  "name": "EntityFilterDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/EntityFilterDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/TerminalGroup"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Terminal Group"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/terminal-group/change-admn-stn-password/{id}": {
            "put": {
              "parameters": [
                {
                  "name": "ChangeTerminalGroupAdminPassword",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/ChangeTerminalGroupAdminPassword"
                  }
                },
                {
                  "type": "string",
                  "name": "id",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/TerminalGroup"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Terminal Group"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/terminal-group/bulk": {
            "delete": {
              "parameters": [
                {
                  "name": "BulkDeleteEntityDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/BulkDeleteEntityDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "Terminal Groups deleted successfully"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "Terminal Group"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/cms-link": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/CMSLinkDto"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "CMS Link"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "post": {
              "parameters": [
                {
                  "name": "CreateCMSLinkDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/CreateCMSLinkDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "201": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/CMSLinkDto"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "CMS Link"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/cms-link/{id}": {
            "get": {
              "parameters": [
                {
                  "type": "string",
                  "name": "id",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/CMSLinkDto"
                  }
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "CMS Link"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "put": {
              "parameters": [
                {
                  "name": "UpdateCMSLinkDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/UpdateCMSLinkDto"
                  }
                },
                {
                  "type": "string",
                  "name": "id",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/CMSLinkDto"
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "CMS Link"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            },
            "delete": {
              "parameters": [
                {
                  "type": "string",
                  "name": "id",
                  "required": true,
                  "in": "path"
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "CMS Link deleted successfully"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "CMS Link"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/tenants/{tenantId}/cms-link/find": {
            "post": {
              "parameters": [
                {
                  "name": "EntityFilterDto",
                  "required": true,
                  "in": "body",
                  "schema": {
                    "$ref": "#/definitions/EntityFilterDto"
                  }
                },
                {
                  "type": "string",
                  "name": "tenantId",
                  "required": true,
                  "in": "path"
                }
              ],
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/CMSLinkDto"
                    }
                  }
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Not found"
                }
              },
              "tags": [
                "CMS Link"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/signal-config": {
            "get": {
              "responses": {
                "200": {
                  "description": ""
                }
              },
              "tags": [
                "Signal Config"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          },
          "/server-info": {
            "get": {
              "summary": "Retrieve server information",
              "description": "Endpoint to retrieve the server information.",
              "responses": {
                "200": {
                  "description": "",
                  "schema": {
                    "$ref": "#/definitions/ServerInfo"
                  }
                }
              },
              "tags": [
                "Server Information"
              ],
              "produces": [
                "application/json"
              ],
              "consumes": [
                "application/json"
              ]
            }
          }
        },
        "definitions": {
          "Megabox": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "ipAddress": {
                "type": "string"
              },
              "agentsCapacity": {
                "type": "number"
              },
              "callsCapacity": {
                "type": "number"
              },
              "status": {
                "type": "string"
              },
              "tenants": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "required": [
              "id",
              "name",
              "ipAddress",
              "agentsCapacity",
              "callsCapacity",
              "status",
              "tenants"
            ]
          },
          "MediaServerConnectionDto": {
            "type": "object",
            "properties": {
              "host": {
                "type": "string"
              },
              "username": {
                "type": "string"
              },
              "password": {
                "type": "string"
              },
              "destinationFilePath": {
                "type": "string"
              }
            },
            "required": [
              "host",
              "username",
              "password",
              "destinationFilePath"
            ]
          },
          "Buffer": {
            "type": "object",
            "properties": {}
          },
          "Tenant": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "tenantId": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "email": {
                "type": "string"
              },
              "industry": {
                "type": "string"
              },
              "noOfEmployees": {
                "type": "number"
              },
              "firstName": {
                "type": "string"
              },
              "lastName": {
                "type": "string"
              },
              "telephoneNumber": {
                "type": "string"
              },
              "confirmationGUID": {
                "type": "string"
              },
              "address": {
                "type": "string"
              },
              "maxActiveAgents": {
                "type": "number",
                "default": 0
              },
              "callVolume": {
                "type": "number",
                "default": 0
              },
              "status": {
                "type": "string"
              },
              "megaBox": {
                "$ref": "#/definitions/Megabox"
              },
              "megaBoxId": {
                "type": "string"
              },
              "secondaryMegaBox": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "secondaryMegaBoxIds": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "sipRegistrarConnectionString": {
                "type": "string"
              },
              "ccsConnectionString": {
                "type": "string"
              },
              "aesConfiguration": {
                "type": "string"
              },
              "isPOD": {
                "type": "boolean",
                "default": false
              },
              "podId": {
                "type": "string"
              },
              "domain": {
                "type": "string"
              },
              "seConnectionString": {
                "type": "string"
              },
              "shmRestAPIConnectionString": {
                "type": "string"
              },
              "mediaServerConnection": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/MediaServerConnectionDto"
                }
              },
              "logoFile": {
                "$ref": "#/definitions/Buffer"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time"
              }
            },
            "required": [
              "id",
              "name",
              "email",
              "address",
              "maxActiveAgents",
              "callVolume",
              "status",
              "megaBox",
              "megaBoxId",
              "isPOD",
              "createdAt",
              "updatedAt"
            ]
          },
          "CreateTenantDto": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "email": {
                "type": "string"
              },
              "address": {
                "type": "string"
              },
              "maxActiveAgents": {
                "type": "number"
              },
              "callVolume": {
                "type": "number"
              },
              "sipRegistrarConnectionString": {
                "type": "string"
              },
              "ccsConnectionString": {
                "type": "string"
              },
              "mediaServerConnection": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/MediaServerConnectionDto"
                }
              },
              "aesConfiguration": {
                "type": "string"
              },
              "isPOD": {
                "type": "boolean"
              },
              "podId": {
                "type": "string"
              },
              "domain": {
                "type": "string"
              },
              "status": {
                "type": "string"
              },
              "megaBoxId": {
                "type": "string"
              },
              "secondaryMegaBoxIds": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "industry": {
                "type": "string"
              },
              "noOfEmployees": {
                "type": "number"
              },
              "firstName": {
                "type": "string"
              },
              "lastName": {
                "type": "string"
              },
              "telephoneNumber": {
                "type": "string"
              },
              "seConnectionString": {
                "type": "string"
              },
              "shmRestAPIConnectionString": {
                "type": "string"
              }
            },
            "required": [
              "id",
              "name",
              "email",
              "address",
              "maxActiveAgents",
              "callVolume",
              "status"
            ]
          },
          "CreateAdminAccountDto": {
            "type": "object",
            "properties": {
              "password": {
                "type": "string"
              },
              "key": {
                "type": "string"
              }
            },
            "required": [
              "password",
              "key"
            ]
          },
          "TenantFileDto": {
            "type": "object",
            "properties": {
              "content": {
                "type": "string"
              }
            },
            "required": [
              "content"
            ]
          },
          "BulkDeleteEntityDto": {
            "type": "object",
            "properties": {
              "ids": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "required": [
              "ids"
            ]
          },
          "UpdateTenantDto": {
            "type": "object",
            "properties": {
              "tenantId": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "email": {
                "type": "string"
              },
              "address": {
                "type": "string"
              },
              "maxActiveAgents": {
                "type": "number"
              },
              "callVolume": {
                "type": "number"
              },
              "status": {
                "type": "string"
              },
              "megaBoxId": {
                "type": "string"
              },
              "secondaryMegaBoxIds": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "sipRegistrarConnectionString": {
                "type": "string"
              },
              "ccsConnectionString": {
                "type": "string"
              },
              "mediaServerConnection": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/MediaServerConnectionDto"
                }
              },
              "aesConfiguration": {
                "type": "string"
              },
              "isPOD": {
                "type": "boolean"
              },
              "domain": {
                "type": "string"
              },
              "podId": {
                "type": "string"
              },
              "industry": {
                "type": "string"
              },
              "noOfEmployees": {
                "type": "number"
              },
              "firstName": {
                "type": "string"
              },
              "lastName": {
                "type": "string"
              },
              "telephoneNumber": {
                "type": "string"
              },
              "seConnectionString": {
                "type": "string"
              },
              "shmRestAPIConnectionString": {
                "type": "string"
              }
            },
            "required": [
              "name",
              "email",
              "address",
              "maxActiveAgents",
              "callVolume",
              "status"
            ]
          },
          "CreateMegaBoxDto": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "ipAddress": {
                "type": "string"
              },
              "agentsCapacity": {
                "type": "number"
              },
              "callsCapacity": {
                "type": "number"
              },
              "status": {
                "type": "string"
              }
            },
            "required": [
              "name",
              "ipAddress",
              "agentsCapacity",
              "callsCapacity",
              "status"
            ]
          },
          "UpdateMegaBoxDto": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "ipAddress": {
                "type": "string"
              },
              "agentsCapacity": {
                "type": "number"
              },
              "callsCapacity": {
                "type": "number"
              },
              "status": {
                "type": "string"
              }
            },
            "required": [
              "name",
              "ipAddress",
              "agentsCapacity",
              "callsCapacity",
              "status"
            ]
          },
          "LookupRuleDto": {
            "type": "object",
            "properties": {
              "hasStartEnd": {
                "type": "boolean"
              },
              "hasLength": {
                "type": "boolean"
              },
              "dataType": {
                "type": "string"
              },
              "relation": {
                "type": "string"
              },
              "consider": {
                "type": "boolean"
              },
              "buttonLength": {
                "type": "number"
              },
              "butttonKVP": {
                "type": "boolean"
              },
              "butttonKVVP": {
                "type": "boolean"
              },
              "schema": {
                "type": "object"
              },
              "uischema": {
                "type": "object"
              },
              "maxLength": {
                "type": "number"
              }
            }
          },
          "Lookup": {
            "type": "object",
            "properties": {
              "id": {
                "type": "number"
              },
              "type": {
                "type": "string",
                "enum": [
                  "DialPlanScheme",
                  "EmployeePermission",
                  "StationType",
                  "ButtonFeatures",
                  "Features",
                  "GlobalConfigurations",
                  "AutoAnswerEmployee",
                  "AutoAnswerStation",
                  "WorkModeOnLogin",
                  "WorkModeOnLoginSystemWide",
                  "ReasonCodeType",
                  "ReasonCodeTypeSystemWide",
                  "CallingRestrictionCOR",
                  "DeviceDataItems",
                  "CORPermissions",
                  "VUStatsAgents",
                  "VUStatsSplit"
                ]
              },
              "key": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "rules": {
                "$ref": "#/definitions/LookupRuleDto"
              }
            },
            "required": [
              "id",
              "type",
              "key",
              "name"
            ]
          },
          "AcdEngine": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "details": {
                "type": "string"
              },
              "data": {
                "type": "object"
              },
              "provider": {
                "type": "string",
                "enum": [
                  "AVAYA",
                  "CISCO",
                  "GENESYS"
                ]
              },
              "config": {
                "type": "object"
              },
              "namePrefix": {
                "type": "string"
              },
              "numberPrefix": {
                "type": "string"
              },
              "namePrefixedEntities": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "numberPrefixedEntities": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "tenantId": {
                "type": "string"
              }
            },
            "required": [
              "id",
              "name",
              "provider",
              "config",
              "tenantId"
            ]
          },
          "Date": {
            "type": "object",
            "properties": {}
          },
          "CreateAcdEngineDto": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "provider": {
                "type": "string",
                "enum": [
                  "AVAYA",
                  "CISCO",
                  "GENESYS"
                ]
              },
              "details": {
                "type": "string"
              },
              "namePrefix": {
                "type": "string"
              },
              "numberPrefix": {
                "type": "string"
              },
              "createdAt": {
                "$ref": "#/definitions/Date"
              },
              "updatedAt": {
                "$ref": "#/definitions/Date"
              },
              "config": {
                "type": "object",
                "example": {
                  "host": "10.32.7.25",
                  "username": "portal@10.32.7.22:5022",
                  "password": "mcs_test_password"
                }
              },
              "tenantId": {
                "type": "string"
              }
            },
            "required": [
              "name",
              "provider",
              "namePrefix",
              "numberPrefix",
              "createdAt",
              "updatedAt",
              "config",
              "tenantId"
            ]
          },
          "UpdateAcdEngineDto": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "provider": {
                "type": "string",
                "enum": [
                  "AVAYA",
                  "CISCO",
                  "GENESYS"
                ]
              },
              "details": {
                "type": "string"
              },
              "config": {
                "type": "object"
              },
              "updatedAt": {
                "$ref": "#/definitions/Date"
              }
            },
            "required": [
              "updatedAt"
            ]
          },
          "CallDispositionEG": {
            "type": "object",
            "properties": {
              "disposition": {
                "type": "string"
              }
            }
          },
          "CreateEmployeeGroupDto": {
            "type": "object",
            "properties": {
              "number": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "tenantId": {
                "type": "string"
              },
              "expression": {
                "type": "string"
              },
              "permissionSetId": {
                "type": "string"
              },
              "musicOnHold": {
                "type": "string"
              },
              "channelType": {
                "type": "string",
                "enum": [
                  "VOICE",
                  "RETAIL",
                  "CHAT",
                  "EMAIL",
                  "MESSAGING"
                ],
                "default": "VOICE"
              },
              "channelSubtype": {
                "type": "string",
                "enum": [
                  "SMS",
                  "WHATSAPP",
                  "FACEBOOK",
                  "APPLEBC"
                ]
              },
              "programId": {
                "type": "number"
              },
              "bpoId": {
                "type": "string"
              },
              "timedACWInterval": {
                "type": "number"
              },
              "callDisposition": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/CallDispositionEG"
                }
              },
              "source": {
                "type": "string"
              },
              "callsWarningThreshold": {
                "type": "number",
                "default": 0
              },
              "timeWarningThreshold": {
                "type": "number",
                "default": 0
              },
              "serviceLevelTargetPercentage": {
                "type": "number",
                "default": 80
              },
              "serviceLevelTargetSeconds": {
                "type": "number",
                "default": 20
              },
              "interruptibleAuxThreshold": {
                "type": "string",
                "enum": [
                  "none",
                  "calls_warning_threshold",
                  "time_warning_threshold",
                  "service_level_target"
                ],
                "default": "none"
              },
              "interruptibleAuxDeactivationThreshold": {
                "type": "number",
                "default": 0
              },
              "ronaRings": {
                "type": "number",
                "default": 0
              },
              "ronaToVDN": {
                "type": "string"
              },
              "ronaToVDNActiveContext": {
                "type": "boolean",
                "default": false
              },
              "ronaOnIPFailureToVDN": {
                "type": "string"
              },
              "ronaOnIPFToVDNActiveContext": {
                "type": "boolean",
                "default": false
              },
              "aiPairingConfig": {
                "type": "string",
                "enum": [
                  "no",
                  "yes",
                  "system"
                ],
                "default": "no"
              },
              "groupType": {
                "type": "string",
                "enum": [
                  "ead-loa",
                  "ead-mia",
                  "ucd-loa",
                  "ucd-mia"
                ],
                "default": "ucd-mia"
              },
              "forcedEntryOfSCorCWC": {
                "type": "boolean"
              },
              "queueLimit": {
                "type": "number",
                "default": 0
              },
              "supervisorExtension": {
                "type": "string"
              }
            },
            "required": [
              "number",
              "name",
              "tenantId",
              "channelType"
            ]
          },
          "ErrorResponse": {
            "type": "object",
            "properties": {
              "description": {
                "type": "string"
              }
            },
            "required": [
              "description"
            ]
          },
          "DnObjectDto": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "extension": {
                "type": "string"
              }
            }
          },
          "MegaBrowserCallTypeDto": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "extension": {
                "type": "string"
              },
              "expression": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "number": {
                "type": "string"
              },
              "source": {
                "type": "string"
              },
              "tenantId": {
                "type": "string"
              },
              "callFlowId": {
                "type": "string"
              },
              "agentGroups": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "programId": {
                "type": "number"
              },
              "dnObject": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/DnObjectDto"
                }
              }
            },
            "required": [
              "expression",
              "name",
              "number",
              "tenantId"
            ]
          },
          "VectorDto": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "vectorNumber": {
                "type": "string"
              },
              "vectorName": {
                "type": "string"
              },
              "data": {
                "type": "object"
              },
              "source": {
                "type": "string"
              },
              "tenantId": {
                "type": "string"
              }
            },
            "required": [
              "vectorNumber",
              "tenantId"
            ]
          },
          "CreateEmployeeDto": {
            "type": "object",
            "properties": {
              "tenantId": {
                "type": "string"
              },
              "number": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "callHandlingPreference": {
                "type": "string",
                "enum": [
                  "greatest-need",
                  "skill-level"
                ]
              },
              "pin": {
                "type": "string"
              },
              "pinSalt": {
                "type": "string"
              },
              "pinAlgorithm": {
                "type": "string"
              },
              "sipId": {
                "type": "string"
              },
              "mobileNumber": {
                "type": "string"
              },
              "telephonyState": {
                "type": "number",
                "enum": [
                  0,
                  1,
                  2,
                  3
                ]
              },
              "attributes": {
                "type": "object"
              },
              "permissionSetId": {
                "type": "string"
              },
              "autoAnswer": {
                "type": "number",
                "default": 0
              },
              "workModeOnLogin": {
                "type": "number",
                "default": 0
              },
              "auxWorkReasonCodeType": {
                "type": "number",
                "default": 0
              },
              "logoutReasonCodeType": {
                "type": "number",
                "default": 0
              },
              "interruptibleAux": {
                "type": "string",
                "enum": [
                  "none",
                  "auto_in_interrupt",
                  "manual_in_interrupt",
                  "notify_interrupt"
                ],
                "default": "none"
              },
              "source": {
                "type": "string"
              },
              "country": {
                "type": "string"
              },
              "streetNumber": {
                "type": "string"
              },
              "streetName": {
                "type": "string"
              },
              "city": {
                "type": "string"
              },
              "stateProvince": {
                "type": "string"
              },
              "zipPostalCode": {
                "type": "string"
              },
              "emergencyContactNumber": {
                "type": "string"
              },
              "programId": {
                "type": "number"
              },
              "capacityProfileId": {
                "type": "string"
              },
              "maxTimeAgentInACWBeforeLogout": {
                "type": "string"
              },
              "directAgentSkill": {
                "type": "string"
              },
              "auxAgentRemainsInLOAqueue": {
                "type": "string",
                "enum": [
                  "y",
                  "n",
                  "system"
                ]
              },
              "miaAcrossSkills": {
                "type": "string",
                "enum": [
                  "y",
                  "n",
                  "system"
                ]
              },
              "auxAgentConsideredIdleMIA": {
                "type": "string",
                "enum": [
                  "y",
                  "n",
                  "system"
                ]
              },
              "acwAgentConsideredIdle": {
                "type": "string",
                "enum": [
                  "y",
                  "n",
                  "system"
                ]
              },
              "forcedAgentLogoutTime": {
                "type": "string"
              },
              "userHandle": {
                "type": "string"
              },
              "defaultLocation": {
                "type": "string"
              },
              "coveragePathId": {
                "type": "string"
              }
            },
            "required": [
              "tenantId",
              "number",
              "name",
              "telephonyState",
              "permissionSetId"
            ]
          },
          "ServiceHourRange": {
            "type": "object",
            "properties": {
              "startHour": {
                "type": "number"
              },
              "startMin": {
                "type": "number"
              },
              "endHour": {
                "type": "number"
              },
              "endMin": {
                "type": "number"
              }
            },
            "required": [
              "startHour",
              "startMin",
              "endHour",
              "endMin"
            ]
          },
          "CreateServiceHour": {
            "type": "object",
            "properties": {
              "tenantId": {
                "type": "string"
              },
              "tableId": {
                "type": "number"
              },
              "name": {
                "type": "string"
              },
              "day": {
                "type": "string",
                "enum": [
                  "Monday",
                  "Tuesday",
                  "Wednesday",
                  "Thursday",
                  "Friday",
                  "Saturday",
                  "Sunday"
                ]
              },
              "serviceHourRange": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ServiceHourRange"
                }
              },
              "source": {
                "type": "string"
              },
              "timezone": {
                "type": "string"
              }
            },
            "required": [
              "tenantId",
              "tableId",
              "name",
              "day",
              "serviceHourRange"
            ]
          },
          "CreateHolidayDto": {
            "type": "object",
            "properties": {
              "tenantId": {
                "type": "string"
              },
              "tableId": {
                "type": "number"
              },
              "name": {
                "type": "string"
              },
              "startMonth": {
                "type": "number"
              },
              "startDay": {
                "type": "number"
              },
              "startHour": {
                "type": "number"
              },
              "startMin": {
                "type": "number"
              },
              "endMonth": {
                "type": "number"
              },
              "endDay": {
                "type": "number"
              },
              "endHour": {
                "type": "number"
              },
              "endMin": {
                "type": "number"
              },
              "description": {
                "type": "string"
              },
              "source": {
                "type": "string"
              }
            },
            "required": [
              "tenantId",
              "tableId",
              "name",
              "startMonth",
              "startDay",
              "startHour",
              "startMin",
              "endMonth",
              "endDay",
              "endHour",
              "endMin"
            ]
          },
          "CreateVectorVariablesDto": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "ani",
                  "asaiuui",
                  "collect",
                  "tod",
                  "value",
                  "vdn",
                  "lookup",
                  "dow",
                  "doy",
                  "stepcnt",
                  "vdntime"
                ]
              },
              "description": {
                "type": "string"
              },
              "scope": {
                "type": "string"
              },
              "assignment": {
                "type": "string"
              },
              "start": {
                "type": "number"
              },
              "maxLength": {
                "type": "number"
              },
              "colType": {
                "type": "string",
                "enum": [
                  "string",
                  "int",
                  "bool"
                ]
              },
              "datasourceId": {
                "type": "string"
              },
              "tenantId": {
                "type": "string"
              }
            },
            "required": [
              "name",
              "type",
              "scope",
              "tenantId"
            ]
          },
          "Employee": {
            "type": "object",
            "properties": {
              "tenantId": {
                "type": "string"
              },
              "number": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "callHandlingPreference": {
                "type": "string",
                "enum": [
                  "greatest-need",
                  "skill-level"
                ]
              },
              "pin": {
                "type": "string"
              },
              "pinSalt": {
                "type": "string"
              },
              "pinAlgorithm": {
                "type": "string"
              },
              "sipId": {
                "type": "string"
              },
              "mobileNumber": {
                "type": "string"
              },
              "telephonyState": {
                "type": "number",
                "enum": [
                  0,
                  1,
                  2,
                  3
                ]
              },
              "attributes": {
                "type": "object"
              },
              "permissionSetId": {
                "type": "string"
              },
              "autoAnswer": {
                "type": "number",
                "default": 0
              },
              "workModeOnLogin": {
                "type": "number",
                "default": 0
              },
              "auxWorkReasonCodeType": {
                "type": "number",
                "default": 0
              },
              "logoutReasonCodeType": {
                "type": "number",
                "default": 0
              },
              "interruptibleAux": {
                "type": "string",
                "enum": [
                  "none",
                  "auto_in_interrupt",
                  "manual_in_interrupt",
                  "notify_interrupt"
                ]
              },
              "source": {
                "type": "string"
              },
              "country": {
                "type": "string"
              },
              "streetNumber": {
                "type": "string"
              },
              "streetName": {
                "type": "string"
              },
              "city": {
                "type": "string"
              },
              "stateProvince": {
                "type": "string"
              },
              "zipPostalCode": {
                "type": "string"
              },
              "emergencyContactNumber": {
                "type": "string"
              },
              "programId": {
                "type": "number"
              },
              "capacityProfileId": {
                "type": "string"
              },
              "maxTimeAgentInACWBeforeLogout": {
                "type": "string"
              },
              "directAgentSkill": {
                "type": "string"
              },
              "auxAgentRemainsInLOAqueue": {
                "type": "string",
                "enum": [
                  "y",
                  "n",
                  "system"
                ]
              },
              "miaAcrossSkills": {
                "type": "string",
                "enum": [
                  "y",
                  "n",
                  "system"
                ]
              },
              "auxAgentConsideredIdleMIA": {
                "type": "string",
                "enum": [
                  "y",
                  "n",
                  "system"
                ]
              },
              "acwAgentConsideredIdle": {
                "type": "string",
                "enum": [
                  "y",
                  "n",
                  "system"
                ]
              },
              "forcedAgentLogoutTime": {
                "type": "string"
              },
              "userHandle": {
                "type": "string"
              },
              "defaultLocation": {
                "type": "string"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time"
              },
              "vmNumber": {
                "type": "object"
              },
              "coveragePathId": {
                "type": "string"
              }
            },
            "required": [
              "tenantId",
              "number",
              "name",
              "telephonyState",
              "createdAt",
              "updatedAt"
            ]
          },
          "ProfileSettings": {
            "type": "object",
            "properties": {
              "phoneScreenOnCalling": {
                "type": "boolean"
              },
              "dialingOption": {
                "type": "string",
                "enum": [
                  "ONHOOK",
                  "EDITABLE"
                ]
              },
              "audioPath": {
                "type": "string",
                "enum": [
                  "SPEAKER",
                  "HEADSET"
                ]
              },
              "redial": {
                "type": "string",
                "enum": [
                  "ONE_NUMBER",
                  "LIST"
                ]
              },
              "headsetSignaling": {
                "type": "string",
                "enum": [
                  "DISABLED",
                  "SWITCHHOOK_AND_ALERTS",
                  "SWITCHHOOK_ONLY"
                ]
              },
              "buttonClicks": {
                "type": "boolean"
              },
              "backgroundLogo": {
                "type": "string",
                "default": "default"
              },
              "callPickupIndication": {
                "type": "string",
                "enum": [
                  "BOTH",
                  "AUDIBLE",
                  "VISUAL",
                  "NONE"
                ]
              },
              "phoneScreen": {
                "type": "string",
                "enum": [
                  "FULL",
                  "HALF"
                ]
              },
              "personalizedRinging": {
                "type": "string",
                "enum": [
                  "CLASSIC_TONE_1",
                  "CLASSIC_TONE_2",
                  "CLASSIC_TONE_3",
                  "CLASSIC_TONE_4",
                  "CLASSIC_TONE_5",
                  "CLASSIC_TONE_6",
                  "CLASSIC_TONE_7",
                  "CLASSIC_TONE_8",
                  "Cheerful",
                  "Chimes",
                  "Telephone_Bell",
                  "Xylophone",
                  "Drum_Beat",
                  "Shimmer"
                ],
                "default": "CLASSIC_TONE_3"
              },
              "showQuickTouchPanel": {
                "type": "number"
              },
              "userPrefferedLanguage": {
                "type": "number"
              },
              "timeFormat": {
                "type": "string",
                "enum": [
                  "HOUR_12",
                  "HOUR_24"
                ]
              },
              "awayTimer": {
                "type": "boolean"
              },
              "awayTimerValue": {
                "type": "number"
              }
            }
          },
          "ServiceTransport": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "port": {
                "type": "string"
              }
            }
          },
          "DeviceDataList": {
            "type": "object",
            "properties": {
              "catagory": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "value": {
                "type": "string"
              }
            }
          },
          "VolumeSettings": {
            "type": "object",
            "properties": {
              "ringerVolume": {
                "type": "number"
              },
              "receiverVolume": {
                "type": "number"
              },
              "speakerVolume": {
                "type": "number"
              },
              "ringerCadence": {
                "type": "number"
              }
            }
          },
          "DeviceDataByMacAddress": {
            "type": "object",
            "properties": {
              "macAddress": {
                "type": "string"
              },
              "deviceDataList": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/DeviceDataList"
                }
              },
              "deviceVolumeSettings": {
                "$ref": "#/definitions/VolumeSettings"
              },
              "timestamp": {
                "type": "string"
              }
            }
          },
          "VenderModelTag": {
            "type": "object",
            "properties": {
              "tag": {
                "type": "string"
              }
            }
          },
          "DeviceDataStationTypeConfigurations": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "value": {
                "type": "string"
              },
              "vendorModelTag": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/VenderModelTag"
                }
              }
            }
          },
          "DeviceDataByStationType": {
            "type": "object",
            "properties": {
              "vendor": {
                "type": "string"
              },
              "model": {
                "type": "string"
              },
              "configurations": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/DeviceDataStationTypeConfigurations"
                }
              },
              "timestamp": {
                "type": "string"
              }
            }
          },
          "OneTouchDialList": {
            "type": "object",
            "properties": {
              "buttonLocation": {
                "type": "number"
              },
              "address": {
                "type": "string"
              },
              "label": {
                "type": "string"
              }
            }
          },
          "StationButtonConfig": {
            "type": "object",
            "properties": {
              "key": {
                "type": "number"
              },
              "value": {
                "type": "string"
              },
              "value2": {
                "type": "string"
              },
              "params": {
                "type": "object"
              }
            },
            "required": [
              "key"
            ]
          },
          "Station": {
            "type": "object",
            "properties": {
              "number": {
                "type": "string"
              },
              "tenantId": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "domain": {
                "type": "string"
              },
              "password": {
                "type": "string"
              },
              "passwordHA1": {
                "type": "string",
                "default": ""
              },
              "passwordHA1B": {
                "type": "string",
                "default": ""
              },
              "passwordHash": {
                "type": "string"
              },
              "passwordSalt": {
                "type": "string"
              },
              "passwordAlgorithm": {
                "type": "string",
                "default": "SHA-512"
              },
              "defaultLocation": {
                "type": "string"
              },
              "profileSetting": {
                "$ref": "#/definitions/ProfileSettings"
              },
              "serviceURI": {
                "type": "string"
              },
              "serviceTransport": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ServiceTransport"
                }
              },
              "deviceDataByMacAddress": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/DeviceDataByMacAddress"
                }
              },
              "deviceDataByStationtype": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/DeviceDataByStationType"
                }
              },
              "oneTouchDialList": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/OneTouchDialList"
                }
              },
              "vmNumber": {
                "type": "object"
              },
              "buttonConfig": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/StationButtonConfig"
                }
              },
              "callForwardDestination": {
                "type": "string"
              },
              "softPhone": {
                "type": "boolean",
                "default": false
              },
              "videoEnabled": {
                "type": "boolean",
                "default": false
              },
              "rtpSettings": {
                "type": "number"
              },
              "autoAnswer": {
                "type": "number",
                "default": 0
              },
              "permissionSetId": {
                "type": "string"
              },
              "localOrRemote": {
                "type": "string",
                "enum": [
                  "LOCAL",
                  "REMOTE"
                ]
              },
              "listenPort": {
                "type": "string",
                "default": 5060
              },
              "protocol": {
                "type": "string",
                "enum": [
                  "UDP",
                  "TCP",
                  "TLS"
                ],
                "default": "UDP"
              },
              "programId": {
                "type": "number"
              },
              "room": {
                "type": "string"
              },
              "floor": {
                "type": "string"
              },
              "building": {
                "type": "string"
              },
              "coveragePathId": {
                "type": "string"
              },
              "source": {
                "type": "string"
              },
              "userHandle": {
                "type": "string"
              },
              "setType": {
                "type": "string",
                "enum": [
                  "J169CC",
                  "J179CC",
                  "9608SIPCC",
                  "9611SIPCC",
                  "9621SIPCC",
                  "9641SIPCC"
                ]
              },
              "createdAt": {
                "type": "string",
                "format": "date-time"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time"
              }
            },
            "required": [
              "number",
              "tenantId",
              "name",
              "domain",
              "password",
              "createdAt",
              "updatedAt"
            ]
          },
          "ServiceHour": {
            "type": "object",
            "properties": {
              "id": {
                "type": "number"
              },
              "tenantId": {
                "type": "string"
              },
              "tableId": {
                "type": "number"
              },
              "name": {
                "type": "string"
              },
              "day": {
                "type": "string",
                "enum": [
                  "Monday",
                  "Tuesday",
                  "Wednesday",
                  "Thursday",
                  "Friday",
                  "Saturday",
                  "Sunday"
                ]
              },
              "serviceHourRange": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ServiceHourRange"
                }
              },
              "source": {
                "type": "string"
              },
              "timezone": {
                "type": "string"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time"
              }
            },
            "required": [
              "id",
              "tenantId",
              "tableId",
              "name",
              "day",
              "serviceHourRange",
              "createdAt",
              "updatedAt"
            ]
          },
          "Holiday": {
            "type": "object",
            "properties": {
              "id": {
                "type": "number"
              },
              "tenantId": {
                "type": "string"
              },
              "tableId": {
                "type": "number"
              },
              "name": {
                "type": "string"
              },
              "startMonth": {
                "type": "number"
              },
              "startDay": {
                "type": "number"
              },
              "startHour": {
                "type": "number"
              },
              "startMin": {
                "type": "number"
              },
              "endMonth": {
                "type": "number"
              },
              "endDay": {
                "type": "number"
              },
              "endHour": {
                "type": "number"
              },
              "endMin": {
                "type": "number"
              },
              "description": {
                "type": "string"
              },
              "source": {
                "type": "string"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time"
              }
            },
            "required": [
              "id",
              "tenantId",
              "tableId",
              "name",
              "startMonth",
              "startDay",
              "startHour",
              "startMin",
              "endMonth",
              "endDay",
              "endHour",
              "endMin",
              "createdAt",
              "updatedAt"
            ]
          },
          "AgentGroupsItemDto": {
            "type": "object",
            "properties": {
              "old": {
                "type": "string"
              },
              "current": {
                "type": "string"
              }
            },
            "required": [
              "old",
              "current"
            ]
          },
          "CallTypesItemDto": {
            "type": "object",
            "properties": {
              "callTypeId": {
                "type": "string"
              },
              "acdEngineId": {
                "type": "string"
              },
              "agentGroups": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/AgentGroupsItemDto"
                }
              }
            },
            "required": [
              "callTypeId",
              "acdEngineId",
              "agentGroups"
            ]
          },
          "CallflowTransformDto": {
            "type": "object",
            "properties": {
              "tenantId": {
                "type": "string"
              },
              "lobId": {
                "type": "number"
              },
              "callTypes": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/CallTypesItemDto"
                }
              }
            },
            "required": [
              "tenantId",
              "callTypes"
            ]
          },
          "MultipleCallflowTransformDto": {
            "type": "object",
            "properties": {
              "transforms": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/CallflowTransformDto"
                }
              }
            },
            "required": [
              "transforms"
            ]
          },
          "CallflowReturnDto": {
            "type": "object",
            "properties": {
              "callflowNumber": {
                "type": "string"
              },
              "callflowId": {
                "type": "string"
              },
              "callTypeId": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "required": [
              "callflowNumber",
              "callflowId",
              "callTypeId"
            ]
          },
          "ImportEmployeeDto": {
            "type": "object",
            "properties": {
              "Number": {
                "type": "string"
              },
              "Name": {
                "type": "string"
              },
              "PIN": {
                "type": "string"
              },
              "CallHandlingPreference": {
                "type": "string"
              },
              "MobileNumber": {
                "type": "string"
              },
              "TelephonyState": {
                "type": "string"
              },
              "Attributes": {
                "type": "string"
              },
              "SkillAndLevels": {
                "type": "string"
              },
              "PermissionsSet": {
                "type": "string"
              },
              "AutoAnswer": {
                "type": "string",
                "default": 0
              },
              "WorkModeOnLogin": {
                "type": "string",
                "default": 0
              },
              "AuxWorkReasonCodeType": {
                "type": "string",
                "default": 0
              },
              "LogoutReasonCodeType": {
                "type": "string",
                "default": 0
              },
              "SIPId": {
                "type": "string"
              },
              "InterruptibleAux": {
                "type": "string"
              },
              "Country": {
                "type": "string"
              },
              "StreetNumber": {
                "type": "string"
              },
              "StreetName": {
                "type": "string"
              },
              "City": {
                "type": "string"
              },
              "StateProvince": {
                "type": "string"
              },
              "ZipPostalCode": {
                "type": "string"
              },
              "EmergencyContactNumber": {
                "type": "string"
              },
              "CapacityProfileId": {
                "type": "string"
              },
              "UserHandle": {
                "type": "string"
              },
              "MaxTimeAgentInACWBeforeLogout": {
                "type": "string"
              },
              "DirectAgentSkill": {
                "type": "string"
              },
              "AUXAgentRemainsInLOAqueue": {
                "type": "string"
              },
              "MIAAcrossSkills": {
                "type": "string"
              },
              "AUXAgentConsideredIdleMIA": {
                "type": "string"
              },
              "ACWAgentConsideredIdle": {
                "type": "string"
              },
              "ForcedAgentLogoutTime": {
                "type": "string"
              },
              "DefaultLocation": {
                "type": "string"
              },
              "CoveragePathId": {
                "type": "string"
              },
              "VmNumber": {
                "type": "string"
              }
            },
            "required": [
              "Number",
              "Name",
              "TelephonyState"
            ]
          },
          "OrderByDto": {
            "type": "object",
            "properties": {
              "sort": {
                "type": "string",
                "example": "data.name"
              },
              "order": {
                "type": "string",
                "example": "asc",
                "enum": [
                  "asc",
                  "desc"
                ]
              }
            },
            "required": [
              "sort",
              "order"
            ]
          },
          "PaginationDto": {
            "type": "object",
            "properties": {
              "page": {
                "type": "number",
                "default": 1,
                "example": 1
              },
              "perPage": {
                "type": "number",
                "default": 1,
                "example": 1
              }
            },
            "required": [
              "page",
              "perPage"
            ]
          },
          "EntityFilterDto": {
            "type": "object",
            "properties": {
              "filter": {
                "type": "object",
                "example": {
                  "data.number": {
                    "$eq": "1000"
                  }
                }
              },
              "orderBy": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/OrderByDto"
                }
              },
              "paginate": {
                "$ref": "#/definitions/PaginationDto"
              },
              "resolve": {
                "type": "boolean",
                "default": true
              }
            }
          },
          "EmployeeProfilePictureDto": {
            "type": "object",
            "properties": {
              "content": {
                "type": "string"
              }
            },
            "required": [
              "content"
            ]
          },
          "BulkCreateEmployeeDto": {
            "type": "object",
            "properties": {
              "employees": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/CreateEmployeeDto"
                }
              }
            },
            "required": [
              "employees"
            ]
          },
          "ImportEmployeeDtoType": {
            "type": "object",
            "properties": {
              "employees": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ImportEmployeeDto"
                }
              }
            },
            "required": [
              "employees"
            ]
          },
          "BulkUpdateEmployeeDto": {
            "type": "object",
            "properties": {
              "tenantId": {
                "type": "string"
              },
              "numbers": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "telephonyState": {
                "type": "number",
                "enum": [
                  0,
                  1,
                  2,
                  3
                ]
              },
              "callHandlingPreference": {
                "type": "string",
                "enum": [
                  "greatest-need",
                  "skill-level"
                ]
              },
              "pin": {
                "type": "string"
              },
              "attributes": {
                "type": "object"
              },
              "permissionSetId": {
                "type": "string"
              },
              "autoAnswer": {
                "type": "number",
                "default": 0
              },
              "workModeOnLogin": {
                "type": "number",
                "default": 0
              },
              "auxWorkReasonCodeType": {
                "type": "number",
                "default": 0
              },
              "logoutReasonCodeType": {
                "type": "number",
                "default": 0
              },
              "programId": {
                "type": "number"
              },
              "capacityProfileId": {
                "type": "string"
              },
              "maxTimeAgentInACWBeforeLogout": {
                "type": "string"
              },
              "directAgentSkill": {
                "type": "string"
              },
              "auxAgentRemainsInLOAqueue": {
                "type": "string",
                "enum": [
                  "y",
                  "n",
                  "system"
                ]
              },
              "miaAcrossSkills": {
                "type": "string",
                "enum": [
                  "y",
                  "n",
                  "system"
                ]
              },
              "auxAgentConsideredIdleMIA": {
                "type": "string",
                "enum": [
                  "y",
                  "n",
                  "system"
                ]
              },
              "acwAgentConsideredIdle": {
                "type": "string",
                "enum": [
                  "y",
                  "n",
                  "system"
                ]
              },
              "forcedAgentLogoutTime": {
                "type": "string"
              },
              "userHandle": {
                "type": "string"
              },
              "defaultLocation": {
                "type": "string"
              },
              "coveragePathId": {
                "type": "string"
              }
            },
            "required": [
              "tenantId",
              "numbers"
            ]
          },
          "UpdateEmployeeProfileDto": {
            "type": "object",
            "properties": {
              "country": {
                "type": "string"
              },
              "streetNumber": {
                "type": "string"
              },
              "streetName": {
                "type": "string"
              },
              "city": {
                "type": "string"
              },
              "stateProvince": {
                "type": "string"
              },
              "zipPostalCode": {
                "type": "string"
              },
              "emergencyContactNumber": {
                "type": "string"
              },
              "mobileNumber": {
                "type": "string"
              },
              "telephonyState": {
                "type": "number",
                "enum": [
                  0,
                  1,
                  2,
                  3
                ]
              }
            },
            "required": [
              "telephonyState"
            ]
          },
          "UpdateEmployeeDto": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "tenantId": {
                "type": "string"
              },
              "updatePin": {
                "type": "boolean",
                "default": false
              },
              "pin": {
                "type": "string"
              },
              "callHandlingPreference": {
                "type": "string",
                "enum": [
                  "greatest-need",
                  "skill-level"
                ]
              },
              "sipId": {
                "type": "string"
              },
              "mobileNumber": {
                "type": "string"
              },
              "telephonyState": {
                "type": "number",
                "enum": [
                  0,
                  1,
                  2,
                  3
                ]
              },
              "attributes": {
                "type": "object"
              },
              "autoAnswer": {
                "type": "number",
                "default": 0
              },
              "permissionSetId": {
                "type": "string"
              },
              "workModeOnLogin": {
                "type": "number",
                "default": 0
              },
              "auxWorkReasonCodeType": {
                "type": "number",
                "default": 0
              },
              "logoutReasonCodeType": {
                "type": "number",
                "default": 0
              },
              "interruptibleAux": {
                "type": "string",
                "enum": [
                  "none",
                  "auto_in_interrupt",
                  "manual_in_interrupt",
                  "notify_interrupt"
                ]
              },
              "country": {
                "type": "string"
              },
              "streetNumber": {
                "type": "string"
              },
              "streetName": {
                "type": "string"
              },
              "city": {
                "type": "string"
              },
              "stateProvince": {
                "type": "string"
              },
              "zipPostalCode": {
                "type": "string"
              },
              "emergencyContactNumber": {
                "type": "string"
              },
              "programId": {
                "type": "number"
              },
              "capacityProfileId": {
                "type": "string"
              },
              "maxTimeAgentInACWBeforeLogout": {
                "type": "string"
              },
              "directAgentSkill": {
                "type": "string"
              },
              "auxAgentRemainsInLOAqueue": {
                "type": "string",
                "enum": [
                  "y",
                  "n",
                  "system"
                ]
              },
              "miaAcrossSkills": {
                "type": "string",
                "enum": [
                  "y",
                  "n",
                  "system"
                ]
              },
              "auxAgentConsideredIdleMIA": {
                "type": "string",
                "enum": [
                  "y",
                  "n",
                  "system"
                ]
              },
              "acwAgentConsideredIdle": {
                "type": "string",
                "enum": [
                  "y",
                  "n",
                  "system"
                ]
              },
              "forcedAgentLogoutTime": {
                "type": "string"
              },
              "userHandle": {
                "type": "string"
              },
              "defaultLocation": {
                "type": "string"
              },
              "coveragePathId": {
                "type": "string"
              }
            },
            "required": [
              "name",
              "tenantId",
              "telephonyState",
              "permissionSetId"
            ]
          },
          "ChangePinDto": {
            "type": "object",
            "properties": {
              "tenantId": {
                "type": "string"
              },
              "number": {
                "type": "string"
              },
              "oldPin": {
                "type": "string"
              },
              "newPin": {
                "type": "string"
              }
            },
            "required": [
              "tenantId",
              "number",
              "oldPin",
              "newPin"
            ]
          },
          "DialPlanAnalysisSipServerDto": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "index": {
                "type": "number",
                "default": 1
              }
            },
            "required": [
              "id",
              "index"
            ]
          },
          "DialPlanAnalysisLocationDto": {
            "type": "object",
            "properties": {
              "location": {
                "type": "string"
              }
            },
            "required": [
              "location"
            ]
          },
          "DialPlanAnalysis": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "dialedString": {
                "type": "string"
              },
              "minLength": {
                "type": "number"
              },
              "maxLength": {
                "type": "number"
              },
              "calltype": {
                "type": "string"
              },
              "sipServerId": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/DialPlanAnalysisSipServerDto"
                }
              },
              "emergencyType": {
                "type": "string"
              },
              "priority": {
                "type": "number"
              },
              "locationAll": {
                "type": "boolean",
                "default": false
              },
              "location": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/DialPlanAnalysisLocationDto"
                }
              },
              "comments": {
                "type": "string"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time"
              }
            },
            "required": [
              "id",
              "dialedString",
              "minLength",
              "maxLength",
              "calltype",
              "createdAt",
              "updatedAt"
            ]
          },
          "DialPlanAnalysisResolveDto": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "dialedString": {
                "type": "string"
              },
              "minLength": {
                "type": "number"
              },
              "maxLength": {
                "type": "number"
              },
              "calltype": {
                "type": "string"
              },
              "sipServerId": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/DialPlanAnalysisSipServerDto"
                }
              },
              "emergencyType": {
                "type": "string"
              },
              "priority": {
                "type": "number"
              },
              "locationAll": {
                "type": "boolean",
                "default": false
              },
              "location": {
                "type": "object"
              },
              "comments": {
                "type": "string"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time"
              }
            },
            "required": [
              "id",
              "dialedString",
              "minLength",
              "maxLength",
              "calltype",
              "createdAt",
              "updatedAt"
            ]
          },
          "CreateDialPlanAnalysisDto": {
            "type": "object",
            "properties": {
              "tenantId": {
                "type": "string"
              },
              "dialedString": {
                "type": "string"
              },
              "minLength": {
                "type": "number"
              },
              "maxLength": {
                "type": "number"
              },
              "calltype": {
                "type": "string"
              },
              "sipServerId": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/DialPlanAnalysisSipServerDto"
                }
              },
              "locationAll": {
                "type": "boolean",
                "default": false
              },
              "location": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/DialPlanAnalysisLocationDto"
                }
              },
              "comments": {
                "type": "string"
              },
              "emergencyType": {
                "type": "string"
              },
              "priority": {
                "type": "number"
              }
            },
            "required": [
              "tenantId",
              "dialedString",
              "minLength",
              "maxLength",
              "calltype"
            ]
          },
          "BulkCreateDialPlanAnalysisDto": {
            "type": "object",
            "properties": {
              "dpas": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/CreateDialPlanAnalysisDto"
                }
              }
            },
            "required": [
              "dpas"
            ]
          },
          "UpdateMultipleDialPlanAnalysisDto": {
            "type": "object",
            "properties": {
              "tenantId": {
                "type": "string"
              },
              "id": {
                "type": "string"
              },
              "dialedString": {
                "type": "string"
              },
              "minLength": {
                "type": "number"
              },
              "maxLength": {
                "type": "number"
              },
              "calltype": {
                "type": "string"
              },
              "sipServerId": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/DialPlanAnalysisSipServerDto"
                }
              },
              "emergencyType": {
                "type": "string"
              },
              "priority": {
                "type": "number"
              },
              "locationAll": {
                "type": "boolean",
                "default": false
              },
              "location": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/DialPlanAnalysisLocationDto"
                }
              },
              "comments": {
                "type": "string"
              }
            },
            "required": [
              "tenantId",
              "id",
              "dialedString",
              "minLength",
              "maxLength",
              "calltype"
            ]
          },
          "BulkUpdateDialPlanAnalysisDto": {
            "type": "object",
            "properties": {
              "dpas": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/UpdateMultipleDialPlanAnalysisDto"
                }
              }
            },
            "required": [
              "dpas"
            ]
          },
          "UpdateDialPlanAnalysisDto": {
            "type": "object",
            "properties": {
              "tenantId": {
                "type": "string"
              },
              "dialedString": {
                "type": "string"
              },
              "minLength": {
                "type": "number"
              },
              "maxLength": {
                "type": "number"
              },
              "calltype": {
                "type": "string"
              },
              "sipServerId": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/DialPlanAnalysisSipServerDto"
                }
              },
              "restricted": {
                "type": "boolean",
                "default": false
              },
              "locationAll": {
                "type": "boolean",
                "default": false
              },
              "location": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/DialPlanAnalysisLocationDto"
                }
              },
              "comments": {
                "type": "string"
              }
            },
            "required": [
              "tenantId",
              "dialedString",
              "minLength",
              "maxLength",
              "calltype"
            ]
          },
          "IPAddressMapNL": {
            "type": "object",
            "properties": {
              "ip": {
                "type": "string"
              }
            },
            "required": [
              "ip"
            ]
          },
          "VlanParameters": {
            "type": "object",
            "properties": {
              "vlanSupported": {
                "type": "boolean"
              },
              "vlanId": {
                "type": "number"
              }
            },
            "required": [
              "vlanSupported"
            ]
          },
          "DiffServerQosParameters": {
            "type": "object",
            "properties": {
              "callControlPhbValue": {
                "type": "number",
                "default": 46
              },
              "audioPhbValue": {
                "type": "number",
                "default": 46
              },
              "videoPhbValue": {
                "type": "number",
                "default": 26
              }
            },
            "required": [
              "callControlPhbValue",
              "audioPhbValue",
              "videoPhbValue"
            ]
          },
          "Location": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "tenantId": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "stationAdminPassword": {
                "type": "string",
                "default": "27238"
              },
              "stationAdminPasswordHash": {
                "type": "string"
              },
              "stationAdminPasswordSalt": {
                "type": "string"
              },
              "stationAdminPasswordAlgorithm": {
                "type": "string",
                "default": "SHA-512"
              },
              "officeLocation": {
                "type": "string"
              },
              "ipAddressMap": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/IPAddressMapNL"
                }
              },
              "vlanParameters": {
                "$ref": "#/definitions/VlanParameters"
              },
              "diffServerQosParameters": {
                "$ref": "#/definitions/DiffServerQosParameters"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time"
              }
            },
            "required": [
              "id",
              "tenantId",
              "name",
              "createdAt",
              "updatedAt"
            ]
          },
          "CreateLocationDto": {
            "type": "object",
            "properties": {
              "tenantId": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "stationAdminPassword": {
                "type": "string",
                "default": "27238"
              },
              "officeLocation": {
                "type": "string"
              },
              "ipAddressMap": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/IPAddressMapNL"
                }
              },
              "vlanParameters": {
                "$ref": "#/definitions/VlanParameters"
              },
              "diffServerQosParameters": {
                "$ref": "#/definitions/DiffServerQosParameters"
              }
            },
            "required": [
              "tenantId",
              "name"
            ]
          },
          "ChangeLocationAdminPassword": {
            "type": "object",
            "properties": {
              "password": {
                "type": "string",
                "default": "27238"
              }
            }
          },
          "UpdateLocationDto": {
            "type": "object",
            "properties": {
              "tenantId": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "officeLocation": {
                "type": "string"
              },
              "ipAddressMap": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/IPAddressMapNL"
                }
              },
              "vlanParameters": {
                "$ref": "#/definitions/VlanParameters"
              },
              "diffServerQosParameters": {
                "$ref": "#/definitions/DiffServerQosParameters"
              }
            },
            "required": [
              "tenantId",
              "name"
            ]
          },
          "OfficeLocation": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "locationId": {
                "type": "number",
                "default": 0
              },
              "name": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "tenantId": {
                "type": "string"
              },
              "timezone": {
                "type": "string"
              },
              "moh": {
                "type": "string"
              },
              "acwAgentsConsideredIdle": {
                "type": "boolean",
                "default": false
              },
              "minAgentPasswordLength": {
                "type": "number",
                "default": 0
              },
              "msgWaitLampIndicatesStatusFor": {
                "type": "string",
                "enum": [
                  "STATION",
                  "AGENT"
                ],
                "default": "STATION"
              },
              "maxAgentOccupancyAuxWRC": {
                "type": "string"
              },
              "acwForcedLogoutRC": {
                "type": "string"
              },
              "clockTimeForcedLogoutRC": {
                "type": "string"
              },
              "auxWorkRCType": {
                "type": "string",
                "enum": [
                  "forced",
                  "requested",
                  "none"
                ],
                "default": "none"
              },
              "logoutRCType": {
                "type": "string",
                "enum": [
                  "forced",
                  "requested",
                  "none"
                ],
                "default": "none"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time"
              },
              "activityTime": {
                "type": "string",
                "format": "date-time"
              }
            },
            "required": [
              "id",
              "locationId",
              "name",
              "tenantId",
              "createdAt",
              "updatedAt"
            ]
          },
          "CreateOfficeLocationDto": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "locationId": {
                "type": "number"
              },
              "description": {
                "type": "string"
              },
              "timezone": {
                "type": "string",
                "default": "America/New_York"
              },
              "moh": {
                "type": "string"
              },
              "acwAgentsConsideredIdle": {
                "type": "boolean",
                "default": false
              },
              "minAgentPasswordLength": {
                "type": "number",
                "default": 4
              },
              "msgWaitLampIndicatesStatusFor": {
                "type": "string",
                "enum": [
                  "STATION",
                  "AGENT"
                ],
                "default": "STATION"
              },
              "maxAgentOccupancyAuxWRC": {
                "type": "string"
              },
              "acwForcedLogoutRC": {
                "type": "string"
              },
              "clockTimeForcedLogoutRC": {
                "type": "string"
              },
              "auxWorkRCType": {
                "type": "string",
                "enum": [
                  "forced",
                  "requested",
                  "none"
                ],
                "default": "none"
              },
              "logoutRCType": {
                "type": "string",
                "enum": [
                  "forced",
                  "requested",
                  "none"
                ],
                "default": "none"
              },
              "tenantId": {
                "type": "string"
              }
            },
            "required": [
              "name",
              "locationId",
              "tenantId"
            ]
          },
          "UpdateOfficeLocationDto": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "locationId": {
                "type": "number"
              },
              "description": {
                "type": "string"
              },
              "timezone": {
                "type": "string",
                "default": "America/New_York"
              },
              "moh": {
                "type": "string"
              },
              "acwAgentsConsideredIdle": {
                "type": "boolean",
                "default": false
              },
              "minAgentPasswordLength": {
                "type": "number",
                "default": 4
              },
              "msgWaitLampIndicatesStatusFor": {
                "type": "string",
                "enum": [
                  "STATION",
                  "AGENT"
                ],
                "default": "STATION"
              },
              "maxAgentOccupancyAuxWRC": {
                "type": "string"
              },
              "acwForcedLogoutRC": {
                "type": "string"
              },
              "clockTimeForcedLogoutRC": {
                "type": "string"
              },
              "auxWorkRCType": {
                "type": "string",
                "enum": [
                  "forced",
                  "requested",
                  "none"
                ],
                "default": "none"
              },
              "logoutRCType": {
                "type": "string",
                "enum": [
                  "forced",
                  "requested",
                  "none"
                ],
                "default": "none"
              },
              "tenantId": {
                "type": "string"
              }
            },
            "required": [
              "name",
              "locationId",
              "tenantId"
            ]
          },
          "MediaObject": {
            "type": "object",
            "properties": {
              "number": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "fileName": {
                "type": "string"
              },
              "extension": {
                "type": "string"
              },
              "fileSize": {
                "type": "string"
              },
              "isProtected": {
                "type": "boolean",
                "default": false
              },
              "file": {
                "type": "object"
              },
              "permissionSetId": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "tenantId": {
                "type": "string"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time"
              }
            },
            "required": [
              "number",
              "name",
              "fileName",
              "file",
              "tenantId",
              "createdAt",
              "updatedAt"
            ]
          },
          "MediaObjectFileDto": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "content": {
                "type": "string"
              }
            },
            "required": [
              "name",
              "content"
            ]
          },
          "CreateMediaObjectDto": {
            "type": "object",
            "properties": {
              "tenantId": {
                "type": "string"
              },
              "number": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "file": {
                "$ref": "#/definitions/MediaObjectFileDto"
              },
              "isProtected": {
                "type": "boolean",
                "example": false
              },
              "description": {
                "type": "string"
              },
              "permissionSetId": {
                "type": "string"
              }
            },
            "required": [
              "tenantId",
              "number",
              "name",
              "file"
            ]
          },
          "UpdateMediaObjectDto": {
            "type": "object",
            "properties": {
              "tenantId": {
                "type": "string"
              },
              "number": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "file": {
                "$ref": "#/definitions/MediaObjectFileDto"
              },
              "isProtected": {
                "type": "boolean",
                "example": false
              },
              "description": {
                "type": "string"
              },
              "permissionSetId": {
                "type": "string"
              }
            },
            "required": [
              "tenantId"
            ]
          },
          "DialPlanCallType": {
            "type": "object",
            "properties": {
              "tenantId": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "custom",
                  "default"
                ],
                "default": "custom"
              },
              "description": {
                "type": "string"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time"
              }
            },
            "required": [
              "tenantId",
              "name",
              "type",
              "createdAt",
              "updatedAt"
            ]
          },
          "CreateDialPlanCallTypeDto": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "description": {
                "type": "string"
              }
            },
            "required": [
              "name"
            ]
          },
          "UpdateDialPlanCallTypeDto": {
            "type": "object",
            "properties": {
              "description": {
                "type": "string"
              }
            }
          },
          "CreateBulkDialPlanCallTypeSingleDto": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "description": {
                "type": "string"
              }
            },
            "required": [
              "name"
            ]
          },
          "CreateBulkDialPlanCallTypeDto": {
            "type": "object",
            "properties": {
              "dialPlanCallTypes": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/CreateBulkDialPlanCallTypeSingleDto"
                }
              }
            },
            "required": [
              "dialPlanCallTypes"
            ]
          },
          "SipServer": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "adaptationId": {
                "type": "string"
              },
              "transportType": {
                "type": "string",
                "enum": [
                  "TCP",
                  "TLS",
                  "UDP"
                ]
              },
              "destinationPort": {
                "type": "string"
              },
              "address": {
                "type": "string"
              },
              "domainOverride": {
                "type": "string"
              },
              "comments": {
                "type": "string"
              },
              "probingEnabled": {
                "type": "boolean"
              },
              "clientCertificate": {
                "type": "string"
              },
              "clientPrivateKey": {
                "type": "string"
              },
              "clientCAList": {
                "type": "string"
              },
              "trusted": {
                "type": "boolean"
              },
              "enabled": {
                "type": "boolean"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time"
              }
            },
            "required": [
              "id",
              "name",
              "transportType",
              "destinationPort",
              "address",
              "clientCertificate",
              "clientPrivateKey",
              "clientCAList",
              "enabled",
              "createdAt",
              "updatedAt"
            ]
          },
          "ImportSipServerDto": {
            "type": "object",
            "properties": {
              "Name": {
                "type": "string"
              },
              "Adaptation": {
                "type": "string"
              },
              "TransportType": {
                "type": "string"
              },
              "DestinationPort": {
                "type": "string"
              },
              "Address": {
                "type": "string"
              },
              "DomainOverride": {
                "type": "string"
              },
              "Comments": {
                "type": "string"
              },
              "ProbingEnabled": {
                "type": "string"
              },
              "ClientCertificate": {
                "type": "string"
              },
              "ClientPrivateKey": {
                "type": "string"
              },
              "ClientCAList": {
                "type": "string"
              },
              "Trusted": {
                "type": "string"
              },
              "Enabled": {
                "type": "string"
              }
            }
          },
          "CreateSipServerDto": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "adaptationId": {
                "type": "string"
              },
              "tenantId": {
                "type": "string"
              },
              "transportType": {
                "type": "string",
                "enum": [
                  "TCP",
                  "TLS",
                  "UDP"
                ]
              },
              "destinationPort": {
                "type": "string"
              },
              "address": {
                "type": "string"
              },
              "domainOverride": {
                "type": "string"
              },
              "comments": {
                "type": "string"
              },
              "probingEnabled": {
                "type": "boolean",
                "default": false
              },
              "clientCertificate": {
                "type": "string"
              },
              "clientPrivateKey": {
                "type": "string"
              },
              "clientCAList": {
                "type": "string"
              },
              "trusted": {
                "type": "boolean"
              },
              "enabled": {
                "type": "boolean",
                "default": true
              }
            },
            "required": [
              "name",
              "tenantId",
              "transportType",
              "destinationPort",
              "address",
              "clientCertificate",
              "clientPrivateKey",
              "clientCAList",
              "enabled"
            ]
          },
          "BulkCreateSipServerDto": {
            "type": "object",
            "properties": {
              "sipServers": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/CreateSipServerDto"
                }
              }
            },
            "required": [
              "sipServers"
            ]
          },
          "ImportSipServerDtoType": {
            "type": "object",
            "properties": {
              "sipServers": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ImportSipServerDto"
                }
              }
            },
            "required": [
              "sipServers"
            ]
          },
          "UpdateMultipleSipServerDto": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "tenantId": {
                "type": "string"
              },
              "adaptationId": {
                "type": "string"
              },
              "transportType": {
                "type": "string",
                "enum": [
                  "TCP",
                  "TLS",
                  "UDP"
                ]
              },
              "destinationPort": {
                "type": "string"
              },
              "address": {
                "type": "string"
              },
              "domainOverride": {
                "type": "string"
              },
              "comments": {
                "type": "string"
              },
              "probingEnabled": {
                "type": "boolean",
                "default": false
              },
              "clientCertificate": {
                "type": "string"
              },
              "clientPrivateKey": {
                "type": "string"
              },
              "clientCAList": {
                "type": "string"
              },
              "trusted": {
                "type": "boolean"
              },
              "enabled": {
                "type": "boolean"
              }
            },
            "required": [
              "id",
              "name",
              "tenantId",
              "transportType",
              "destinationPort",
              "address",
              "clientCertificate",
              "clientPrivateKey",
              "clientCAList",
              "enabled"
            ]
          },
          "BulkUpdateSipServerDto": {
            "type": "object",
            "properties": {
              "sipServers": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/UpdateMultipleSipServerDto"
                }
              }
            },
            "required": [
              "sipServers"
            ]
          },
          "UpdateSipServerDto": {
            "type": "object",
            "properties": {
              "tenantId": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "adaptationId": {
                "type": "string"
              },
              "transportType": {
                "type": "string",
                "enum": [
                  "TCP",
                  "TLS",
                  "UDP"
                ]
              },
              "destinationPort": {
                "type": "string"
              },
              "address": {
                "type": "string"
              },
              "domainOverride": {
                "type": "string"
              },
              "comments": {
                "type": "string"
              },
              "probingEnabled": {
                "type": "boolean"
              },
              "clientCertificate": {
                "type": "string"
              },
              "clientPrivateKey": {
                "type": "string"
              },
              "clientCAList": {
                "type": "string"
              },
              "trusted": {
                "type": "boolean"
              },
              "enabled": {
                "type": "boolean"
              }
            },
            "required": [
              "tenantId",
              "name",
              "transportType",
              "destinationPort",
              "address",
              "clientCertificate",
              "clientPrivateKey",
              "clientCAList",
              "enabled"
            ]
          },
          "ToggleSipServerDto": {
            "type": "object",
            "properties": {
              "tenantId": {
                "type": "string"
              },
              "enabled": {
                "type": "boolean"
              }
            },
            "required": [
              "tenantId",
              "enabled"
            ]
          },
          "AdaptationInOutDto": {
            "type": "object",
            "properties": {
              "prefix": {
                "type": "string"
              },
              "min": {
                "type": "number"
              },
              "max": {
                "type": "number"
              },
              "addressToModify": {
                "type": "string",
                "enum": [
                  "called",
                  "calling",
                  "both"
                ],
                "default": "called"
              },
              "delete": {
                "type": "number"
              },
              "insert": {
                "type": "string"
              },
              "comments": {
                "type": "string"
              }
            },
            "required": [
              "prefix",
              "min",
              "max",
              "addressToModify",
              "delete"
            ]
          },
          "Adaptations": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "tenantId": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "incoming": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/AdaptationInOutDto"
                }
              },
              "outgoing": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/AdaptationInOutDto"
                }
              },
              "createdAt": {
                "type": "string",
                "format": "date-time"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time"
              }
            },
            "required": [
              "id",
              "name",
              "tenantId",
              "incoming",
              "outgoing",
              "createdAt",
              "updatedAt"
            ]
          },
          "CreateAdaptationsDto": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "incoming": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/AdaptationInOutDto"
                }
              },
              "outgoing": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/AdaptationInOutDto"
                }
              }
            },
            "required": [
              "name",
              "incoming",
              "outgoing"
            ]
          },
          "UpdateAdoptationsDto": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "incoming": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/AdaptationInOutDto"
                }
              },
              "outgoing": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/AdaptationInOutDto"
                }
              }
            },
            "required": [
              "name",
              "incoming",
              "outgoing"
            ]
          },
          "CORCallPermissionsDto": {
            "type": "object",
            "properties": {
              "cor": {
                "type": "string"
              }
            },
            "required": [
              "cor"
            ]
          },
          "CORPermissionDto": {
            "type": "object",
            "properties": {
              "permissions": {
                "type": "string"
              }
            }
          },
          "COR": {
            "type": "object",
            "properties": {
              "number": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "serviceObservingAll": {
                "type": "boolean",
                "default": false
              },
              "directCallingAgent": {
                "type": "boolean",
                "default": false
              },
              "serviceObserving": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/CORCallPermissionsDto"
                }
              },
              "callingRestriction": {
                "type": "string"
              },
              "groupCallingRestrictions": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/CORCallPermissionsDto"
                }
              },
              "permissions": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/CORPermissionDto"
                }
              },
              "canBeServiceObserved": {
                "type": "boolean",
                "default": false
              },
              "createdAt": {
                "type": "string",
                "format": "date-time"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time"
              }
            },
            "required": [
              "number",
              "name",
              "createdAt",
              "updatedAt"
            ]
          },
          "CorNumberList": {
            "type": "object",
            "properties": {
              "numbers": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "CreateCORDto": {
            "type": "object",
            "properties": {
              "tenantId": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "serviceObservingAll": {
                "type": "boolean",
                "default": false
              },
              "directCallingAgent": {
                "type": "boolean",
                "default": false
              },
              "serviceObserving": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/CORCallPermissionsDto"
                }
              },
              "callingRestriction": {
                "type": "string"
              },
              "groupCallingRestrictions": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/CORCallPermissionsDto"
                }
              },
              "permissions": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/CORPermissionDto"
                }
              },
              "canBeServiceObserved": {
                "type": "boolean",
                "default": false
              }
            },
            "required": [
              "tenantId",
              "name"
            ]
          },
          "UpdateCORDto": {
            "type": "object",
            "properties": {
              "tenantId": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "serviceObservingAll": {
                "type": "boolean",
                "default": false
              },
              "directCallingAgent": {
                "type": "boolean",
                "default": false
              },
              "serviceObserving": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/CORCallPermissionsDto"
                }
              },
              "callingRestriction": {
                "type": "string"
              },
              "groupCallingRestrictions": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/CORCallPermissionsDto"
                }
              },
              "permissions": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/CORPermissionDto"
                }
              },
              "canBeServiceObserved": {
                "type": "boolean",
                "default": false
              }
            },
            "required": [
              "tenantId",
              "name"
            ]
          },
          "EmployeeGroup": {
            "type": "object",
            "properties": {
              "tenantId": {
                "type": "string"
              },
              "number": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "programId": {
                "type": "number"
              },
              "bpoId": {
                "type": "string"
              },
              "permissionSetId": {
                "type": "string"
              },
              "source": {
                "type": "string"
              },
              "expression": {
                "type": "string"
              },
              "channelType": {
                "type": "string",
                "enum": [
                  "VOICE",
                  "RETAIL",
                  "CHAT",
                  "EMAIL",
                  "MESSAGING"
                ]
              },
              "channelSubtype": {
                "type": "string",
                "enum": [
                  "SMS",
                  "WHATSAPP",
                  "FACEBOOK",
                  "APPLEBC"
                ]
              },
              "musicOnHold": {
                "type": "string"
              },
              "timedACWInterval": {
                "type": "number",
                "default": 0
              },
              "callDisposition": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/CallDispositionEG"
                }
              },
              "callsWarningThreshold": {
                "type": "number",
                "default": 0
              },
              "timeWarningThreshold": {
                "type": "number",
                "default": 0
              },
              "serviceLevelTargetPercentage": {
                "type": "number",
                "default": 0
              },
              "serviceLevelTargetSeconds": {
                "type": "number",
                "default": 0
              },
              "interruptibleAuxThreshold": {
                "type": "string",
                "enum": [
                  "none",
                  "calls_warning_threshold",
                  "time_warning_threshold",
                  "service_level_target"
                ]
              },
              "interruptibleAuxDeactivationThreshold": {
                "type": "number",
                "default": 0
              },
              "ronaRings": {
                "type": "number",
                "default": 0
              },
              "ronaToVDN": {
                "type": "string"
              },
              "ronaToVDNActiveContext": {
                "type": "boolean",
                "default": false
              },
              "ronaOnIPFailureToVDN": {
                "type": "string"
              },
              "ronaOnIPFToVDNActiveContext": {
                "type": "boolean",
                "default": false
              },
              "createdAt": {
                "type": "string",
                "format": "date-time"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time"
              },
              "aiPairingConfig": {
                "type": "string",
                "enum": [
                  "no",
                  "yes",
                  "system"
                ],
                "default": "no"
              },
              "groupType": {
                "type": "string",
                "enum": [
                  "ead-loa",
                  "ead-mia",
                  "ucd-loa",
                  "ucd-mia"
                ],
                "default": "ucd-mia"
              },
              "forcedEntryOfSCorCWC": {
                "type": "boolean"
              },
              "supervisorExtension": {
                "type": "string"
              },
              "queueLimit": {
                "type": "number",
                "default": 0
              }
            },
            "required": [
              "tenantId",
              "number",
              "name",
              "channelType",
              "createdAt",
              "updatedAt"
            ]
          },
          "ImportEmployeeGroupDto": {
            "type": "object",
            "properties": {
              "Number": {
                "type": "string"
              },
              "Name": {
                "type": "string"
              },
              "PermissionsSet": {
                "type": "string"
              },
              "Expression": {
                "type": "string"
              },
              "MusicOnHold": {
                "type": "string"
              },
              "ChannelType": {
                "type": "string"
              },
              "ChannelSubtype": {
                "type": "string"
              },
              "LineOfBusiness": {
                "type": "string"
              },
              "TimedACWInterval": {
                "type": "string"
              },
              "CallsWarningThreshold": {
                "type": "string"
              },
              "TimeWarningThreshold": {
                "type": "string"
              },
              "ServiceLevelTargetPercentage": {
                "type": "string"
              },
              "ServiceLevelTargetSeconds": {
                "type": "string"
              },
              "RonaRings": {
                "type": "string"
              },
              "RonaToVDN": {
                "type": "string"
              },
              "RonaToVDNActiveContext": {
                "type": "string"
              },
              "RonaOnIPFailureToVDN": {
                "type": "string"
              },
              "RonaOnIPFToVDNActiveContext": {
                "type": "string"
              },
              "AiPairingConfig": {
                "type": "string"
              },
              "GroupType": {
                "type": "string"
              },
              "ForcedEntryOfStrokeCountOrCWC": {
                "type": "string"
              },
              "SupervisorExtension": {
                "type": "string"
              },
              "QueueLimit": {
                "type": "string"
              }
            },
            "required": [
              "Number",
              "Name"
            ]
          },
          "CreateManyEmployeeGroupsDto": {
            "type": "object",
            "properties": {
              "employeeGroups": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/CreateEmployeeGroupDto"
                }
              }
            },
            "required": [
              "employeeGroups"
            ]
          },
          "ImportEmployeeGroupsDtoType": {
            "type": "object",
            "properties": {
              "employeeGroups": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ImportEmployeeGroupDto"
                }
              }
            },
            "required": [
              "employeeGroups"
            ]
          },
          "UpdateManyEmployeeGroupsDto": {
            "type": "object",
            "properties": {
              "tenantId": {
                "type": "string"
              },
              "numbers": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "permissionSetId": {
                "type": "string"
              },
              "channelType": {
                "type": "string",
                "enum": [
                  "VOICE",
                  "RETAIL",
                  "CHAT",
                  "EMAIL",
                  "MESSAGING"
                ],
                "default": "VOICE"
              },
              "channelSubtype": {
                "type": "string",
                "enum": [
                  "SMS",
                  "WHATSAPP",
                  "FACEBOOK",
                  "APPLEBC"
                ]
              },
              "programId": {
                "type": "number"
              },
              "bpoId": {
                "type": "string"
              },
              "musicOnHold": {
                "type": "string"
              },
              "expression": {
                "type": "string"
              },
              "timedACWInterval": {
                "type": "number"
              },
              "forcedEntryOfSCorCWC": {
                "type": "boolean"
              },
              "supervisorExtension": {
                "type": "string"
              },
              "ronaRings": {
                "type": "number",
                "default": 0
              },
              "ronaToVDN": {
                "type": "string"
              },
              "ronaToVDNActiveContext": {
                "type": "boolean",
                "default": false
              },
              "ronaOnIPFailureToVDN": {
                "type": "string"
              },
              "ronaOnIPFToVDNActiveContext": {
                "type": "boolean",
                "default": false
              },
              "queueLimit": {
                "type": "number",
                "default": 0
              }
            },
            "required": [
              "tenantId",
              "numbers"
            ]
          },
          "UpdateEmployeeGroupDto": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "tenantId": {
                "type": "string"
              },
              "expression": {
                "type": "string"
              },
              "permissionSetId": {
                "type": "string"
              },
              "channelType": {
                "type": "string",
                "enum": [
                  "VOICE",
                  "RETAIL",
                  "CHAT",
                  "EMAIL",
                  "MESSAGING"
                ],
                "default": "VOICE"
              },
              "channelSubtype": {
                "type": "string",
                "enum": [
                  "SMS",
                  "WHATSAPP",
                  "FACEBOOK",
                  "APPLEBC"
                ]
              },
              "musicOnHold": {
                "type": "string"
              },
              "programId": {
                "type": "number"
              },
              "bpoId": {
                "type": "string"
              },
              "source": {
                "type": "string"
              },
              "timedACWInterval": {
                "type": "number"
              },
              "callsWarningThreshold": {
                "type": "number",
                "default": 0
              },
              "timeWarningThreshold": {
                "type": "number",
                "default": 0
              },
              "serviceLevelTargetPercentage": {
                "type": "number",
                "default": 80
              },
              "serviceLevelTargetSeconds": {
                "type": "number",
                "default": 20
              },
              "interruptibleAuxThreshold": {
                "type": "string",
                "enum": [
                  "none",
                  "calls_warning_threshold",
                  "time_warning_threshold",
                  "service_level_target"
                ],
                "default": "none"
              },
              "ronaRings": {
                "type": "number",
                "default": 0
              },
              "ronaToVDN": {
                "type": "string"
              },
              "ronaToVDNActiveContext": {
                "type": "boolean",
                "default": false
              },
              "ronaOnIPFailureToVDN": {
                "type": "string"
              },
              "ronaOnIPFToVDNActiveContext": {
                "type": "boolean",
                "default": false
              },
              "interruptibleAuxDeactivationThreshold": {
                "type": "number",
                "default": 0
              },
              "callDisposition": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/CallDispositionEG"
                }
              },
              "aiPairingConfig": {
                "type": "string",
                "enum": [
                  "no",
                  "yes",
                  "system"
                ],
                "default": "no"
              },
              "groupType": {
                "type": "string",
                "enum": [
                  "ead-loa",
                  "ead-mia",
                  "ucd-loa",
                  "ucd-mia"
                ],
                "default": "ucd-mia"
              },
              "forcedEntryOfSCorCWC": {
                "type": "boolean"
              },
              "supervisorExtension": {
                "type": "string"
              },
              "queueLimit": {
                "type": "number",
                "default": 0
              }
            },
            "required": [
              "name",
              "tenantId",
              "channelType"
            ]
          },
          "DNAttribute": {
            "type": "object",
            "properties": {
              "key": {
                "type": "string"
              },
              "value": {
                "type": "string"
              }
            },
            "required": [
              "key",
              "value"
            ]
          },
          "DNDestinationDto": {
            "type": "object",
            "properties": {
              "number": {
                "type": "string"
              },
              "destOmniProviderId": {
                "type": "string"
              },
              "default": {
                "type": "boolean",
                "default": true
              }
            },
            "required": [
              "number",
              "destOmniProviderId",
              "default"
            ]
          },
          "IXNTimerDto": {
            "type": "object",
            "properties": {
              "dispose": {
                "type": "number",
                "default": 0
              },
              "reassign": {
                "type": "number",
                "default": 0
              },
              "read_reassign": {
                "type": "number",
                "default": 0
              },
              "ring_event": {
                "type": "number",
                "default": 0
              },
              "resend_email": {
                "type": "number",
                "default": 0
              }
            }
          },
          "Dn": {
            "type": "object",
            "properties": {
              "number": {
                "type": "string"
              },
              "tenantId": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "source": {
                "type": "string"
              },
              "tfns": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "mediaObjectId": {
                "type": "string"
              },
              "programId": {
                "type": "number"
              },
              "permissionSetId": {
                "type": "string"
              },
              "callFlowId": {
                "type": "string"
              },
              "attributes": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/DNAttribute"
                }
              },
              "variables": {
                "type": "object"
              },
              "observeOnAgentAnswer": {
                "type": "boolean",
                "default": false
              },
              "allowVdnOverride": {
                "type": "boolean",
                "default": false
              },
              "musicSource": {
                "type": "string"
              },
              "timezone": {
                "type": "string"
              },
              "vdnTimezoneForHolidayVectoring": {
                "type": "boolean",
                "default": false
              },
              "vdnOverrideForASAIMessages": {
                "type": "string",
                "enum": [
                  "no",
                  "all",
                  "isdn-trunk"
                ],
                "default": "no"
              },
              "channelType": {
                "type": "string",
                "enum": [
                  "VOICE",
                  "RETAIL",
                  "CHAT",
                  "EMAIL",
                  "MESSAGING"
                ]
              },
              "channelSubType": {
                "type": "string",
                "enum": [
                  "SMS",
                  "WHATSAPP",
                  "FACEBOOK",
                  "APPLEBC"
                ]
              },
              "omniProviderId": {
                "type": "string"
              },
              "destination": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/DNDestinationDto"
                }
              },
              "userName": {
                "type": "string"
              },
              "userPassword": {
                "type": "string"
              },
              "ixnTimersObject": {
                "$ref": "#/definitions/IXNTimerDto"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time"
              }
            },
            "required": [
              "number",
              "tenantId",
              "name",
              "createdAt",
              "updatedAt"
            ]
          },
          "ImportDnDto": {
            "type": "object",
            "properties": {
              "Number": {
                "type": "string"
              },
              "Name": {
                "type": "string"
              },
              "OriginAnnouncement": {
                "type": "string"
              },
              "LineOfBusiness": {
                "type": "string"
              },
              "PermissionSet": {
                "type": "string"
              },
              "Callflow": {
                "type": "string"
              },
              "Attributes": {
                "type": "string"
              },
              "Skill1": {
                "type": "string"
              },
              "Skill2": {
                "type": "string"
              },
              "Skill3": {
                "type": "string"
              },
              "V1": {
                "type": "string"
              },
              "V2": {
                "type": "string"
              },
              "V3": {
                "type": "string"
              },
              "V4": {
                "type": "string"
              },
              "V5": {
                "type": "string"
              },
              "V6": {
                "type": "string"
              },
              "V7": {
                "type": "string"
              },
              "V8": {
                "type": "string"
              },
              "V9": {
                "type": "string"
              },
              "V1_description": {
                "type": "string"
              },
              "V2_description": {
                "type": "string"
              },
              "V3_description": {
                "type": "string"
              },
              "V4_description": {
                "type": "string"
              },
              "V5_description": {
                "type": "string"
              },
              "V6_description": {
                "type": "string"
              },
              "V7_description": {
                "type": "string"
              },
              "V8_description": {
                "type": "string"
              },
              "V9_description": {
                "type": "string"
              },
              "ObserveOnAgentAnswer": {
                "type": "string"
              },
              "AllowVdnOverride": {
                "type": "string"
              },
              "MusicSource": {
                "type": "string"
              },
              "Timezone": {
                "type": "string"
              },
              "VDNTimezoneForHolidayVectoring": {
                "type": "string"
              },
              "vdnOverrideForASAIMessages": {
                "type": "string"
              }
            },
            "required": [
              "Number",
              "Name"
            ]
          },
          "CreateDnDto": {
            "type": "object",
            "properties": {
              "number": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "source": {
                "type": "string"
              },
              "tenantId": {
                "type": "string"
              },
              "mediaObjectId": {
                "type": "string"
              },
              "programId": {
                "type": "number"
              },
              "tfns": {
                "type": "array",
                "default": null,
                "items": {
                  "type": "string"
                }
              },
              "permissionSetId": {
                "type": "string"
              },
              "callFlowId": {
                "type": "string"
              },
              "attributes": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/DNAttribute"
                }
              },
              "variables": {
                "type": "object",
                "example": {
                  "skills": [
                    {
                      "key": "1",
                      "value": "123"
                    }
                  ],
                  "dnVariables": [
                    {
                      "key": "1",
                      "value": "123",
                      "description": "description"
                    }
                  ]
                }
              },
              "observeOnAgentAnswer": {
                "type": "boolean",
                "default": false
              },
              "allowVdnOverride": {
                "type": "boolean",
                "default": false
              },
              "musicSource": {
                "type": "string"
              },
              "timezone": {
                "type": "string"
              },
              "vdnTimezoneForHolidayVectoring": {
                "type": "boolean",
                "default": false
              },
              "vdnOverrideForASAIMessages": {
                "type": "string",
                "default": "no",
                "enum": [
                  "no",
                  "all",
                  "isdn-trunk"
                ]
              },
              "channelType": {
                "type": "string",
                "enum": [
                  "VOICE",
                  "RETAIL",
                  "CHAT",
                  "EMAIL",
                  "MESSAGING"
                ]
              },
              "channelSubType": {
                "type": "string",
                "enum": [
                  "SMS",
                  "WHATSAPP",
                  "FACEBOOK",
                  "APPLEBC"
                ]
              },
              "omniProviderId": {
                "type": "string"
              },
              "destination": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/DNDestinationDto"
                }
              },
              "userName": {
                "type": "string"
              },
              "userPassword": {
                "type": "string"
              },
              "ixnTimersObject": {
                "$ref": "#/definitions/IXNTimerDto"
              }
            },
            "required": [
              "number",
              "name",
              "tenantId",
              "permissionSetId",
              "callFlowId"
            ]
          },
          "BulkCreateDnDto": {
            "type": "object",
            "properties": {
              "dns": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/CreateDnDto"
                }
              }
            },
            "required": [
              "dns"
            ]
          },
          "ImportDnDtoType": {
            "type": "object",
            "properties": {
              "dns": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ImportDnDto"
                }
              }
            },
            "required": [
              "dns"
            ]
          },
          "BulkUpdateDnDto": {
            "type": "object",
            "properties": {
              "numbers": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "tenantId": {
                "type": "string"
              },
              "mediaObjectId": {
                "type": "string"
              },
              "programId": {
                "type": "number"
              },
              "tfns": {
                "type": "array",
                "default": null,
                "items": {
                  "type": "string"
                }
              },
              "permissionSetId": {
                "type": "string"
              },
              "observeOnAgentAnswer": {
                "type": "boolean",
                "default": false
              },
              "allowVdnOverride": {
                "type": "boolean",
                "default": false
              },
              "musicSource": {
                "type": "string"
              },
              "timezone": {
                "type": "string"
              },
              "vdnTimezoneForHolidayVectoring": {
                "type": "boolean",
                "default": false
              },
              "vdnOverrideForASAIMessages": {
                "type": "string",
                "default": "no"
              },
              "callFlowId": {
                "type": "string"
              },
              "variables": {
                "type": "object",
                "example": {
                  "skills": [
                    {
                      "key": "1",
                      "value": "123"
                    }
                  ],
                  "dnVariables": [
                    {
                      "key": "1",
                      "value": "123",
                      "description": "description"
                    }
                  ]
                }
              },
              "channelType": {
                "type": "string",
                "enum": [
                  "VOICE",
                  "RETAIL",
                  "CHAT",
                  "EMAIL",
                  "MESSAGING"
                ]
              },
              "channelSubType": {
                "type": "string",
                "enum": [
                  "SMS",
                  "WHATSAPP",
                  "FACEBOOK",
                  "APPLEBC"
                ]
              },
              "omniProviderId": {
                "type": "string"
              },
              "destination": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/DNDestinationDto"
                }
              },
              "userName": {
                "type": "string"
              },
              "userPassword": {
                "type": "string"
              },
              "ixnTimersObject": {
                "$ref": "#/definitions/IXNTimerDto"
              }
            },
            "required": [
              "numbers",
              "tenantId"
            ]
          },
          "UpdateDnDto": {
            "type": "object",
            "properties": {
              "number": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "source": {
                "type": "string"
              },
              "tenantId": {
                "type": "string"
              },
              "mediaObjectId": {
                "type": "string"
              },
              "programId": {
                "type": "number"
              },
              "tfns": {
                "type": "array",
                "default": null,
                "items": {
                  "type": "string"
                }
              },
              "permissionSetId": {
                "type": "string"
              },
              "callFlowId": {
                "type": "string"
              },
              "attributes": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/DNAttribute"
                }
              },
              "variables": {
                "type": "object",
                "example": {
                  "skills": [
                    {
                      "key": "1",
                      "value": "123"
                    }
                  ],
                  "dnVariables": [
                    {
                      "key": "1",
                      "value": "123",
                      "description": "description"
                    }
                  ]
                }
              },
              "observeOnAgentAnswer": {
                "type": "boolean",
                "default": false
              },
              "allowVdnOverride": {
                "type": "boolean",
                "default": false
              },
              "musicSource": {
                "type": "string"
              },
              "timezone": {
                "type": "string"
              },
              "vdnTimezoneForHolidayVectoring": {
                "type": "boolean",
                "default": false
              },
              "vdnOverrideForASAIMessages": {
                "type": "string",
                "default": "no",
                "enum": [
                  "no",
                  "all",
                  "isdn-trunk"
                ]
              },
              "channelType": {
                "type": "string",
                "enum": [
                  "VOICE",
                  "RETAIL",
                  "CHAT",
                  "EMAIL",
                  "MESSAGING"
                ]
              },
              "channelSubType": {
                "type": "string",
                "enum": [
                  "SMS",
                  "WHATSAPP",
                  "FACEBOOK",
                  "APPLEBC"
                ]
              },
              "omniProviderId": {
                "type": "string"
              },
              "destination": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/DNDestinationDto"
                }
              },
              "userName": {
                "type": "string"
              },
              "userPassword": {
                "type": "string"
              },
              "ixnTimersObject": {
                "$ref": "#/definitions/IXNTimerDto"
              }
            },
            "required": [
              "number",
              "name",
              "tenantId",
              "permissionSetId",
              "callFlowId"
            ]
          },
          "Attributes": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "key": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "Text",
                  "Proficiency",
                  "Boolean"
                ]
              },
              "defaultValue": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time"
              }
            },
            "required": [
              "id",
              "key",
              "type",
              "createdAt",
              "updatedAt"
            ]
          },
          "CreateAttributesDto": {
            "type": "object",
            "properties": {
              "key": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "Text",
                  "Proficiency",
                  "Boolean"
                ]
              },
              "defaultValue": {
                "type": "string"
              }
            },
            "required": [
              "key",
              "type"
            ]
          },
          "CreateBulkAttributesSingleDto": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "key": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "Text",
                  "Proficiency",
                  "Boolean"
                ]
              },
              "defaultValue": {
                "type": "string"
              }
            },
            "required": [
              "key",
              "type"
            ]
          },
          "CreateBulkAttributesDto": {
            "type": "object",
            "properties": {
              "attributes": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/CreateBulkAttributesSingleDto"
                }
              }
            },
            "required": [
              "attributes"
            ]
          },
          "UpdateAttributesDto": {
            "type": "object",
            "properties": {
              "description": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "Text",
                  "Proficiency",
                  "Boolean"
                ]
              },
              "defaultValue": {
                "type": "string"
              }
            },
            "required": [
              "type"
            ]
          },
          "OmniProvider": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "tenantId": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "channelType": {
                "type": "string",
                "enum": [
                  "CHAT",
                  "EMAIL",
                  "MESSAGING"
                ]
              },
              "subChannelType": {
                "type": "string",
                "enum": [
                  "SMS",
                  "WHATSAPP",
                  "FACEBOOK",
                  "APPLEBC"
                ]
              },
              "type": {
                "type": "string",
                "enum": [
                  "NEXMO",
                  "COGNIGY",
                  "FACEBOOK",
                  "APPLE_BUSINESS_CHAT",
                  "TWILIO",
                  "POP3",
                  "IMAP",
                  "OPENFIRE"
                ]
              },
              "url": {
                "type": "string"
              },
              "urlPath": {
                "type": "string"
              },
              "apiKey": {
                "type": "string"
              },
              "apiSecret": {
                "type": "string"
              },
              "verifyToken": {
                "type": "string"
              },
              "applicationId": {
                "type": "string"
              },
              "profileUrl": {
                "type": "string"
              },
              "messagingServiceId": {
                "type": "string"
              },
              "port": {
                "type": "string"
              },
              "smtpUrl": {
                "type": "string"
              },
              "smtpPort": {
                "type": "string"
              },
              "smtpConnType": {
                "type": "string",
                "enum": [
                  "SSL",
                  "STARTTLS"
                ]
              },
              "createdAt": {
                "type": "string",
                "format": "date-time"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time"
              }
            },
            "required": [
              "id",
              "name",
              "tenantId",
              "channelType",
              "subChannelType",
              "type",
              "url",
              "createdAt",
              "updatedAt"
            ]
          },
          "CreateOmniProviderDto": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "channelType": {
                "type": "string",
                "enum": [
                  "CHAT",
                  "EMAIL",
                  "MESSAGING"
                ]
              },
              "subChannelType": {
                "type": "string",
                "enum": [
                  "SMS",
                  "WHATSAPP",
                  "FACEBOOK",
                  "APPLEBC"
                ]
              },
              "type": {
                "type": "string",
                "enum": [
                  "NEXMO",
                  "COGNIGY",
                  "FACEBOOK",
                  "APPLE_BUSINESS_CHAT",
                  "TWILIO",
                  "POP3",
                  "IMAP",
                  "OPENFIRE"
                ]
              },
              "url": {
                "type": "string"
              },
              "urlPath": {
                "type": "string"
              },
              "apiKey": {
                "type": "string"
              },
              "apiSecret": {
                "type": "string"
              },
              "verifyToken": {
                "type": "string"
              },
              "applicationId": {
                "type": "string"
              },
              "profileUrl": {
                "type": "string"
              },
              "messagingServiceId": {
                "type": "string"
              },
              "port": {
                "type": "string"
              },
              "smtpUrl": {
                "type": "string"
              },
              "smtpPort": {
                "type": "string"
              },
              "smtpConnType": {
                "type": "string",
                "enum": [
                  "SSL",
                  "STARTTLS"
                ]
              }
            },
            "required": [
              "name",
              "channelType",
              "subChannelType",
              "type",
              "url",
              "urlPath",
              "apiKey",
              "apiSecret",
              "verifyToken",
              "applicationId",
              "profileUrl",
              "messagingServiceId",
              "port",
              "smtpUrl",
              "smtpPort",
              "smtpConnType"
            ]
          },
          "UpdateOmniProviderDto": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "channelType": {
                "type": "string",
                "enum": [
                  "CHAT",
                  "EMAIL",
                  "MESSAGING"
                ]
              },
              "subChannelType": {
                "type": "string",
                "enum": [
                  "SMS",
                  "WHATSAPP",
                  "FACEBOOK",
                  "APPLEBC"
                ]
              },
              "type": {
                "type": "string",
                "enum": [
                  "NEXMO",
                  "COGNIGY",
                  "FACEBOOK",
                  "APPLE_BUSINESS_CHAT",
                  "TWILIO",
                  "POP3",
                  "IMAP",
                  "OPENFIRE"
                ]
              },
              "url": {
                "type": "string"
              },
              "urlPath": {
                "type": "string"
              },
              "apiKey": {
                "type": "string"
              },
              "apiSecret": {
                "type": "string"
              },
              "verifyToken": {
                "type": "string"
              },
              "applicationId": {
                "type": "string"
              },
              "profileUrl": {
                "type": "string"
              },
              "messagingServiceId": {
                "type": "string"
              },
              "port": {
                "type": "string"
              },
              "smtpUrl": {
                "type": "string"
              },
              "smtpPort": {
                "type": "string"
              },
              "smtpConnType": {
                "type": "string",
                "enum": [
                  "SSL",
                  "STARTTLS"
                ]
              }
            },
            "required": [
              "name",
              "channelType",
              "subChannelType",
              "type",
              "url",
              "urlPath",
              "apiKey",
              "apiSecret",
              "verifyToken",
              "applicationId",
              "profileUrl",
              "messagingServiceId",
              "port",
              "smtpUrl",
              "smtpPort",
              "smtpConnType"
            ]
          },
          "GlobalConfiguration": {
            "type": "object",
            "properties": {
              "id": {
                "type": "number"
              },
              "tenantId": {
                "type": "string"
              },
              "key": {
                "type": "string"
              },
              "title": {
                "type": "string"
              },
              "values": {
                "type": "object"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time"
              }
            },
            "required": [
              "id",
              "tenantId",
              "key",
              "values",
              "createdAt",
              "updatedAt"
            ]
          },
          "CreateGlobalConfigurationDto": {
            "type": "object",
            "properties": {
              "key": {
                "type": "string"
              },
              "values": {
                "type": "object"
              },
              "tenantId": {
                "type": "string"
              }
            },
            "required": [
              "key",
              "values",
              "tenantId"
            ]
          },
          "UpdateGlobalConfigurationDto": {
            "type": "object",
            "properties": {
              "key": {
                "type": "string"
              },
              "values": {
                "type": "object"
              },
              "tenantId": {
                "type": "string"
              }
            },
            "required": [
              "key",
              "values",
              "tenantId"
            ]
          },
          "AuxReasonCode": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "tenantId": {
                "type": "string"
              },
              "code": {
                "type": "number"
              },
              "name": {
                "type": "string"
              },
              "interruptible": {
                "type": "boolean",
                "default": false
              },
              "createdAt": {
                "type": "string",
                "format": "date-time"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time"
              }
            },
            "required": [
              "id",
              "tenantId",
              "code",
              "name",
              "interruptible",
              "createdAt",
              "updatedAt"
            ]
          },
          "CreateAuxReasonCodeDto": {
            "type": "object",
            "properties": {
              "code": {
                "type": "number"
              },
              "name": {
                "type": "string"
              },
              "interruptible": {
                "type": "boolean",
                "default": false
              }
            },
            "required": [
              "code",
              "name",
              "interruptible"
            ]
          },
          "UpdateAuxReasonCodeDto": {
            "type": "object",
            "properties": {
              "code": {
                "type": "number"
              },
              "name": {
                "type": "string"
              },
              "interruptible": {
                "type": "boolean",
                "default": false
              }
            },
            "required": [
              "code",
              "name",
              "interruptible"
            ]
          },
          "LogoutReasonCode": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "tenantId": {
                "type": "string"
              },
              "code": {
                "type": "number"
              },
              "name": {
                "type": "string"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time"
              }
            },
            "required": [
              "id",
              "tenantId",
              "code",
              "name",
              "createdAt",
              "updatedAt"
            ]
          },
          "CreateLogoutReasonCodeDto": {
            "type": "object",
            "properties": {
              "code": {
                "type": "number"
              },
              "name": {
                "type": "string"
              }
            },
            "required": [
              "code",
              "name"
            ]
          },
          "UpdateLogoutReasonCodeDto": {
            "type": "object",
            "properties": {
              "code": {
                "type": "number"
              },
              "name": {
                "type": "string"
              }
            },
            "required": [
              "code",
              "name"
            ]
          },
          "CapacityProfileRuleSubSetDto": {
            "type": "object",
            "properties": {
              "channelType": {
                "type": "string",
                "enum": [
                  "IXN_CHANNEL_VOICE",
                  "IXN_CHANNEL_RETAIL",
                  "IXN_CHANNEL_CHAT",
                  "IXN_CHANNEL_EMAIL",
                  "IXN_CHANNEL_MESSAGING"
                ]
              },
              "value": {
                "type": "number",
                "default": -1
              }
            },
            "required": [
              "channelType",
              "value"
            ]
          },
          "CapacityProfileRuleDto": {
            "type": "object",
            "properties": {
              "channelType": {
                "type": "string",
                "enum": [
                  "IXN_CHANNEL_VOICE",
                  "IXN_CHANNEL_RETAIL",
                  "IXN_CHANNEL_CHAT",
                  "IXN_CHANNEL_EMAIL",
                  "IXN_CHANNEL_MESSAGING"
                ]
              },
              "subSet": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/CapacityProfileRuleSubSetDto"
                }
              },
              "total": {
                "type": "number",
                "default": -1
              },
              "enabled": {
                "type": "boolean",
                "default": true
              }
            },
            "required": [
              "channelType",
              "subSet",
              "total",
              "enabled"
            ]
          },
          "CapacityProfile": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "rule": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/CapacityProfileRuleDto"
                }
              },
              "isAdvance": {
                "type": "boolean",
                "default": false
              },
              "createdAt": {
                "type": "string",
                "format": "date-time"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time"
              }
            },
            "required": [
              "id",
              "name",
              "rule",
              "createdAt",
              "updatedAt"
            ]
          },
          "CreateCapacityProfileDto": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "rule": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/CapacityProfileRuleDto"
                }
              },
              "isAdvance": {
                "type": "boolean",
                "default": false
              }
            },
            "required": [
              "name",
              "rule"
            ]
          },
          "UpdateCapacityProfileDto": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "rule": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/CapacityProfileRuleDto"
                }
              },
              "isAdvance": {
                "type": "boolean",
                "default": false
              }
            },
            "required": [
              "name",
              "rule"
            ]
          },
          "CoveragePathSet": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "tenantId": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "coveragePoint": {
                "type": "string"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time"
              }
            },
            "required": [
              "id",
              "tenantId",
              "name",
              "createdAt",
              "updatedAt"
            ]
          },
          "CreateCoveragePathSetDto": {
            "type": "object",
            "properties": {
              "tenantId": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "coveragePoint": {
                "type": "string"
              }
            },
            "required": [
              "tenantId",
              "name"
            ]
          },
          "BulkCreateCoveragePathSetsSingleDto": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "tenantId": {
                "type": "string"
              },
              "coveragePoint": {
                "type": "string"
              }
            },
            "required": [
              "name",
              "tenantId"
            ]
          },
          "BulkCreateCoveragePathSetsDto": {
            "type": "object",
            "properties": {
              "coveragePathSet": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/BulkCreateCoveragePathSetsSingleDto"
                }
              }
            },
            "required": [
              "coveragePathSet"
            ]
          },
          "UpdateCoveragePathSetDto": {
            "type": "object",
            "properties": {
              "tenantId": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "coveragePoint": {
                "type": "string"
              }
            },
            "required": [
              "tenantId",
              "name"
            ]
          },
          "VoiceMailServer": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "permissionSetId": {
                "type": "string"
              },
              "voiceMailNumber": {
                "type": "string"
              },
              "routingDigits": {
                "type": "string"
              },
              "tenantId": {
                "type": "string"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time"
              }
            },
            "required": [
              "id",
              "name",
              "permissionSetId",
              "voiceMailNumber",
              "tenantId",
              "createdAt",
              "updatedAt"
            ]
          },
          "CreateVoiceMailServerDto": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "tenantId": {
                "type": "string"
              },
              "permissionSetId": {
                "type": "string"
              },
              "voiceMailNumber": {
                "type": "string"
              },
              "routingDigits": {
                "type": "string"
              }
            },
            "required": [
              "name",
              "tenantId",
              "permissionSetId",
              "voiceMailNumber"
            ]
          },
          "BulkCreateVoiceMailServerSingleDto": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "tenantId": {
                "type": "string"
              },
              "permissionSetId": {
                "type": "string"
              },
              "voiceMailNumber": {
                "type": "string"
              },
              "routingDigits": {
                "type": "string"
              }
            },
            "required": [
              "name",
              "tenantId",
              "permissionSetId",
              "voiceMailNumber"
            ]
          },
          "BulkCreateVoiceMailServerDto": {
            "type": "object",
            "properties": {
              "voicemailservers": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/BulkCreateVoiceMailServerSingleDto"
                }
              }
            },
            "required": [
              "voicemailservers"
            ]
          },
          "UpdateVoiceMailServerDto": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "tenantId": {
                "type": "string"
              },
              "permissionSetId": {
                "type": "string"
              },
              "voiceMailNumber": {
                "type": "string"
              },
              "routingDigits": {
                "type": "string"
              }
            },
            "required": [
              "name",
              "tenantId",
              "permissionSetId",
              "voiceMailNumber"
            ]
          },
          "ImportStationDto": {
            "type": "object",
            "properties": {
              "Name": {
                "type": "string"
              },
              "Number": {
                "type": "string"
              },
              "Domain": {
                "type": "string"
              },
              "Password": {
                "type": "string"
              },
              "ButtonFeatures": {
                "type": "string"
              },
              "CallForwardDestination": {
                "type": "string"
              },
              "AutoAnswer": {
                "type": "string"
              },
              "PermissionSet": {
                "type": "string"
              },
              "DefaultLocation": {
                "type": "string"
              },
              "VmNumber": {
                "type": "string"
              },
              "SoftPhone": {
                "type": "string"
              },
              "VideoEnabled": {
                "type": "string"
              },
              "RTPSettings": {
                "type": "string"
              },
              "LocalOrRemote": {
                "type": "string"
              },
              "ListenPort": {
                "type": "string"
              },
              "Protocol": {
                "type": "string"
              },
              "LineOfBusiness": {
                "type": "string"
              },
              "Room": {
                "type": "string"
              },
              "Floor": {
                "type": "string"
              },
              "Building": {
                "type": "string"
              },
              "CoveragePathId": {
                "type": "string"
              },
              "UserHandle": {
                "type": "string"
              },
              "SetType": {
                "type": "string"
              }
            },
            "required": [
              "Name",
              "Number",
              "Password"
            ]
          },
          "StationResolveDto": {
            "type": "object",
            "properties": {
              "number": {
                "type": "string"
              },
              "tenantId": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "domain": {
                "type": "string"
              },
              "password": {
                "type": "string"
              },
              "passwordHash": {
                "type": "string"
              },
              "passwordSalt": {
                "type": "string"
              },
              "passwordAlgorithm": {
                "type": "string"
              },
              "defaultLocation": {
                "type": "object"
              },
              "profileSetting": {
                "$ref": "#/definitions/ProfileSettings"
              },
              "serviceURI": {
                "type": "string"
              },
              "serviceTransport": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ServiceTransport"
                }
              },
              "deviceDataByMacAddress": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/DeviceDataByMacAddress"
                }
              },
              "deviceDataByStationtype": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/DeviceDataByStationType"
                }
              },
              "oneTouchDialList": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/OneTouchDialList"
                }
              },
              "vmNumber": {
                "type": "string"
              },
              "buttonConfig": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/StationButtonConfig"
                }
              },
              "callForwardDestination": {
                "type": "string"
              },
              "softPhone": {
                "type": "boolean"
              },
              "videoEnabled": {
                "type": "boolean"
              },
              "rtpSettings": {
                "type": "number"
              },
              "autoAnswer": {
                "type": "number",
                "default": 0
              },
              "permissionSetId": {
                "type": "object"
              },
              "localOrRemote": {
                "type": "string",
                "enum": [
                  "LOCAL",
                  "REMOTE"
                ]
              },
              "listenPort": {
                "type": "string"
              },
              "protocol": {
                "type": "string"
              },
              "coveragePathId": {
                "type": "string"
              },
              "source": {
                "type": "string"
              },
              "userHandle": {
                "type": "string"
              },
              "setType": {
                "type": "string",
                "enum": [
                  "J169CC",
                  "J179CC",
                  "9608SIPCC",
                  "9611SIPCC",
                  "9621SIPCC",
                  "9641SIPCC"
                ]
              },
              "createdAt": {
                "type": "string",
                "format": "date-time"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time"
              }
            },
            "required": [
              "number",
              "tenantId",
              "name",
              "domain",
              "password",
              "createdAt",
              "updatedAt"
            ]
          },
          "CreateStationDto": {
            "type": "object",
            "properties": {
              "tenantId": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "number": {
                "type": "string"
              },
              "password": {
                "type": "string"
              },
              "passwordSalt": {
                "type": "string"
              },
              "passwordHash": {
                "type": "string"
              },
              "passwordAlgorithm": {
                "type": "string"
              },
              "defaultLocation": {
                "type": "string"
              },
              "profileSetting": {
                "$ref": "#/definitions/ProfileSettings"
              },
              "serviceURI": {
                "type": "string"
              },
              "serviceTransport": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ServiceTransport"
                }
              },
              "deviceDataByMacAddress": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/DeviceDataByMacAddress"
                }
              },
              "deviceDataByStationtype": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/DeviceDataByStationType"
                }
              },
              "oneTouchDialList": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/OneTouchDialList"
                }
              },
              "buttonConfig": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/StationButtonConfig"
                }
              },
              "callForwardDestination": {
                "type": "string"
              },
              "softPhone": {
                "type": "boolean"
              },
              "videoEnabled": {
                "type": "boolean"
              },
              "rtpSettings": {
                "type": "number"
              },
              "autoAnswer": {
                "type": "number",
                "default": 0
              },
              "permissionSetId": {
                "type": "string"
              },
              "localOrRemote": {
                "type": "string",
                "enum": [
                  "LOCAL",
                  "REMOTE"
                ],
                "default": "LOCAL"
              },
              "listenPort": {
                "type": "string"
              },
              "protocol": {
                "type": "string",
                "enum": [
                  "UDP",
                  "TCP",
                  "TLS"
                ],
                "default": "UDP"
              },
              "programId": {
                "type": "number"
              },
              "room": {
                "type": "string"
              },
              "floor": {
                "type": "string"
              },
              "building": {
                "type": "string"
              },
              "coveragePathId": {
                "type": "string"
              },
              "source": {
                "type": "string"
              },
              "userHandle": {
                "type": "string"
              },
              "setType": {
                "type": "string",
                "enum": [
                  "J169CC",
                  "J179CC",
                  "9608SIPCC",
                  "9611SIPCC",
                  "9621SIPCC",
                  "9641SIPCC"
                ]
              }
            },
            "required": [
              "tenantId",
              "name",
              "number",
              "password",
              "permissionSetId"
            ]
          },
          "BulkCreateStationsDto": {
            "type": "object",
            "properties": {
              "stations": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/CreateStationDto"
                }
              }
            },
            "required": [
              "stations"
            ]
          },
          "ImportStationDtoType": {
            "type": "object",
            "properties": {
              "stations": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ImportStationDto"
                }
              }
            },
            "required": [
              "stations"
            ]
          },
          "BulkUpdateStationsDto": {
            "type": "object",
            "properties": {
              "tenantId": {
                "type": "string"
              },
              "numbers": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "name": {
                "type": "string"
              },
              "password": {
                "type": "string"
              },
              "buttonConfig": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/StationButtonConfig"
                }
              },
              "callForwardDestination": {
                "type": "string"
              },
              "softPhone": {
                "type": "boolean"
              },
              "videoEnabled": {
                "type": "boolean"
              },
              "rtpSettings": {
                "type": "number"
              },
              "autoAnswer": {
                "type": "number",
                "default": 0
              },
              "permissionSetId": {
                "type": "string"
              },
              "defaultLocation": {
                "type": "string"
              },
              "programId": {
                "type": "number"
              },
              "coveragePathId": {
                "type": "string"
              },
              "userHandle": {
                "type": "string"
              },
              "setType": {
                "type": "string",
                "enum": [
                  "J169CC",
                  "J179CC",
                  "9608SIPCC",
                  "9611SIPCC",
                  "9621SIPCC",
                  "9641SIPCC"
                ]
              }
            },
            "required": [
              "tenantId",
              "numbers"
            ]
          },
          "UpdateStationDto": {
            "type": "object",
            "properties": {
              "tenantId": {
                "type": "string"
              },
              "number": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "updatePassword": {
                "type": "boolean",
                "default": false
              },
              "password": {
                "type": "string"
              },
              "defaultLocation": {
                "type": "string"
              },
              "profileSetting": {
                "$ref": "#/definitions/ProfileSettings"
              },
              "serviceURI": {
                "type": "string"
              },
              "serviceTransport": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ServiceTransport"
                }
              },
              "deviceDataByMacAddress": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/DeviceDataByMacAddress"
                }
              },
              "deviceDataByStationtype": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/DeviceDataByStationType"
                }
              },
              "oneTouchDialList": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/OneTouchDialList"
                }
              },
              "buttonConfig": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/StationButtonConfig"
                }
              },
              "callForwardDestination": {
                "type": "string"
              },
              "softPhone": {
                "type": "boolean"
              },
              "videoEnabled": {
                "type": "boolean"
              },
              "rtpSettings": {
                "type": "number"
              },
              "autoAnswer": {
                "type": "number",
                "default": 0
              },
              "permissionSetId": {
                "type": "string"
              },
              "featuresSetId": {
                "type": "number"
              },
              "localOrRemote": {
                "type": "string",
                "enum": [
                  "LOCAL",
                  "REMOTE"
                ],
                "default": "LOCAL"
              },
              "listenPort": {
                "type": "string"
              },
              "protocol": {
                "type": "string",
                "enum": [
                  "UDP",
                  "TCP",
                  "TLS"
                ],
                "default": "UDP"
              },
              "programId": {
                "type": "number"
              },
              "room": {
                "type": "string"
              },
              "floor": {
                "type": "string"
              },
              "building": {
                "type": "string"
              },
              "coveragePathId": {
                "type": "string"
              },
              "userHandle": {
                "type": "string"
              },
              "setType": {
                "type": "string",
                "enum": [
                  "J169CC",
                  "J179CC",
                  "9608SIPCC",
                  "9611SIPCC",
                  "9621SIPCC",
                  "9641SIPCC"
                ]
              }
            },
            "required": [
              "tenantId",
              "number",
              "name",
              "permissionSetId"
            ]
          },
          "ChangeStationPasswordDto": {
            "type": "object",
            "properties": {
              "oldPassword": {
                "type": "string"
              },
              "newPassword": {
                "type": "string"
              }
            },
            "required": [
              "oldPassword",
              "newPassword"
            ]
          },
          "StatsList": {
            "type": "object",
            "properties": {
              "dataType": {
                "type": "string"
              },
              "format": {
                "type": "string"
              },
              "period": {
                "type": "string"
              },
              "thresholdOperator": {
                "type": "string"
              },
              "threshold": {
                "type": "number"
              },
              "reasonCode": {
                "type": "number"
              },
              "ref": {
                "type": "string"
              }
            },
            "required": [
              "dataType"
            ]
          },
          "Vustats": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "tenantId": {
                "type": "string"
              },
              "nextFormatNumber": {
                "type": "string"
              },
              "objectType": {
                "type": "string",
                "enum": [
                  "agent",
                  "agent-extension",
                  "skill",
                  "trunk-group",
                  "vdn"
                ],
                "default": "split"
              },
              "dataFieldCharacter": {
                "type": "string"
              },
              "numberOfIntervals": {
                "type": "number"
              },
              "updateInterval": {
                "type": "string"
              },
              "onChange": {
                "type": "boolean"
              },
              "displayInterval": {
                "type": "string"
              },
              "formatDescription": {
                "type": "string"
              },
              "statsList": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/StatsList"
                }
              },
              "createdAt": {
                "type": "string",
                "format": "date-time"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time"
              }
            },
            "required": [
              "id",
              "name",
              "tenantId",
              "objectType",
              "dataFieldCharacter",
              "numberOfIntervals",
              "updateInterval",
              "formatDescription",
              "createdAt",
              "updatedAt"
            ]
          },
          "CreateVustatsDto": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "tenantId": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "nextFormatNumber": {
                "type": "string"
              },
              "objectType": {
                "type": "string",
                "enum": [
                  "agent",
                  "agent-extension",
                  "skill",
                  "trunk-group",
                  "vdn"
                ],
                "default": "split"
              },
              "dataFieldCharacter": {
                "type": "string"
              },
              "numberOfIntervals": {
                "type": "number"
              },
              "updateInterval": {
                "type": "string"
              },
              "onChange": {
                "type": "boolean"
              },
              "displayInterval": {
                "type": "string"
              },
              "formatDescription": {
                "type": "string"
              },
              "statsList": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/StatsList"
                }
              }
            },
            "required": [
              "name",
              "tenantId",
              "objectType",
              "dataFieldCharacter",
              "updateInterval",
              "formatDescription"
            ]
          },
          "UpdateVustatsDto": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "tenantId": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "nextFormatNumber": {
                "type": "string"
              },
              "objectType": {
                "type": "string",
                "enum": [
                  "agent",
                  "agent-extension",
                  "skill",
                  "trunk-group",
                  "vdn"
                ],
                "default": "split"
              },
              "dataFieldCharacter": {
                "type": "string"
              },
              "numberOfIntervals": {
                "type": "number"
              },
              "updateInterval": {
                "type": "string"
              },
              "onChange": {
                "type": "boolean"
              },
              "displayInterval": {
                "type": "string"
              },
              "formatDescription": {
                "type": "string"
              },
              "statsList": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/StatsList"
                }
              }
            },
            "required": [
              "name",
              "tenantId",
              "objectType",
              "dataFieldCharacter",
              "updateInterval",
              "formatDescription"
            ]
          },
          "Callflow": {
            "type": "object",
            "properties": {
              "number": {
                "type": "string"
              },
              "tenantId": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "source": {
                "type": "string"
              },
              "ilScript": {
                "type": "object"
              },
              "script": {
                "type": "object"
              },
              "scriptPosition": {
                "type": "object"
              },
              "programId": {
                "type": "number"
              },
              "permissionSetId": {
                "type": "string"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time"
              }
            },
            "required": [
              "number",
              "tenantId",
              "name",
              "createdAt",
              "updatedAt"
            ]
          },
          "ImportCallFlowDto": {
            "type": "object",
            "properties": {
              "Number": {
                "type": "string"
              },
              "Name": {
                "type": "string"
              },
              "Script": {
                "type": "object"
              },
              "LineOfBusiness": {
                "type": "string"
              },
              "PermissionSet": {
                "type": "string"
              }
            },
            "required": [
              "Number",
              "Name"
            ]
          },
          "CreateCallflowDto": {
            "type": "object",
            "properties": {
              "number": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "source": {
                "type": "string"
              },
              "ilScript": {
                "type": "object"
              },
              "script": {
                "type": "object"
              },
              "scriptPosition": {
                "type": "object"
              },
              "programId": {
                "type": "number"
              },
              "permissionSetId": {
                "type": "string"
              },
              "tenantId": {
                "type": "string"
              }
            },
            "required": [
              "number",
              "name",
              "tenantId"
            ]
          },
          "BulkCreateCallflowDto": {
            "type": "object",
            "properties": {
              "callflows": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/CreateCallflowDto"
                }
              }
            },
            "required": [
              "callflows"
            ]
          },
          "ImportCallflowDtoType": {
            "type": "object",
            "properties": {
              "callflows": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ImportCallFlowDto"
                }
              }
            },
            "required": [
              "callflows"
            ]
          },
          "UpdateCallflowDto": {
            "type": "object",
            "properties": {
              "number": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "source": {
                "type": "string"
              },
              "ilScript": {
                "type": "object"
              },
              "script": {
                "type": "object"
              },
              "scriptPosition": {
                "type": "object"
              },
              "programId": {
                "type": "number"
              },
              "permissionSetId": {
                "type": "string"
              },
              "tenantId": {
                "type": "string"
              }
            },
            "required": [
              "number",
              "name",
              "tenantId"
            ]
          },
          "VectorVariables": {
            "type": "object",
            "properties": {
              "id": {
                "type": "number"
              },
              "name": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "ani",
                  "asaiuui",
                  "collect",
                  "tod",
                  "value",
                  "vdn",
                  "lookup",
                  "dow",
                  "doy",
                  "stepcnt",
                  "vdntime"
                ]
              },
              "colType": {
                "type": "string",
                "enum": [
                  "string",
                  "int",
                  "bool"
                ]
              },
              "datasourceId": {
                "type": "string"
              },
              "scope": {
                "type": "string"
              },
              "assignment": {
                "type": "string"
              },
              "start": {
                "type": "number"
              },
              "maxLength": {
                "type": "number"
              },
              "tenantId": {
                "type": "string"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time"
              }
            },
            "required": [
              "id",
              "name",
              "type",
              "scope",
              "tenantId",
              "createdAt",
              "updatedAt"
            ]
          },
          "BulkEditVectorVariablesDto": {
            "type": "object",
            "properties": {
              "id": {
                "type": "number"
              },
              "name": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "ani",
                  "asaiuui",
                  "collect",
                  "tod",
                  "value",
                  "vdn",
                  "lookup",
                  "dow",
                  "doy",
                  "stepcnt",
                  "vdntime"
                ]
              },
              "description": {
                "type": "string"
              },
              "scope": {
                "type": "string"
              },
              "assignment": {
                "type": "string"
              },
              "start": {
                "type": "number"
              },
              "maxLength": {
                "type": "number"
              },
              "colType": {
                "type": "string",
                "enum": [
                  "string",
                  "int",
                  "bool"
                ]
              },
              "datasourceId": {
                "type": "string"
              },
              "tenantId": {
                "type": "string"
              }
            },
            "required": [
              "id",
              "name",
              "type",
              "scope",
              "tenantId"
            ]
          },
          "BulkUpdateVectorVariablesDtoType": {
            "type": "object",
            "properties": {
              "variables": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/BulkEditVectorVariablesDto"
                }
              }
            },
            "required": [
              "variables"
            ]
          },
          "DataSources": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "tenantId": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "DB_POSTGRES",
                  "RESTAPI"
                ],
                "default": "DB_POSTGRES"
              },
              "host": {
                "type": "string"
              },
              "port": {
                "type": "number"
              },
              "url": {
                "type": "string"
              },
              "username": {
                "type": "string"
              },
              "password": {
                "type": "string"
              },
              "dbName": {
                "type": "string"
              },
              "table": {
                "type": "string"
              },
              "schema": {
                "type": "string"
              },
              "object": {
                "type": "string"
              },
              "restAuthType": {
                "type": "string",
                "enum": [
                  "token",
                  "basic"
                ],
                "default": "basic"
              },
              "restClientId": {
                "type": "string"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time"
              }
            },
            "required": [
              "id",
              "name",
              "tenantId",
              "type",
              "createdAt",
              "updatedAt"
            ]
          },
          "CreateDataSourcesDto": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "DB_POSTGRES",
                  "RESTAPI"
                ],
                "default": "DB_POSTGRES"
              },
              "host": {
                "type": "string"
              },
              "port": {
                "type": "number"
              },
              "url": {
                "type": "string"
              },
              "username": {
                "type": "string"
              },
              "password": {
                "type": "string"
              },
              "dbName": {
                "type": "string"
              },
              "table": {
                "type": "string"
              },
              "schema": {
                "type": "string"
              },
              "object": {
                "type": "string"
              },
              "restAuthType": {
                "type": "string",
                "enum": [
                  "token",
                  "basic"
                ],
                "default": "basic"
              },
              "restClientId": {
                "type": "string"
              }
            },
            "required": [
              "name",
              "type",
              "host",
              "port",
              "url",
              "username",
              "password",
              "dbName",
              "table",
              "object",
              "restAuthType",
              "restClientId"
            ]
          },
          "UpdateDataSourcesDto": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "DB_POSTGRES",
                  "RESTAPI"
                ],
                "default": "DB_POSTGRES"
              },
              "host": {
                "type": "string"
              },
              "port": {
                "type": "number"
              },
              "url": {
                "type": "string"
              },
              "username": {
                "type": "string"
              },
              "password": {
                "type": "string"
              },
              "dbName": {
                "type": "string"
              },
              "table": {
                "type": "string"
              },
              "schema": {
                "type": "string"
              },
              "object": {
                "type": "string"
              },
              "restAuthType": {
                "type": "string"
              },
              "restClientId": {
                "type": "string"
              }
            },
            "required": [
              "name",
              "type",
              "host",
              "port",
              "url",
              "username",
              "password",
              "dbName",
              "table",
              "object",
              "restAuthType",
              "restClientId"
            ]
          },
          "DataSourcesColumnDto": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              }
            },
            "required": [
              "name"
            ]
          },
          "ServiceHourTableDto": {
            "type": "object",
            "properties": {
              "tableId": {
                "type": "number"
              },
              "name": {
                "type": "string"
              }
            },
            "required": [
              "tableId",
              "name"
            ]
          },
          "BulkCreateServiceHourDto": {
            "type": "object",
            "properties": {
              "serviceHours": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/CreateServiceHour"
                }
              }
            },
            "required": [
              "serviceHours"
            ]
          },
          "UpdateServiceHour": {
            "type": "object",
            "properties": {
              "id": {
                "type": "number"
              },
              "tenantId": {
                "type": "string"
              },
              "tableId": {
                "type": "number"
              },
              "name": {
                "type": "string"
              },
              "day": {
                "type": "string",
                "enum": [
                  "Monday",
                  "Tuesday",
                  "Wednesday",
                  "Thursday",
                  "Friday",
                  "Saturday",
                  "Sunday"
                ]
              },
              "serviceHourRange": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ServiceHourRange"
                }
              },
              "source": {
                "type": "string"
              },
              "timezone": {
                "type": "string"
              }
            },
            "required": [
              "id",
              "tenantId",
              "tableId",
              "name",
              "day",
              "serviceHourRange"
            ]
          },
          "BulkUpdateServiceHourDto": {
            "type": "object",
            "properties": {
              "serviceHours": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/UpdateServiceHour"
                }
              }
            },
            "required": [
              "serviceHours"
            ]
          },
          "SuccessResponse": {
            "type": "object",
            "properties": {
              "description": {
                "type": "string"
              }
            },
            "required": [
              "description"
            ]
          },
          "HolidayTableDto": {
            "type": "object",
            "properties": {
              "tableId": {
                "type": "number"
              },
              "name": {
                "type": "string"
              }
            },
            "required": [
              "tableId",
              "name"
            ]
          },
          "BulkCreateHolidayDto": {
            "type": "object",
            "properties": {
              "holidays": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/CreateHolidayDto"
                }
              }
            },
            "required": [
              "holidays"
            ]
          },
          "UpdateHolidayDto": {
            "type": "object",
            "properties": {
              "id": {
                "type": "number"
              },
              "tenantId": {
                "type": "string"
              },
              "tableId": {
                "type": "number"
              },
              "name": {
                "type": "string"
              },
              "startMonth": {
                "type": "number"
              },
              "startDay": {
                "type": "number"
              },
              "startHour": {
                "type": "number"
              },
              "startMin": {
                "type": "number"
              },
              "endMonth": {
                "type": "number"
              },
              "endDay": {
                "type": "number"
              },
              "endHour": {
                "type": "number"
              },
              "endMin": {
                "type": "number"
              },
              "description": {
                "type": "string"
              },
              "source": {
                "type": "string"
              }
            },
            "required": [
              "id",
              "tenantId",
              "tableId",
              "name",
              "startMonth",
              "startDay",
              "startHour",
              "startMin",
              "endMonth",
              "endDay",
              "endHour",
              "endMin"
            ]
          },
          "BulkUpdateHolidayDto": {
            "type": "object",
            "properties": {
              "holidays": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/UpdateHolidayDto"
                }
              }
            },
            "required": [
              "holidays"
            ]
          },
          "Program": {
            "type": "object",
            "properties": {
              "id": {
                "type": "number"
              },
              "lineOfBusiness": {
                "type": "string"
              },
              "lobId": {
                "type": "string"
              },
              "callSla": {
                "type": "number"
              },
              "agentSla": {
                "type": "number"
              },
              "tenantId": {
                "type": "string"
              },
              "isEnabled": {
                "type": "boolean",
                "default": false
              },
              "createdAt": {
                "type": "string",
                "format": "date-time"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time"
              }
            },
            "required": [
              "id",
              "lineOfBusiness",
              "lobId",
              "callSla",
              "agentSla",
              "tenantId",
              "isEnabled",
              "createdAt",
              "updatedAt"
            ]
          },
          "CreateProgramDto": {
            "type": "object",
            "properties": {
              "lineOfBusiness": {
                "type": "string"
              },
              "lobId": {
                "type": "string"
              },
              "callSla": {
                "type": "number"
              },
              "agentSla": {
                "type": "number"
              },
              "tenantId": {
                "type": "string"
              },
              "isEnabled": {
                "type": "boolean"
              }
            },
            "required": [
              "lineOfBusiness",
              "lobId",
              "callSla",
              "agentSla",
              "tenantId"
            ]
          },
          "UpdateProgramDto": {
            "type": "object",
            "properties": {
              "lineOfBusiness": {
                "type": "string"
              },
              "lobId": {
                "type": "string"
              },
              "callSla": {
                "type": "number"
              },
              "agentSla": {
                "type": "number"
              },
              "isEnabled": {
                "type": "boolean"
              }
            },
            "required": [
              "lineOfBusiness",
              "lobId",
              "callSla",
              "agentSla"
            ]
          },
          "CallAttributesDto": {
            "type": "object",
            "properties": {
              "key": {
                "type": "string"
              },
              "isASAIUUI": {
                "type": "boolean",
                "default": false
              },
              "start": {
                "type": "number"
              },
              "length": {
                "type": "number"
              },
              "defaultValue": {
                "type": "string"
              }
            },
            "required": [
              "key",
              "isASAIUUI",
              "start",
              "length",
              "defaultValue"
            ]
          },
          "CallType": {
            "type": "object",
            "properties": {
              "number": {
                "type": "string"
              },
              "tenantId": {
                "type": "string"
              },
              "callFlowId": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "source": {
                "type": "string"
              },
              "expression": {
                "type": "string"
              },
              "variables": {
                "type": "object"
              },
              "callAttributes": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/CallAttributesDto"
                }
              },
              "programId": {
                "type": "number"
              },
              "channelType": {
                "type": "string",
                "enum": [
                  "VOICE",
                  "RETAIL",
                  "CHAT",
                  "EMAIL",
                  "MESSAGING"
                ]
              },
              "channelSubtype": {
                "type": "string",
                "enum": [
                  "SMS",
                  "WHATSAPP",
                  "FACEBOOK",
                  "APPLEBC"
                ]
              },
              "createdAt": {
                "type": "string",
                "format": "date-time"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time"
              }
            },
            "required": [
              "number",
              "tenantId",
              "name",
              "createdAt",
              "updatedAt"
            ]
          },
          "CreateCallTypeDto": {
            "type": "object",
            "properties": {
              "tenantId": {
                "type": "string"
              },
              "number": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "source": {
                "type": "string"
              },
              "callFlowId": {
                "type": "string"
              },
              "expression": {
                "type": "string"
              },
              "programId": {
                "type": "number"
              },
              "variables": {
                "type": "object",
                "example": {
                  "skills": [
                    {
                      "key": "1",
                      "value": "123"
                    }
                  ],
                  "dnVariables": [
                    {
                      "key": "1",
                      "value": "123",
                      "description": "description"
                    }
                  ]
                }
              },
              "callAttributes": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/CallAttributesDto"
                }
              },
              "channelType": {
                "type": "string",
                "enum": [
                  "VOICE",
                  "RETAIL",
                  "CHAT",
                  "EMAIL",
                  "MESSAGING"
                ]
              },
              "channelSubtype": {
                "type": "string",
                "enum": [
                  "SMS",
                  "WHATSAPP",
                  "FACEBOOK",
                  "APPLEBC"
                ]
              }
            },
            "required": [
              "tenantId",
              "number",
              "name"
            ]
          },
          "BulkMegaBrowserCallTypeDto": {
            "type": "object",
            "properties": {
              "calltypes": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/MegaBrowserCallTypeDto"
                }
              }
            },
            "required": [
              "calltypes"
            ]
          },
          "BulkCreateCallTypeDto": {
            "type": "object",
            "properties": {
              "calltypes": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/CreateCallTypeDto"
                }
              }
            },
            "required": [
              "calltypes"
            ]
          },
          "ImportCallTypeDto": {
            "type": "object",
            "properties": {
              "Number": {
                "type": "string"
              },
              "Name": {
                "type": "string"
              },
              "Expression": {
                "type": "string"
              },
              "ChannelType": {
                "type": "string"
              },
              "ChannelSubtype": {
                "type": "string"
              },
              "LineOfBusiness": {
                "type": "string"
              },
              "Callflow": {
                "type": "string"
              },
              "EmployeeGroup": {
                "type": "string"
              },
              "Variables": {
                "type": "string"
              },
              "Skill1": {
                "type": "string"
              },
              "Skill2": {
                "type": "string"
              },
              "Skill3": {
                "type": "string"
              },
              "V1": {
                "type": "string"
              },
              "V2": {
                "type": "string"
              },
              "V3": {
                "type": "string"
              },
              "V4": {
                "type": "string"
              },
              "V5": {
                "type": "string"
              },
              "V6": {
                "type": "string"
              },
              "V7": {
                "type": "string"
              },
              "V8": {
                "type": "string"
              },
              "V9": {
                "type": "string"
              },
              "V1_description": {
                "type": "string"
              },
              "V2_description": {
                "type": "string"
              },
              "V3_description": {
                "type": "string"
              },
              "V4_description": {
                "type": "string"
              },
              "V5_description": {
                "type": "string"
              },
              "V6_description": {
                "type": "string"
              },
              "V7_description": {
                "type": "string"
              },
              "V8_description": {
                "type": "string"
              },
              "V9_description": {
                "type": "string"
              }
            },
            "required": [
              "Number",
              "Name"
            ]
          },
          "ImportCallTypeDtoType": {
            "type": "object",
            "properties": {
              "calltypes": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ImportCallTypeDto"
                }
              }
            },
            "required": [
              "calltypes"
            ]
          },
          "BulkUpdateCallTypeDto": {
            "type": "object",
            "properties": {
              "numbers": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "tenantId": {
                "type": "string"
              },
              "callFlowId": {
                "type": "string"
              },
              "programId": {
                "type": "number"
              },
              "variables": {
                "type": "object",
                "example": {
                  "skills": [
                    {
                      "key": "1",
                      "value": "123"
                    }
                  ],
                  "dnVariables": [
                    {
                      "key": "1",
                      "value": "123",
                      "description": "description"
                    }
                  ]
                }
              },
              "channelType": {
                "type": "string",
                "enum": [
                  "VOICE",
                  "RETAIL",
                  "CHAT",
                  "EMAIL",
                  "MESSAGING"
                ]
              },
              "channelSubtype": {
                "type": "string",
                "enum": [
                  "SMS",
                  "WHATSAPP",
                  "FACEBOOK",
                  "APPLEBC"
                ]
              }
            },
            "required": [
              "numbers",
              "tenantId"
            ]
          },
          "UpdateCallTypeDto": {
            "type": "object",
            "properties": {
              "number": {
                "type": "string"
              },
              "tenantId": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "source": {
                "type": "string"
              },
              "callFlowId": {
                "type": "string"
              },
              "expression": {
                "type": "string"
              },
              "programId": {
                "type": "number"
              },
              "variables": {
                "type": "object",
                "example": {
                  "skills": [
                    {
                      "key": "1",
                      "value": "123"
                    }
                  ],
                  "dnVariables": [
                    {
                      "key": "1",
                      "value": "123",
                      "description": "description"
                    }
                  ]
                }
              },
              "callAttributes": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/CallAttributesDto"
                }
              },
              "channelType": {
                "type": "string",
                "enum": [
                  "VOICE",
                  "RETAIL",
                  "CHAT",
                  "EMAIL",
                  "MESSAGING"
                ]
              },
              "channelSubtype": {
                "type": "string",
                "enum": [
                  "SMS",
                  "WHATSAPP",
                  "FACEBOOK",
                  "APPLEBC"
                ]
              }
            },
            "required": [
              "number",
              "tenantId",
              "name"
            ]
          },
          "CallflowCommand": {
            "type": "object",
            "properties": {
              "id": {
                "type": "number"
              },
              "command": {
                "type": "string"
              },
              "schema": {
                "type": "object"
              },
              "color": {
                "type": "string"
              }
            },
            "required": [
              "id",
              "command",
              "schema",
              "color"
            ]
          },
          "CallflowParams": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "CallflowFunction": {
            "type": "object",
            "properties": {
              "id": {
                "type": "number"
              },
              "returnType": {
                "type": "string"
              },
              "functionName": {
                "type": "string"
              },
              "params": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/CallflowParams"
                }
              }
            },
            "required": [
              "id",
              "returnType",
              "functionName"
            ]
          },
          "ComponentConfig": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "tenantId": {
                "type": "string"
              },
              "data": {
                "type": "object"
              }
            },
            "required": [
              "name",
              "tenantId",
              "data"
            ]
          },
          "UpdateComponentConfigDto": {
            "type": "object",
            "properties": {
              "data": {
                "type": "object"
              }
            },
            "required": [
              "data"
            ]
          },
          "AesServer": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "password": {
                "type": "string"
              },
              "enabled": {
                "type": "boolean",
                "default": false
              },
              "tenantId": {
                "type": "string"
              },
              "remoteIp": {
                "type": "string"
              },
              "remotePort": {
                "type": "string"
              },
              "status": {
                "type": "boolean"
              },
              "msgSent": {
                "type": "string"
              },
              "msgRecvd": {
                "type": "string"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time"
              }
            },
            "required": [
              "id",
              "name",
              "password",
              "enabled",
              "tenantId",
              "createdAt",
              "updatedAt"
            ]
          },
          "CreateAesServerDto": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "enabled": {
                "type": "boolean",
                "default": false
              },
              "password": {
                "type": "string"
              }
            },
            "required": [
              "name",
              "enabled",
              "password"
            ]
          },
          "UpdateAesServerDto": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "password": {
                "type": "string"
              },
              "enabled": {
                "type": "boolean",
                "default": false
              }
            },
            "required": [
              "name",
              "password",
              "enabled"
            ]
          },
          "AddLicenseModeDto": {
            "type": "object",
            "properties": {
              "licenseMode": {
                "type": "string"
              }
            },
            "required": [
              "licenseMode"
            ]
          },
          "TransformImportDto": {
            "type": "object",
            "properties": {
              "provider": {
                "type": "string"
              },
              "programId": {
                "type": "number"
              },
              "bpoId": {
                "type": "string"
              },
              "data": {
                "type": "object"
              }
            },
            "required": [
              "provider",
              "data"
            ]
          },
          "ImportFilter": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "VDN",
                  "Skill",
                  "Vector",
                  "Agent",
                  "Endpoint",
                  "Variables",
                  "ServiceHours",
                  "Holidays",
                  "Announcement",
                  "VectorRoutingTable",
                  "PermissionSet",
                  "VoiceMailServer",
                  "CTILink"
                ]
              },
              "keys": {
                "type": "array",
                "default": [],
                "example": [
                  "EN0001",
                  "EN0001-EN0004",
                  "EN*",
                  "*0001"
                ],
                "items": {
                  "type": "string"
                }
              }
            },
            "required": [
              "type",
              "keys"
            ]
          },
          "TransformImportV2ModifiedDto": {
            "type": "object",
            "properties": {
              "provider": {
                "type": "string"
              },
              "programId": {
                "type": "number"
              },
              "numberPrefix": {
                "type": "string"
              },
              "namePrefix": {
                "type": "string"
              },
              "user": {
                "type": "string"
              },
              "bpoId": {
                "type": "string"
              },
              "data": {
                "type": "object"
              },
              "filter": {
                "type": "array",
                "default": [],
                "items": {
                  "$ref": "#/definitions/ImportFilter"
                }
              },
              "extractAll": {
                "type": "boolean",
                "default": true
              },
              "acdId": {
                "type": "string"
              },
              "acdName": {
                "type": "string"
              },
              "acdDetails": {
                "type": "string"
              },
              "isOverride": {
                "type": "boolean",
                "default": true
              },
              "namePrefixedEntities": {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "VDN",
                    "Skill",
                    "Vector",
                    "Agent",
                    "Endpoint",
                    "Variables",
                    "ServiceHours",
                    "Holidays",
                    "Announcement",
                    "VectorRoutingTable",
                    "PermissionSet",
                    "VoiceMailServer",
                    "CTILink"
                  ]
                }
              },
              "numberPrefixedEntities": {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "VDN",
                    "Agent",
                    "Endpoint",
                    "ServiceHours",
                    "Holidays",
                    "Announcement",
                    "VectorRoutingTable"
                  ]
                }
              }
            },
            "required": [
              "provider",
              "numberPrefix",
              "namePrefix",
              "user",
              "data",
              "extractAll",
              "acdName"
            ]
          },
          "ImportStatsDto": {
            "type": "object",
            "properties": {
              "acdId": {
                "type": "string"
              },
              "tenantId": {
                "type": "string"
              },
              "entity": {
                "type": "string",
                "enum": [
                  "VDN",
                  "Skill",
                  "Vector",
                  "ParsedImportVector",
                  "Agent",
                  "Station",
                  "SkillVDNMapping",
                  "AgentGroups",
                  "CallType",
                  "Variables",
                  "TransactionData",
                  "ServiceHours",
                  "Holidays",
                  "Announcement",
                  "VectorRoutingTable",
                  "Cor",
                  "HuntGroup",
                  "VoiceMailServer",
                  "AbbreviatedDialingGroup",
                  "AbbreviatedDialingPersonal",
                  "AbbreviatedDialingSystem",
                  "CTILink",
                  "FeatureAccessCodes"
                ]
              },
              "type": {
                "type": "string",
                "enum": [
                  "conflicted",
                  "created",
                  "updated"
                ]
              },
              "number": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            },
            "required": [
              "acdId",
              "tenantId",
              "entity",
              "type"
            ]
          },
          "TransformImportPreReportModifiedDto": {
            "type": "object",
            "properties": {
              "provider": {
                "type": "string"
              },
              "data": {
                "type": "object"
              },
              "numberPrefix": {
                "type": "string"
              },
              "namePrefix": {
                "type": "string"
              },
              "filter": {
                "type": "array",
                "default": [],
                "items": {
                  "$ref": "#/definitions/ImportFilter"
                }
              },
              "isOverride": {
                "type": "boolean",
                "default": true
              },
              "numberPrefixedEntities": {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "VDN",
                    "Agent",
                    "Endpoint",
                    "ServiceHours",
                    "Holidays",
                    "Announcement",
                    "VectorRoutingTable"
                  ]
                }
              }
            },
            "required": [
              "provider",
              "data",
              "numberPrefix",
              "namePrefix"
            ]
          },
          "ExtractedAcdEntitiesNameProperties": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            },
            "required": [
              "id",
              "name"
            ]
          },
          "ExtractedAcdEntitiesName": {
            "type": "object",
            "properties": {
              "Agent": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ExtractedAcdEntitiesNameProperties"
                }
              },
              "Endpoint": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ExtractedAcdEntitiesNameProperties"
                }
              },
              "SkillVDNMapping": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ExtractedAcdEntitiesNameProperties"
                }
              },
              "AgentGroups": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ExtractedAcdEntitiesNameProperties"
                }
              },
              "CallType": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ExtractedAcdEntitiesNameProperties"
                }
              },
              "Variables": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ExtractedAcdEntitiesNameProperties"
                }
              },
              "TransactionData": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ExtractedAcdEntitiesNameProperties"
                }
              },
              "ServiceHours": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ExtractedAcdEntitiesNameProperties"
                }
              },
              "Holidays": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ExtractedAcdEntitiesNameProperties"
                }
              },
              "Announcement": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ExtractedAcdEntitiesNameProperties"
                }
              },
              "Cor": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ExtractedAcdEntitiesNameProperties"
                }
              },
              "HuntGroup": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ExtractedAcdEntitiesNameProperties"
                }
              },
              "VoiceMailServer": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ExtractedAcdEntitiesNameProperties"
                }
              },
              "AbbreviatedDialingGroup": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ExtractedAcdEntitiesNameProperties"
                }
              },
              "AbbreviatedDialingPersonal": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ExtractedAcdEntitiesNameProperties"
                }
              },
              "AbbreviatedDialingSystem": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ExtractedAcdEntitiesNameProperties"
                }
              },
              "VDN": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ExtractedAcdEntitiesNameProperties"
                }
              },
              "Skill": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ExtractedAcdEntitiesNameProperties"
                }
              },
              "Vector": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ExtractedAcdEntitiesNameProperties"
                }
              },
              "ParsedImportVector": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ExtractedAcdEntitiesNameProperties"
                }
              },
              "VectorRoutingTable": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ExtractedAcdEntitiesNameProperties"
                }
              },
              "CTILink": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/ExtractedAcdEntitiesNameProperties"
                }
              }
            },
            "required": [
              "Agent",
              "Endpoint",
              "SkillVDNMapping",
              "AgentGroups",
              "CallType",
              "Variables",
              "TransactionData",
              "ServiceHours",
              "Holidays",
              "Announcement",
              "Cor",
              "HuntGroup",
              "VoiceMailServer",
              "AbbreviatedDialingGroup",
              "AbbreviatedDialingPersonal",
              "AbbreviatedDialingSystem",
              "VDN",
              "Skill",
              "Vector",
              "ParsedImportVector",
              "VectorRoutingTable",
              "CTILink"
            ]
          },
          "PreReportResponseDto": {
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "nullable": true
              },
              "data": {
                "$ref": "#/definitions/ExtractedAcdEntitiesName"
              }
            },
            "required": [
              "status",
              "data"
            ]
          },
          "CreateMigrationIdentityDto": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "acdId": {
                "type": "string"
              },
              "tenantId": {
                "type": "string"
              },
              "importId": {
                "type": "string"
              },
              "data": {
                "type": "object"
              },
              "user": {
                "type": "string"
              },
              "status": {
                "type": "string",
                "enum": [
                  "completed",
                  "inprogress",
                  "failed"
                ]
              },
              "createdAt": {
                "$ref": "#/definitions/Date"
              },
              "updatedAt": {
                "$ref": "#/definitions/Date"
              }
            },
            "required": [
              "id",
              "acdId",
              "tenantId",
              "importId",
              "user",
              "status",
              "createdAt",
              "updatedAt"
            ]
          },
          "RoutingNumber": {
            "type": "object",
            "properties": {
              "number": {
                "type": "string"
              }
            },
            "required": [
              "number"
            ]
          },
          "VectorRoutingTableDto": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "number": {
                "type": "number"
              },
              "routingNumbers": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/RoutingNumber"
                }
              },
              "tenantId": {
                "type": "string"
              },
              "sort": {
                "type": "boolean",
                "default": false
              },
              "createdAt": {
                "type": "string",
                "format": "date-time"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time"
              }
            },
            "required": [
              "name",
              "number",
              "tenantId",
              "createdAt",
              "updatedAt"
            ]
          },
          "CreateVectorRoutingTableDto": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "number": {
                "type": "number"
              },
              "routingNumbers": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/RoutingNumber"
                }
              },
              "tenantId": {
                "type": "string"
              },
              "sort": {
                "type": "boolean",
                "default": false
              }
            },
            "required": [
              "name",
              "number",
              "tenantId"
            ]
          },
          "UpdateVectorRoutingTableDto": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "routingNumbers": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/RoutingNumber"
                }
              },
              "tenantId": {
                "type": "string"
              },
              "sort": {
                "type": "boolean",
                "default": false
              }
            },
            "required": [
              "name",
              "tenantId"
            ]
          },
          "CtiLinkDto": {
            "type": "object",
            "properties": {
              "number": {
                "type": "number"
              },
              "name": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "ASAI-IP",
                  "ADJ-IP"
                ],
                "default": "ASAI-IP"
              },
              "eventMinimization": {
                "type": "boolean",
                "default": false
              },
              "specialCharForRN": {
                "type": "boolean",
                "default": false
              },
              "blockCMSMoveAgentEvent": {
                "type": "boolean",
                "default": false
              },
              "removePlusFromSipNum": {
                "type": "boolean",
                "default": true
              },
              "permissionSetId": {
                "type": "string"
              },
              "mntBusy": {
                "type": "boolean"
              },
              "msgRecvd": {
                "type": "string"
              },
              "msgSent": {
                "type": "string"
              },
              "version": {
                "type": "string"
              },
              "serviceState": {
                "type": "string"
              },
              "aeServiceServerName": {
                "type": "string"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time"
              }
            },
            "required": [
              "number",
              "type",
              "eventMinimization",
              "specialCharForRN",
              "blockCMSMoveAgentEvent",
              "removePlusFromSipNum",
              "createdAt",
              "updatedAt"
            ]
          },
          "CreateCtiLinkDto": {
            "type": "object",
            "properties": {
              "number": {
                "type": "number"
              },
              "tenantId": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "ASAI-IP",
                  "ADJ-IP"
                ],
                "default": "ASAI-IP"
              },
              "eventMinimization": {
                "type": "boolean",
                "default": false
              },
              "specialCharForRN": {
                "type": "boolean",
                "default": false
              },
              "blockCMSMoveAgentEvent": {
                "type": "boolean",
                "default": false
              },
              "removePlusFromSipNum": {
                "type": "boolean",
                "default": true
              },
              "permissionSetId": {
                "type": "string"
              }
            },
            "required": [
              "number",
              "tenantId",
              "type",
              "eventMinimization",
              "specialCharForRN",
              "blockCMSMoveAgentEvent",
              "removePlusFromSipNum"
            ]
          },
          "UpdateCtiLinkDto": {
            "type": "object",
            "properties": {
              "tenantId": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "ASAI-IP",
                  "ADJ-IP"
                ],
                "default": "ASAI-IP"
              },
              "eventMinimization": {
                "type": "boolean",
                "default": false
              },
              "specialCharForRN": {
                "type": "boolean",
                "default": false
              },
              "blockCMSMoveAgentEvent": {
                "type": "boolean",
                "default": false
              },
              "removePlusFromSipNum": {
                "type": "boolean",
                "default": true
              },
              "permissionSetId": {
                "type": "string"
              }
            },
            "required": [
              "tenantId",
              "type",
              "eventMinimization",
              "specialCharForRN",
              "blockCMSMoveAgentEvent",
              "removePlusFromSipNum"
            ]
          },
          "DeviceDataTemplate": {
            "type": "object",
            "properties": {
              "key": {
                "type": "string"
              },
              "value": {
                "type": "object"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time"
              }
            },
            "required": [
              "key",
              "value",
              "createdAt",
              "updatedAt"
            ]
          },
          "CreateDeviceDataTemplateDto": {
            "type": "object",
            "properties": {
              "key": {
                "type": "string"
              },
              "value": {
                "type": "object"
              }
            },
            "required": [
              "key",
              "value"
            ]
          },
          "UpdateDeviceDataTemplateDto": {
            "type": "object",
            "properties": {
              "value": {
                "type": "object"
              }
            },
            "required": [
              "value"
            ]
          },
          "VlanParametersTG": {
            "type": "object",
            "properties": {
              "vlanSupported": {
                "type": "boolean"
              },
              "vlanId": {
                "type": "number"
              }
            },
            "required": [
              "vlanSupported"
            ]
          },
          "DiffServerQosParametersTG": {
            "type": "object",
            "properties": {
              "callControlPhbValue": {
                "type": "number",
                "default": 46
              },
              "audioPhbValue": {
                "type": "number",
                "default": 46
              },
              "videoPhbValue": {
                "type": "number",
                "default": 26
              }
            },
            "required": [
              "callControlPhbValue",
              "audioPhbValue",
              "videoPhbValue"
            ]
          },
          "TerminalGroup": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "tenantId": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "stationAdminPassword": {
                "type": "string",
                "default": "27238"
              },
              "stationAdminPasswordHash": {
                "type": "string"
              },
              "stationAdminPasswordSalt": {
                "type": "string"
              },
              "stationAdminPasswordAlgorithm": {
                "type": "string",
                "default": "SHA-512"
              },
              "officeLocation": {
                "type": "string"
              },
              "groupNumber": {
                "type": "number"
              },
              "vlanParameters": {
                "$ref": "#/definitions/VlanParametersTG"
              },
              "diffServerQosParameters": {
                "$ref": "#/definitions/DiffServerQosParametersTG"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time"
              }
            },
            "required": [
              "id",
              "tenantId",
              "name",
              "createdAt",
              "updatedAt"
            ]
          },
          "CreateTerminalGroupDto": {
            "type": "object",
            "properties": {
              "tenantId": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "stationAdminPassword": {
                "type": "string",
                "default": "27238"
              },
              "officeLocation": {
                "type": "string"
              },
              "groupNumber": {
                "type": "number"
              },
              "vlanParameters": {
                "$ref": "#/definitions/VlanParametersTG"
              },
              "diffServerQosParameters": {
                "$ref": "#/definitions/DiffServerQosParametersTG"
              }
            },
            "required": [
              "tenantId",
              "name"
            ]
          },
          "ChangeTerminalGroupAdminPassword": {
            "type": "object",
            "properties": {
              "password": {
                "type": "string",
                "default": "27238"
              }
            }
          },
          "UpdateTerminalGroupDto": {
            "type": "object",
            "properties": {
              "tenantId": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "officeLocation": {
                "type": "string"
              },
              "groupNumber": {
                "type": "number"
              },
              "vlanParameters": {
                "$ref": "#/definitions/VlanParametersTG"
              },
              "diffServerQosParameters": {
                "$ref": "#/definitions/DiffServerQosParametersTG"
              }
            },
            "required": [
              "tenantId",
              "name"
            ]
          },
          "CMSLinkDto": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "fqdn": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "port": {
                "type": "number"
              },
              "enabled": {
                "type": "boolean"
              },
              "tenantId": {
                "type": "string"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time"
              }
            },
            "required": [
              "id",
              "name",
              "fqdn",
              "port",
              "tenantId",
              "createdAt",
              "updatedAt"
            ]
          },
          "CreateCMSLinkDto": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "fqdn": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "port": {
                "type": "number",
                "default": 5001
              },
              "enabled": {
                "type": "boolean",
                "default": false
              },
              "tenantId": {
                "type": "string"
              }
            },
            "required": [
              "name",
              "fqdn",
              "port",
              "tenantId"
            ]
          },
          "UpdateCMSLinkDto": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "fqdn": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "port": {
                "type": "number",
                "default": 5001
              },
              "enabled": {
                "type": "boolean",
                "default": false
              },
              "tenantId": {
                "type": "string"
              }
            },
            "required": [
              "name",
              "fqdn",
              "port",
              "tenantId"
            ]
          },
          "ServerInfo": {
            "type": "object",
            "properties": {
              "version": {
                "type": "string"
              }
            },
            "required": [
              "version"
            ]
          }
        }
      }
    }
  ]
}